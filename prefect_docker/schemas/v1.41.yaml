basePath: /v1.41
consumes:
- application/json
- text/plain
definitions:
  Address:
    description: Address represents an IPv4 or IPv6 IP address.
    properties:
      Addr:
        description: IP address.
        type: string
      PrefixLen:
        description: Mask length of the IP address.
        type: integer
    type: object
  AuthConfig:
    example:
      password: xxxx
      serveraddress: https://index.docker.io/v1/
      username: hannibal
    properties:
      email:
        type: string
      password:
        type: string
      serveraddress:
        type: string
      username:
        type: string
    type: object
  BuildCache:
    description: 'BuildCache contains information about a build cache record.

      '
    properties:
      CreatedAt:
        description: 'Date and time at which the build cache was created in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2016-08-18T10:44:24.496525531Z'
        format: dateTime
        type: string
      Description:
        description: 'Description of the build-step that produced the build cache.

          '
        example: mount / from exec /bin/sh -c echo 'Binary::apt::APT::Keep-Downloaded-Packages
          "true";' > /etc/apt/apt.conf.d/keep-cache
        type: string
      ID:
        description: 'Unique ID of the build cache record.

          '
        example: ndlpt0hhvkqcdfkputsk4cq9c
        type: string
      InUse:
        description: 'Indicates if the build cache is in use.

          '
        example: false
        type: boolean
      LastUsedAt:
        description: 'Date and time at which the build cache was last used in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2017-08-09T07:09:37.632105588Z'
        format: dateTime
        type: string
        x-nullable: true
      Parent:
        description: 'ID of the parent build cache record.

          '
        example: hw53o5aio51xtltp5xjp8v7fx
        type: string
      Shared:
        description: 'Indicates if the build cache is shared.

          '
        example: true
        type: boolean
      Size:
        description: 'Amount of disk space used by the build cache (in bytes).

          '
        example: 51
        type: integer
      Type:
        description: 'Cache record type.

          '
        enum:
        - internal
        - frontend
        - source.local
        - source.git.checkout
        - exec.cachemount
        - regular
        example: regular
        type: string
      UsageCount:
        example: 26
        type: integer
    type: object
  BuildInfo:
    properties:
      aux:
        $ref: '#/definitions/ImageID'
      error:
        type: string
      errorDetail:
        $ref: '#/definitions/ErrorDetail'
      id:
        type: string
      progress:
        type: string
      progressDetail:
        $ref: '#/definitions/ProgressDetail'
      status:
        type: string
      stream:
        type: string
    type: object
  ClusterInfo:
    description: 'ClusterInfo represents information about the swarm as is returned
      by the

      "/info" endpoint. Join-tokens are not included.

      '
    properties:
      CreatedAt:
        description: 'Date and time at which the swarm was initialised in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2016-08-18T10:44:24.496525531Z'
        format: dateTime
        type: string
      DataPathPort:
        default: 4789
        description: 'DataPathPort specifies the data path port number for data traffic.

          Acceptable port range is 1024 to 49151.

          If no port is set or is set to 0, the default port (4789) is used.

          '
        example: 4789
        format: uint32
        type: integer
      DefaultAddrPool:
        description: 'Default Address Pool specifies default subnet pools for global
          scope

          networks.

          '
        items:
          example:
          - 10.10.0.0/16
          - 20.20.0.0/16
          format: CIDR
          type: string
        type: array
      ID:
        description: The ID of the swarm.
        example: abajmipo7b4xz5ip2nrla6b11
        type: string
      RootRotationInProgress:
        description: 'Whether there is currently a root CA rotation in progress for
          the swarm

          '
        example: false
        type: boolean
      Spec:
        $ref: '#/definitions/SwarmSpec'
      SubnetSize:
        default: 24
        description: 'SubnetSize specifies the subnet size of the networks created
          from the

          default subnet pool.

          '
        example: 24
        format: uint32
        maximum: 29
        type: integer
      TLSInfo:
        $ref: '#/definitions/TLSInfo'
      UpdatedAt:
        description: 'Date and time at which the swarm was last updated in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2017-08-09T07:09:37.632105588Z'
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
    x-nullable: true
  Commit:
    description: 'Commit holds the Git-commit (SHA1) that a binary was built from,
      as

      reported in the version-string of external tools, such as `containerd`,

      or `runC`.

      '
    properties:
      Expected:
        description: 'Commit ID of external tool expected by dockerd as set at build
          time.

          '
        example: 2d41c047c83e09a6d61d464906feb2a2f3c52aa4
        type: string
      ID:
        description: Actual commit ID of external tool.
        example: cfb82a876ecc11b5ca0977d1733adbe58599088a
        type: string
    type: object
  Config:
    properties:
      CreatedAt:
        format: dateTime
        type: string
      ID:
        type: string
      Spec:
        $ref: '#/definitions/ConfigSpec'
      UpdatedAt:
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
  ConfigSpec:
    properties:
      Data:
        description: 'Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))

          config data.

          '
        type: string
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        type: object
      Name:
        description: User-defined name of the config.
        type: string
      Templating:
        $ref: '#/definitions/Driver'
        description: 'Templating driver, if applicable


          Templating controls whether and how to evaluate the config payload as

          a template. If no driver is set, no templating is used.

          '
    type: object
  ContainerConfig:
    description: 'Configuration for a container that is portable between hosts.

      '
    properties:
      ArgsEscaped:
        default: false
        description: Command is already escaped (Windows only)
        example: false
        type: boolean
        x-nullable: true
      AttachStderr:
        default: true
        description: Whether to attach to `stderr`.
        type: boolean
      AttachStdin:
        default: false
        description: Whether to attach to `stdin`.
        type: boolean
      AttachStdout:
        default: true
        description: Whether to attach to `stdout`.
        type: boolean
      Cmd:
        description: 'Command to run specified as a string or an array of strings.

          '
        example:
        - /bin/sh
        items:
          type: string
        type: array
      Domainname:
        description: 'The domain name to use for the container.

          '
        type: string
      Entrypoint:
        description: 'The entry point for the container as a string or an array of
          strings.


          If the array consists of exactly one empty string (`[""]`) then the

          entry point is reset to system default (i.e., the entry point used by

          docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).

          '
        example: []
        items:
          type: string
        type: array
      Env:
        description: 'A list of environment variables to set inside the container
          in the

          form `["VAR=value", ...]`. A variable without `=` is removed from the

          environment, rather than to have an empty value.

          '
        example:
        - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        items:
          type: string
        type: array
      ExposedPorts:
        additionalProperties:
          default: {}
          enum:
          - {}
          type: object
        description: 'An object mapping ports to an empty object in the form:


          `{"<port>/<tcp|udp|sctp>": {}}`

          '
        example:
          443/tcp: {}
          80/tcp: {}
        type: object
        x-nullable: true
      Healthcheck:
        $ref: '#/definitions/HealthConfig'
      Hostname:
        description: 'The hostname to use for the container, as a valid RFC 1123 hostname.

          '
        example: 439f4e91bd1d
        type: string
      Image:
        description: 'The name (or reference) of the image to use when creating the
          container,

          or which was used when the container was created.

          '
        example: example-image:1.0
        type: string
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        example:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        type: object
      MacAddress:
        description: MAC address of the container.
        type: string
        x-nullable: true
      NetworkDisabled:
        description: Disable networking for the container.
        type: boolean
        x-nullable: true
      OnBuild:
        description: '`ONBUILD` metadata that were defined in the image''s `Dockerfile`.

          '
        example: []
        items:
          type: string
        type: array
        x-nullable: true
      OpenStdin:
        default: false
        description: Open `stdin`
        type: boolean
      Shell:
        description: 'Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.

          '
        example:
        - /bin/sh
        - -c
        items:
          type: string
        type: array
        x-nullable: true
      StdinOnce:
        default: false
        description: Close `stdin` after one attached client disconnects
        type: boolean
      StopSignal:
        description: 'Signal to stop a container as a string or unsigned integer.

          '
        example: SIGTERM
        type: string
        x-nullable: true
      StopTimeout:
        default: 10
        description: Timeout to stop a container in seconds.
        type: integer
        x-nullable: true
      Tty:
        default: false
        description: 'Attach standard streams to a TTY, including `stdin` if it is
          not closed.

          '
        type: boolean
      User:
        description: The user that commands are run as inside the container.
        type: string
      Volumes:
        additionalProperties:
          default: {}
          enum:
          - {}
          type: object
        description: 'An object mapping mount point paths inside the container to
          empty

          objects.

          '
        type: object
      WorkingDir:
        description: The working directory for commands to run in.
        example: /public/
        type: string
    type: object
  ContainerState:
    description: 'ContainerState stores container''s running state. It''s part of
      ContainerJSONBase

      and will be returned by the "inspect" command.

      '
    properties:
      Dead:
        example: false
        type: boolean
      Error:
        type: string
      ExitCode:
        description: The last exit code of this container
        example: 0
        type: integer
      FinishedAt:
        description: The time when this container last exited.
        example: '2020-01-06T09:07:59.461876391Z'
        type: string
      Health:
        $ref: '#/definitions/Health'
        x-nullable: true
      OOMKilled:
        description: 'Whether this container has been killed because it ran out of
          memory.

          '
        example: false
        type: boolean
      Paused:
        description: Whether this container is paused.
        example: false
        type: boolean
      Pid:
        description: The process ID of this container
        example: 1234
        type: integer
      Restarting:
        description: Whether this container is restarting.
        example: false
        type: boolean
      Running:
        description: 'Whether this container is running.


          Note that a running container can be _paused_. The `Running` and `Paused`

          booleans are not mutually exclusive:


          When pausing a container (on Linux), the freezer cgroup is used to suspend

          all processes in the container. Freezing the process requires the process
          to

          be running. As a result, paused containers are both `Running` _and_ `Paused`.


          Use the `Status` field instead to determine if a container''s state is "running".

          '
        example: true
        type: boolean
      StartedAt:
        description: The time when this container was last started.
        example: '2020-01-06T09:06:59.461876391Z'
        type: string
      Status:
        description: 'String representation of the container state. Can be one of
          "created",

          "running", "paused", "restarting", "removing", "exited", or "dead".

          '
        enum:
        - created
        - running
        - paused
        - restarting
        - removing
        - exited
        - dead
        example: running
        type: string
    type: object
  ContainerSummary:
    properties:
      Command:
        description: Command to run when starting the container
        type: string
      Created:
        description: When the container was created
        format: int64
        type: integer
      HostConfig:
        properties:
          NetworkMode:
            type: string
        type: object
      Id:
        description: The ID of this container
        type: string
        x-go-name: ID
      Image:
        description: The name of the image used when creating this container
        type: string
      ImageID:
        description: The ID of the image that this container was created from
        type: string
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        type: object
      Mounts:
        items:
          $ref: '#/definitions/MountPoint'
        type: array
      Names:
        description: The names that this container has been given
        items:
          type: string
        type: array
      NetworkSettings:
        description: A summary of the container's network settings
        properties:
          Networks:
            additionalProperties:
              $ref: '#/definitions/EndpointSettings'
            type: object
        type: object
      Ports:
        description: The ports exposed by this container
        items:
          $ref: '#/definitions/Port'
        type: array
      SizeRootFs:
        description: The total size of all the files in this container
        format: int64
        type: integer
      SizeRw:
        description: The size of files that have been created or changed by this container
        format: int64
        type: integer
      State:
        description: The state of this container (e.g. `Exited`)
        type: string
      Status:
        description: Additional human-readable status of this container (e.g. `Exit
          0`)
        type: string
    type: object
  ContainerWaitExitError:
    description: container waiting error, if any
    properties:
      Message:
        description: Details of an error
        type: string
    type: object
    x-go-name: ContainerWaitOKBodyError
  ContainerWaitResponse:
    description: OK response to ContainerWait operation
    properties:
      Error:
        $ref: '#/definitions/ContainerWaitExitError'
      StatusCode:
        description: Exit code of the container
        type: integer
        x-nullable: false
    required:
    - StatusCode
    - Error
    title: ContainerWaitResponse
    type: object
    x-go-name: ContainerWaitOKBody
  CreateImageInfo:
    properties:
      error:
        type: string
      id:
        type: string
      progress:
        type: string
      progressDetail:
        $ref: '#/definitions/ProgressDetail'
      status:
        type: string
    type: object
  DeviceMapping:
    description: A device mapping between the host and container
    example:
      CgroupPermissions: mrw
      PathInContainer: /dev/deviceName
      PathOnHost: /dev/deviceName
    properties:
      CgroupPermissions:
        type: string
      PathInContainer:
        type: string
      PathOnHost:
        type: string
    type: object
  DeviceRequest:
    description: A request for devices to be sent to device drivers
    properties:
      Capabilities:
        description: 'A list of capabilities; an OR list of AND lists of capabilities.

          '
        example:
        - - gpu
          - nvidia
          - compute
        items:
          items:
            type: string
          type: array
        type: array
      Count:
        example: -1
        type: integer
      DeviceIDs:
        example:
        - '0'
        - '1'
        - GPU-fef8089b-4820-abfc-e83e-94318197576e
        items:
          type: string
        type: array
      Driver:
        example: nvidia
        type: string
      Options:
        additionalProperties:
          type: string
        description: 'Driver-specific options, specified as a key/value pairs. These
          options

          are passed directly to the driver.

          '
        type: object
    type: object
  DistributionInspect:
    description: 'Describes the result obtained from contacting the registry to retrieve

      image metadata.

      '
    properties:
      Descriptor:
        $ref: '#/definitions/OCIDescriptor'
      Platforms:
        description: 'An array containing all platforms supported by the image.

          '
        items:
          $ref: '#/definitions/OCIPlatform'
        type: array
    required:
    - Descriptor
    - Platforms
    title: DistributionInspectResponse
    type: object
    x-go-name: DistributionInspect
  Driver:
    description: Driver represents a driver (network, logging, secrets).
    properties:
      Name:
        description: Name of the driver.
        example: some-driver
        type: string
        x-nullable: false
      Options:
        additionalProperties:
          type: string
        description: Key/value map of driver-specific options.
        example:
          OptionA: value for driver-specific option A
          OptionB: value for driver-specific option B
        type: object
        x-nullable: false
    required:
    - Name
    type: object
  EndpointIPAMConfig:
    description: 'EndpointIPAMConfig represents an endpoint''s IPAM configuration.

      '
    properties:
      IPv4Address:
        example: 172.20.30.33
        type: string
      IPv6Address:
        example: 2001:db8:abcd::3033
        type: string
      LinkLocalIPs:
        example:
        - 169.254.34.68
        - fe80::3468
        items:
          type: string
        type: array
    type: object
    x-nullable: true
  EndpointPortConfig:
    properties:
      Name:
        type: string
      Protocol:
        enum:
        - tcp
        - udp
        - sctp
        type: string
      PublishMode:
        default: ingress
        description: "The mode in which port is published.\n\n<p><br /></p>\n\n- \"\
          ingress\" makes the target port accessible on every node,\n  regardless\
          \ of whether there is a task for the service running on\n  that node or\
          \ not.\n- \"host\" bypasses the routing mesh and publish the port directly\
          \ on\n  the swarm node where that service is running.\n"
        enum:
        - ingress
        - host
        example: ingress
        type: string
      PublishedPort:
        description: The port on the swarm hosts.
        type: integer
      TargetPort:
        description: The port inside the container.
        type: integer
    type: object
  EndpointSettings:
    description: Configuration for a network endpoint.
    properties:
      Aliases:
        example:
        - server_x
        - server_y
        items:
          type: string
        type: array
      DriverOpts:
        additionalProperties:
          type: string
        description: 'DriverOpts is a mapping of driver options and values. These
          options

          are passed directly to the driver and are driver specific.

          '
        example:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        type: object
        x-nullable: true
      EndpointID:
        description: 'Unique ID for the service endpoint in a Sandbox.

          '
        example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        type: string
      Gateway:
        description: 'Gateway address for this network.

          '
        example: 172.17.0.1
        type: string
      GlobalIPv6Address:
        description: 'Global IPv6 address.

          '
        example: 2001:db8::5689
        type: string
      GlobalIPv6PrefixLen:
        description: 'Mask length of the global IPv6 address.

          '
        example: 64
        format: int64
        type: integer
      IPAMConfig:
        $ref: '#/definitions/EndpointIPAMConfig'
      IPAddress:
        description: 'IPv4 address.

          '
        example: 172.17.0.4
        type: string
      IPPrefixLen:
        description: 'Mask length of the IPv4 address.

          '
        example: 16
        type: integer
      IPv6Gateway:
        description: 'IPv6 gateway address.

          '
        example: 2001:db8:2::100
        type: string
      Links:
        example:
        - container_1
        - container_2
        items:
          type: string
        type: array
      MacAddress:
        description: 'MAC address for the endpoint on this network.

          '
        example: 02:42:ac:11:00:04
        type: string
      NetworkID:
        description: 'Unique ID of the network.

          '
        example: 08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a
        type: string
    type: object
  EndpointSpec:
    description: Properties that can be configured to access and load balance a service.
    properties:
      Mode:
        default: vip
        description: 'The mode of resolution to use for internal load balancing between
          tasks.

          '
        enum:
        - vip
        - dnsrr
        type: string
      Ports:
        description: 'List of exposed ports that this service is accessible on from
          the

          outside. Ports can only be provided if `vip` resolution mode is used.

          '
        items:
          $ref: '#/definitions/EndpointPortConfig'
        type: array
    type: object
  EngineDescription:
    description: EngineDescription provides information about an engine.
    properties:
      EngineVersion:
        example: 17.06.0
        type: string
      Labels:
        additionalProperties:
          type: string
        example:
          foo: bar
        type: object
      Plugins:
        example:
        - Name: awslogs
          Type: Log
        - Name: fluentd
          Type: Log
        - Name: gcplogs
          Type: Log
        - Name: gelf
          Type: Log
        - Name: journald
          Type: Log
        - Name: json-file
          Type: Log
        - Name: logentries
          Type: Log
        - Name: splunk
          Type: Log
        - Name: syslog
          Type: Log
        - Name: bridge
          Type: Network
        - Name: host
          Type: Network
        - Name: ipvlan
          Type: Network
        - Name: macvlan
          Type: Network
        - Name: 'null'
          Type: Network
        - Name: overlay
          Type: Network
        - Name: local
          Type: Volume
        - Name: localhost:5000/vieux/sshfs:latest
          Type: Volume
        - Name: vieux/sshfs:latest
          Type: Volume
        items:
          properties:
            Name:
              type: string
            Type:
              type: string
          type: object
        type: array
    type: object
  ErrorDetail:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
  ErrorResponse:
    description: Represents an error.
    example:
      message: Something went wrong.
    properties:
      message:
        description: The error message.
        type: string
        x-nullable: false
    required:
    - message
    type: object
  EventActor:
    description: 'Actor describes something that generates events, like a container,
      network,

      or a volume.

      '
    properties:
      Attributes:
        additionalProperties:
          type: string
        description: 'Various key/value attributes of the object, depending on its
          type.

          '
        example:
          com.example.some-label: some-label-value
          image: alpine:latest
          name: my-container
        type: object
      ID:
        description: The ID of the object emitting the event
        example: ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743
        type: string
    type: object
  EventMessage:
    description: 'EventMessage represents the information an event contains.

      '
    properties:
      Action:
        description: The type of event
        example: create
        type: string
      Actor:
        $ref: '#/definitions/EventActor'
      Type:
        description: The type of object emitting the event
        enum:
        - builder
        - config
        - container
        - daemon
        - image
        - network
        - node
        - plugin
        - secret
        - service
        - volume
        example: container
        type: string
      scope:
        description: 'Scope of the event. Engine events are `local` scope. Cluster
          (Swarm)

          events are `swarm` scope.

          '
        enum:
        - local
        - swarm
        type: string
      time:
        description: Timestamp of event
        example: 1629574695
        format: int64
        type: integer
      timeNano:
        description: Timestamp of event, with nanosecond accuracy
        example: 1629574695515050031
        format: int64
        type: integer
    title: SystemEventsResponse
    type: object
  GenericResources:
    description: 'User-defined resources can be either Integer resources (e.g, `SSD=3`)
      or

      String resources (e.g, `GPU=UUID1`).

      '
    example:
    - DiscreteResourceSpec:
        Kind: SSD
        Value: 3
    - NamedResourceSpec:
        Kind: GPU
        Value: UUID1
    - NamedResourceSpec:
        Kind: GPU
        Value: UUID2
    items:
      properties:
        DiscreteResourceSpec:
          properties:
            Kind:
              type: string
            Value:
              format: int64
              type: integer
          type: object
        NamedResourceSpec:
          properties:
            Kind:
              type: string
            Value:
              type: string
          type: object
      type: object
    type: array
  GraphDriverData:
    description: 'Information about the storage driver used to store the container''s
      and

      image''s filesystem.

      '
    properties:
      Data:
        additionalProperties:
          type: string
        description: 'Low-level storage metadata, provided as key/value pairs.


          This information is driver-specific, and depends on the storage-driver

          in use, and should be used for informational purposes only.

          '
        example:
          MergedDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged
          UpperDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff
          WorkDir: /var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work
        type: object
        x-nullable: false
      Name:
        description: Name of the storage driver.
        example: overlay2
        type: string
        x-nullable: false
    required:
    - Name
    - Data
    type: object
  Health:
    description: 'Health stores information about the container''s healthcheck results.

      '
    properties:
      FailingStreak:
        description: FailingStreak is the number of consecutive failures
        example: 0
        type: integer
      Log:
        description: 'Log contains the last few results (oldest first)

          '
        items:
          $ref: '#/definitions/HealthcheckResult'
          x-nullable: true
        type: array
      Status:
        description: 'Status is one of `none`, `starting`, `healthy` or `unhealthy`


          - "none"      Indicates there is no healthcheck

          - "starting"  Starting indicates that the container is not yet ready

          - "healthy"   Healthy indicates that the container is running correctly

          - "unhealthy" Unhealthy indicates that the container has a problem

          '
        enum:
        - none
        - starting
        - healthy
        - unhealthy
        example: healthy
        type: string
    type: object
    x-nullable: true
  HealthConfig:
    description: A test to perform to check that the container is healthy.
    properties:
      Interval:
        description: 'The time to wait between checks in nanoseconds. It should be
          0 or at

          least 1000000 (1 ms). 0 means inherit.

          '
        type: integer
      Retries:
        description: 'The number of consecutive failures needed to consider a container
          as

          unhealthy. 0 means inherit.

          '
        type: integer
      StartPeriod:
        description: 'Start period for the container to initialize before starting

          health-retries countdown in nanoseconds. It should be 0 or at least

          1000000 (1 ms). 0 means inherit.

          '
        type: integer
      Test:
        description: 'The test to perform. Possible values are:


          - `[]` inherit healthcheck from image or parent image

          - `["NONE"]` disable healthcheck

          - `["CMD", args...]` exec arguments directly

          - `["CMD-SHELL", command]` run command with system''s default shell

          '
        items:
          type: string
        type: array
      Timeout:
        description: 'The time to wait before considering the check to have hung.
          It should

          be 0 or at least 1000000 (1 ms). 0 means inherit.

          '
        type: integer
    type: object
  HealthcheckResult:
    description: 'HealthcheckResult stores information about a single run of a healthcheck
      probe

      '
    properties:
      End:
        description: 'Date and time at which this check ended in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2020-01-04T10:45:21.364524523Z'
        format: dateTime
        type: string
      ExitCode:
        description: 'ExitCode meanings:


          - `0` healthy

          - `1` unhealthy

          - `2` reserved (considered unhealthy)

          - other values: error running probe

          '
        example: 0
        type: integer
      Output:
        description: Output from last check
        type: string
      Start:
        description: 'Date and time at which this check started in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2020-01-04T10:44:24.496525531Z'
        format: date-time
        type: string
    type: object
  HostConfig:
    allOf:
    - $ref: '#/definitions/Resources'
    - properties:
        AutoRemove:
          description: 'Automatically remove the container when the container''s process

            exits. This has no effect if `RestartPolicy` is set.

            '
          type: boolean
        Binds:
          description: "A list of volume bindings for this container. Each volume\
            \ binding\nis a string in one of these forms:\n\n- `host-src:container-dest[:options]`\
            \ to bind-mount a host path\n  into the container. Both `host-src`, and\
            \ `container-dest` must\n  be an _absolute_ path.\n- `volume-name:container-dest[:options]`\
            \ to bind-mount a volume\n  managed by a volume driver into the container.\
            \ `container-dest`\n  must be an _absolute_ path.\n\n`options` is an optional,\
            \ comma-delimited list of:\n\n- `nocopy` disables automatic copying of\
            \ data from the container\n  path to the volume. The `nocopy` flag only\
            \ applies to named volumes.\n- `[ro|rw]` mounts a volume read-only or\
            \ read-write, respectively.\n  If omitted or set to `rw`, volumes are\
            \ mounted read-write.\n- `[z|Z]` applies SELinux labels to allow or deny\
            \ multiple containers\n  to read and write to the same volume.\n    -\
            \ `z`: a _shared_ content label is applied to the content. This\n    \
            \  label indicates that multiple containers can share the volume\n   \
            \   content, for both reading and writing.\n    - `Z`: a _private unshared_\
            \ label is applied to the content.\n      This label indicates that only\
            \ the current container can use\n      a private volume. Labeling systems\
            \ such as SELinux require\n      proper labels to be placed on volume\
            \ content that is mounted\n      into a container. Without a label, the\
            \ security system can\n      prevent a container's processes from using\
            \ the content. By\n      default, the labels set by the host operating\
            \ system are not\n      modified.\n- `[[r]shared|[r]slave|[r]private]`\
            \ specifies mount\n  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).\n\
            \  This only applies to bind-mounted volumes, not internal volumes\n \
            \ or named volumes. Mount propagation requires the source mount\n  point\
            \ (the location where the source directory is mounted in the\n  host operating\
            \ system) to have the correct propagation properties.\n  For shared volumes,\
            \ the source mount point must be set to `shared`.\n  For slave volumes,\
            \ the mount must be set to either `shared` or\n  `slave`.\n"
          items:
            type: string
          type: array
        CapAdd:
          description: 'A list of kernel capabilities to add to the container. Conflicts

            with option ''Capabilities''.

            '
          items:
            type: string
          type: array
        CapDrop:
          description: 'A list of kernel capabilities to drop from the container.
            Conflicts

            with option ''Capabilities''.

            '
          items:
            type: string
          type: array
        Cgroup:
          description: Cgroup to use for the container.
          type: string
        CgroupnsMode:
          description: 'cgroup namespace mode for the container. Possible values are:


            - `"private"`: the container runs in its own private cgroup namespace

            - `"host"`: use the host system''s cgroup namespace


            If not specified, the daemon default is used, which can either be `"private"`

            or `"host"`, depending on daemon version, kernel support and configuration.

            '
          enum:
          - private
          - host
          type: string
        ConsoleSize:
          description: 'Initial console size, as an `[height, width]` array. (Windows
            only)

            '
          items:
            minimum: 0
            type: integer
          maxItems: 2
          minItems: 2
          type: array
        ContainerIDFile:
          description: Path to a file where the container ID is written
          type: string
        Dns:
          description: A list of DNS servers for the container to use.
          items:
            type: string
          type: array
        DnsOptions:
          description: A list of DNS options.
          items:
            type: string
          type: array
        DnsSearch:
          description: A list of DNS search domains.
          items:
            type: string
          type: array
        ExtraHosts:
          description: 'A list of hostnames/IP mappings to add to the container''s
            `/etc/hosts`

            file. Specified in the form `["hostname:IP"]`.

            '
          items:
            type: string
          type: array
        GroupAdd:
          description: 'A list of additional groups that the container process will
            run as.

            '
          items:
            type: string
          type: array
        IpcMode:
          description: 'IPC sharing mode for the container. Possible values are:


            - `"none"`: own private IPC namespace, with /dev/shm not mounted

            - `"private"`: own private IPC namespace

            - `"shareable"`: own private IPC namespace, with a possibility to share
            it with other containers

            - `"container:<name|id>"`: join another (shareable) container''s IPC namespace

            - `"host"`: use the host system''s IPC namespace


            If not specified, daemon default is used, which can either be `"private"`

            or `"shareable"`, depending on daemon version and configuration.

            '
          type: string
        Isolation:
          description: 'Isolation technology of the container. (Windows only)

            '
          enum:
          - default
          - process
          - hyperv
          type: string
        Links:
          description: 'A list of links for the container in the form `container_name:alias`.

            '
          items:
            type: string
          type: array
        LogConfig:
          description: The logging configuration for this container
          properties:
            Config:
              additionalProperties:
                type: string
              type: object
            Type:
              enum:
              - json-file
              - syslog
              - journald
              - gelf
              - fluentd
              - awslogs
              - splunk
              - etwlogs
              - none
              type: string
          type: object
        MaskedPaths:
          description: 'The list of paths to be masked inside the container (this
            overrides

            the default set of paths).

            '
          items:
            type: string
          type: array
        Mounts:
          description: 'Specification for mounts to be added to the container.

            '
          items:
            $ref: '#/definitions/Mount'
          type: array
        NetworkMode:
          description: 'Network mode to use for this container. Supported standard
            values

            are: `bridge`, `host`, `none`, and `container:<name|id>`. Any

            other value is taken as a custom network''s name to which this

            container should connect to.

            '
          type: string
        OomScoreAdj:
          description: 'An integer value containing the score given to the container
            in

            order to tune OOM killer preferences.

            '
          example: 500
          type: integer
        PidMode:
          description: 'Set the PID (Process) Namespace mode for the container. It
            can be

            either:


            - `"container:<name|id>"`: joins another container''s PID namespace

            - `"host"`: use the host''s PID namespace inside the container

            '
          type: string
        PortBindings:
          $ref: '#/definitions/PortMap'
        Privileged:
          description: Gives the container full access to the host.
          type: boolean
        PublishAllPorts:
          description: 'Allocates an ephemeral host port for all of a container''s

            exposed ports.


            Ports are de-allocated when the container stops and allocated when

            the container starts. The allocated port might be changed when

            restarting the container.


            The port is selected from the ephemeral port range that depends on

            the kernel. For example, on Linux the range is defined by

            `/proc/sys/net/ipv4/ip_local_port_range`.

            '
          type: boolean
        ReadonlyPaths:
          description: 'The list of paths to be set as read-only inside the container

            (this overrides the default set of paths).

            '
          items:
            type: string
          type: array
        ReadonlyRootfs:
          description: Mount the container's root filesystem as read only.
          type: boolean
        RestartPolicy:
          $ref: '#/definitions/RestartPolicy'
        Runtime:
          description: Runtime to use with this container.
          type: string
        SecurityOpt:
          description: 'A list of string values to customize labels for MLS systems,
            such

            as SELinux.

            '
          items:
            type: string
          type: array
        ShmSize:
          description: 'Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.

            '
          minimum: 0
          type: integer
        StorageOpt:
          additionalProperties:
            type: string
          description: 'Storage driver options for this container, in the form `{"size":
            "120G"}`.

            '
          type: object
        Sysctls:
          additionalProperties:
            type: string
          description: 'A list of kernel parameters (sysctls) to set in the container.

            For example:


            ```

            {"net.ipv4.ip_forward": "1"}

            ```

            '
          type: object
        Tmpfs:
          additionalProperties:
            type: string
          description: 'A map of container directories which should be replaced by
            tmpfs

            mounts, and their corresponding mount options. For example:


            ```

            { "/run": "rw,noexec,nosuid,size=65536k" }

            ```

            '
          type: object
        UTSMode:
          description: UTS namespace to use for the container.
          type: string
        UsernsMode:
          description: 'Sets the usernamespace mode for the container when usernamespace

            remapping option is enabled.

            '
          type: string
        VolumeDriver:
          description: Driver that this container uses to mount volumes.
          type: string
        VolumesFrom:
          description: 'A list of volumes to inherit from another container, specified
            in

            the form `<container name>[:<ro|rw>]`.

            '
          items:
            type: string
          type: array
      type: object
    description: Container configuration that depends on the host we are running on
  IPAM:
    properties:
      Config:
        description: 'List of IPAM configuration options, specified as a map:


          ```

          {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress":
          <device_name:IP address>}

          ```

          '
        items:
          $ref: '#/definitions/IPAMConfig'
        type: array
      Driver:
        default: default
        description: Name of the IPAM driver to use.
        type: string
      Options:
        additionalProperties:
          type: string
        description: Driver-specific options, specified as a map.
        type: object
    type: object
  IPAMConfig:
    properties:
      AuxiliaryAddresses:
        additionalProperties:
          type: string
        type: object
      Gateway:
        type: string
      IPRange:
        type: string
      Subnet:
        type: string
    type: object
  IdResponse:
    description: Response to an API call that returns just an Id
    properties:
      Id:
        description: The id of the newly created object.
        type: string
        x-nullable: false
    required:
    - Id
    type: object
  ImageDeleteResponseItem:
    properties:
      Deleted:
        description: The image ID of an image that was deleted
        type: string
      Untagged:
        description: The image ID of an image that was untagged
        type: string
    type: object
  ImageID:
    description: Image ID or Digest
    example:
      ID: sha256:85f05633ddc1c50679be2b16a0479ab6f7637f8884e0cfe0f4d20e1ebb3d6e7c
    properties:
      ID:
        type: string
    type: object
  ImageInspect:
    description: 'Information about an image in the local image cache.

      '
    properties:
      Architecture:
        description: 'Hardware CPU architecture that the image runs on.

          '
        example: arm
        type: string
        x-nullable: false
      Author:
        description: 'Name of the author that was specified when committing the image,
          or as

          specified through MAINTAINER (deprecated) in the Dockerfile.

          '
        example: ''
        type: string
        x-nullable: false
      Comment:
        description: 'Optional message that was set when committing or importing the
          image.

          '
        example: ''
        type: string
        x-nullable: false
      Config:
        $ref: '#/definitions/ContainerConfig'
      Container:
        description: 'The ID of the container that was used to create the image.


          Depending on how the image was created, this field may be empty.

          '
        example: 65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735
        type: string
        x-nullable: false
      ContainerConfig:
        $ref: '#/definitions/ContainerConfig'
      Created:
        description: 'Date and time at which the image was created, formatted in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2022-02-04T21:20:12.497794809Z'
        type: string
        x-nullable: false
      DockerVersion:
        description: 'The version of Docker that was used to build the image.


          Depending on how the image was created, this field may be empty.

          '
        example: 20.10.7
        type: string
        x-nullable: false
      GraphDriver:
        $ref: '#/definitions/GraphDriverData'
      Id:
        description: 'ID is the content-addressable ID of an image.


          This identified is a content-addressable digest calculated from the

          image''s configuration (which includes the digests of layers used by

          the image).


          Note that this digest differs from the `RepoDigests` below, which

          holds digests of image manifests that reference the image.

          '
        example: sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710
        type: string
        x-nullable: false
      Metadata:
        description: 'Additional metadata of the image in the local cache. This information

          is local to the daemon, and not part of the image itself.

          '
        properties:
          LastTagTime:
            description: 'Date and time at which the image was last tagged in

              [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.


              This information is only available if the image was tagged locally,

              and omitted otherwise.

              '
            example: '2022-02-28T14:40:02.623929178Z'
            format: dateTime
            type: string
            x-nullable: true
        type: object
      Os:
        description: 'Operating System the image is built to run on.

          '
        example: linux
        type: string
        x-nullable: false
      OsVersion:
        description: 'Operating System version the image is built to run on (especially

          for Windows).

          '
        example: ''
        type: string
        x-nullable: true
      Parent:
        description: 'ID of the parent image.


          Depending on how the image was created, this field may be empty and

          is only set for images that were built/created locally. This field

          is empty if the image was pulled from an image registry.

          '
        example: ''
        type: string
        x-nullable: false
      RepoDigests:
        description: 'List of content-addressable digests of locally available image
          manifests

          that the image is referenced from. Multiple manifests can refer to the

          same image.


          These digests are usually only available if the image was either pulled

          from a registry, or if the image was pushed to a registry, which is when

          the manifest is generated and its digest calculated.

          '
        example:
        - example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb
        - internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578
        items:
          type: string
        type: array
      RepoTags:
        description: 'List of image names/tags in the local image cache that reference
          this

          image.


          Multiple image tags can refer to the same imagem and this list may be

          empty if no tags reference the image, in which case the image is

          "untagged", in which case it can still be referenced by its ID.

          '
        example:
        - example:1.0
        - example:latest
        - example:stable
        - internal.registry.example.com:5000/example:1.0
        items:
          type: string
        type: array
      RootFS:
        description: 'Information about the image''s RootFS, including the layer IDs.

          '
        properties:
          Layers:
            example:
            - sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6
            - sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef
            items:
              type: string
            type: array
          Type:
            example: layers
            type: string
            x-nullable: false
        required:
        - Type
        type: object
      Size:
        description: 'Total size of the image including all layers it is composed
          of.

          '
        example: 1239828
        format: int64
        type: integer
        x-nullable: false
      Variant:
        description: 'CPU architecture variant (presently ARM-only).

          '
        example: v7
        type: string
        x-nullable: true
      VirtualSize:
        description: 'Total size of the image including all layers it is composed
          of.


          In versions of Docker before v1.10, this field was calculated from

          the image itself and all of its parent images. Docker v1.10 and up

          store images self-contained, and no longer use a parent-chain, making

          this field an equivalent of the Size field.


          This field is kept for backward compatibility, but may be removed in

          a future version of the API.

          '
        example: 1239828
        format: int64
        type: integer
        x-nullable: false
    type: object
  ImageSummary:
    properties:
      Containers:
        type: integer
        x-nullable: false
      Created:
        type: integer
        x-nullable: false
      Id:
        type: string
        x-nullable: false
      Labels:
        additionalProperties:
          type: string
        type: object
        x-nullable: false
      ParentId:
        type: string
        x-nullable: false
      RepoDigests:
        items:
          type: string
        type: array
        x-nullable: false
      RepoTags:
        items:
          type: string
        type: array
        x-nullable: false
      SharedSize:
        type: integer
        x-nullable: false
      Size:
        type: integer
        x-nullable: false
      VirtualSize:
        type: integer
        x-nullable: false
    required:
    - Id
    - ParentId
    - RepoTags
    - RepoDigests
    - Created
    - Size
    - SharedSize
    - VirtualSize
    - Labels
    - Containers
    type: object
  IndexInfo:
    description: IndexInfo contains information about a registry.
    properties:
      Mirrors:
        description: 'List of mirrors, expressed as URIs.

          '
        example:
        - https://hub-mirror.corp.example.com:5000/
        - https://registry-2.docker.io/
        - https://registry-3.docker.io/
        items:
          type: string
        type: array
      Name:
        description: 'Name of the registry, such as "docker.io".

          '
        example: docker.io
        type: string
      Official:
        description: 'Indicates whether this is an official registry (i.e., Docker
          Hub / docker.io)

          '
        example: true
        type: boolean
      Secure:
        description: 'Indicates if the registry is part of the list of insecure

          registries.


          If `false`, the registry is insecure. Insecure registries accept

          un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from

          unknown CAs) communication.


          > **Warning**: Insecure registries can be useful when running a local

          > registry. However, because its use creates security vulnerabilities

          > it should ONLY be enabled for testing purposes. For increased

          > security, users should add their CA to their system''s list of

          > trusted CAs instead of enabling this option.

          '
        example: true
        type: boolean
    type: object
    x-nullable: true
  JoinTokens:
    description: 'JoinTokens contains the tokens workers and managers need to join
      the swarm.

      '
    properties:
      Manager:
        description: 'The token managers can use to join the swarm.

          '
        example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
        type: string
      Worker:
        description: 'The token workers can use to join the swarm.

          '
        example: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx
        type: string
    type: object
  Limit:
    description: 'An object describing a limit on resources which can be requested
      by a task.

      '
    properties:
      MemoryBytes:
        example: 8272408576
        format: int64
        type: integer
      NanoCPUs:
        example: 4000000000
        format: int64
        type: integer
      Pids:
        default: 0
        description: 'Limits the maximum number of PIDs in the container. Set `0`
          for unlimited.

          '
        example: 100
        format: int64
        type: integer
    type: object
  LocalNodeState:
    default: ''
    description: Current local status of this node.
    enum:
    - ''
    - inactive
    - pending
    - active
    - error
    - locked
    example: active
    type: string
  ManagerStatus:
    description: 'ManagerStatus represents the status of a manager.


      It provides the current status of a node''s manager component, if the node

      is a manager.

      '
    properties:
      Addr:
        description: 'The IP address and port at which the manager is reachable.

          '
        example: 10.0.0.46:2377
        type: string
      Leader:
        default: false
        example: true
        type: boolean
      Reachability:
        $ref: '#/definitions/Reachability'
    type: object
    x-nullable: true
  Mount:
    properties:
      BindOptions:
        description: Optional configuration for the `bind` type.
        properties:
          NonRecursive:
            default: false
            description: Disable recursive bind mount.
            type: boolean
          Propagation:
            description: A propagation mode with the value `[r]private`, `[r]shared`,
              or `[r]slave`.
            enum:
            - private
            - rprivate
            - shared
            - rshared
            - slave
            - rslave
            type: string
        type: object
      Consistency:
        description: 'The consistency requirement for the mount: `default`, `consistent`,
          `cached`, or `delegated`.'
        type: string
      ReadOnly:
        description: Whether the mount should be read-only.
        type: boolean
      Source:
        description: Mount source (e.g. a volume name, a host path).
        type: string
      Target:
        description: Container path.
        type: string
      TmpfsOptions:
        description: Optional configuration for the `tmpfs` type.
        properties:
          Mode:
            description: The permission mode for the tmpfs mount in an integer.
            type: integer
          SizeBytes:
            description: The size for the tmpfs mount in bytes.
            format: int64
            type: integer
        type: object
      Type:
        description: 'The mount type. Available types:


          - `bind` Mounts a file or directory from the host into the container. Must
          exist prior to creating the container.

          - `volume` Creates a volume with the given name and options (or uses a pre-existing
          volume with the same name and options). These are **not** removed when the
          container is removed.

          - `tmpfs` Create a tmpfs with the given options. The mount source cannot
          be specified for tmpfs.

          - `npipe` Mounts a named pipe from the host into the container. Must exist
          prior to creating the container.

          '
        enum:
        - bind
        - volume
        - tmpfs
        - npipe
        type: string
      VolumeOptions:
        description: Optional configuration for the `volume` type.
        properties:
          DriverConfig:
            description: Map of driver specific options
            properties:
              Name:
                description: Name of the driver to use to create the volume.
                type: string
              Options:
                additionalProperties:
                  type: string
                description: key/value map of driver specific options.
                type: object
            type: object
          Labels:
            additionalProperties:
              type: string
            description: User-defined key/value metadata.
            type: object
          NoCopy:
            default: false
            description: Populate volume with data from the target.
            type: boolean
        type: object
    type: object
  MountPoint:
    description: 'MountPoint represents a mount point configuration inside the container.

      This is used for reporting the mountpoints in use by a container.

      '
    properties:
      Destination:
        description: 'Destination is the path relative to the container root (`/`)
          where

          the `Source` is mounted inside the container.

          '
        example: /usr/share/nginx/html/
        type: string
      Driver:
        description: 'Driver is the volume driver used to create the volume (if it
          is a volume).

          '
        example: local
        type: string
      Mode:
        description: 'Mode is a comma separated list of options supplied by the user
          when

          creating the bind/volume mount.


          The default is platform-specific (`"z"` on Linux, empty on Windows).

          '
        example: z
        type: string
      Name:
        description: 'Name is the name reference to the underlying data defined by
          `Source`

          e.g., the volume name.

          '
        example: myvolume
        type: string
      Propagation:
        description: 'Propagation describes how mounts are propagated from the host
          into the

          mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)

          for details. This field is not used on Windows.

          '
        example: ''
        type: string
      RW:
        description: 'Whether the mount is mounted writable (read-write).

          '
        example: true
        type: boolean
      Source:
        description: 'Source location of the mount.


          For volumes, this contains the storage location of the volume (within

          `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains

          the source (host) part of the bind-mount. For `tmpfs` mount points, this

          field is empty.

          '
        example: /var/lib/docker/volumes/myvolume/_data
        type: string
      Type:
        description: 'The mount type:


          - `bind` a mount of a file or directory from the host into the container.

          - `volume` a docker volume with the given `Name`.

          - `tmpfs` a `tmpfs`.

          - `npipe` a named pipe from the host into the container.

          '
        enum:
        - bind
        - volume
        - tmpfs
        - npipe
        example: volume
        type: string
    type: object
  Network:
    example:
      Attachable: false
      Containers:
        19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
          EndpointID: 628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a
          IPv4Address: 172.19.0.2/16
          IPv6Address: ''
          MacAddress: 02:42:ac:13:00:02
          Name: test
      Created: '2016-10-19T04:33:30.360899459Z'
      Driver: bridge
      EnableIPv6: false
      IPAM:
        Config:
        - Gateway: 172.19.0.1
          Subnet: 172.19.0.0/16
        Driver: default
        Options:
          foo: bar
      Id: 7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99
      Ingress: false
      Internal: false
      Labels:
        com.example.some-label: some-value
        com.example.some-other-label: some-other-value
      Name: net01
      Options:
        com.docker.network.bridge.default_bridge: 'true'
        com.docker.network.bridge.enable_icc: 'true'
        com.docker.network.bridge.enable_ip_masquerade: 'true'
        com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
        com.docker.network.bridge.name: docker0
        com.docker.network.driver.mtu: '1500'
      Scope: local
    properties:
      Attachable:
        type: boolean
      Containers:
        additionalProperties:
          $ref: '#/definitions/NetworkContainer'
        type: object
      Created:
        format: dateTime
        type: string
      Driver:
        type: string
      EnableIPv6:
        type: boolean
      IPAM:
        $ref: '#/definitions/IPAM'
      Id:
        type: string
      Ingress:
        type: boolean
      Internal:
        type: boolean
      Labels:
        additionalProperties:
          type: string
        type: object
      Name:
        type: string
      Options:
        additionalProperties:
          type: string
        type: object
      Scope:
        type: string
    type: object
  NetworkAttachmentConfig:
    description: 'Specifies how a service should be attached to a particular network.

      '
    properties:
      Aliases:
        description: 'Discoverable alternate names for the service on this network.

          '
        items:
          type: string
        type: array
      DriverOpts:
        additionalProperties:
          type: string
        description: 'Driver attachment options for the network target.

          '
        type: object
      Target:
        description: 'The target network for attachment. Must be a network name or
          ID.

          '
        type: string
    type: object
  NetworkContainer:
    properties:
      EndpointID:
        type: string
      IPv4Address:
        type: string
      IPv6Address:
        type: string
      MacAddress:
        type: string
      Name:
        type: string
    type: object
  NetworkSettings:
    description: NetworkSettings exposes the network settings in the API
    properties:
      Bridge:
        description: Name of the network'a bridge (for example, `docker0`).
        example: docker0
        type: string
      EndpointID:
        description: 'EndpointID uniquely represents a service endpoint in a Sandbox.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b
        type: string
      Gateway:
        description: 'Gateway address for the default "bridge" network.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 172.17.0.1
        type: string
      GlobalIPv6Address:
        description: 'Global IPv6 address for the default "bridge" network.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 2001:db8::5689
        type: string
      GlobalIPv6PrefixLen:
        description: 'Mask length of the global IPv6 address.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 64
        type: integer
      HairpinMode:
        description: 'Indicates if hairpin NAT should be enabled on the virtual interface.

          '
        example: false
        type: boolean
      IPAddress:
        description: 'IPv4 address for the default "bridge" network.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 172.17.0.4
        type: string
      IPPrefixLen:
        description: 'Mask length of the IPv4 address.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 16
        type: integer
      IPv6Gateway:
        description: 'IPv6 gateway address for this network.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 2001:db8:2::100
        type: string
      LinkLocalIPv6Address:
        description: IPv6 unicast address using the link-local prefix.
        example: fe80::42:acff:fe11:1
        type: string
      LinkLocalIPv6PrefixLen:
        description: Prefix length of the IPv6 unicast address.
        example: '64'
        type: integer
      MacAddress:
        description: 'MAC address for the container on the default "bridge" network.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when attached to the

          > default "bridge" network. Use the information from the "bridge"

          > network inside the `Networks` map instead, which contains the same

          > information. This field was deprecated in Docker 1.9 and is scheduled

          > to be removed in Docker 17.12.0

          '
        example: 02:42:ac:11:00:04
        type: string
      Networks:
        additionalProperties:
          $ref: '#/definitions/EndpointSettings'
        description: 'Information about all networks that the container is connected
          to.

          '
        type: object
      Ports:
        $ref: '#/definitions/PortMap'
      SandboxID:
        description: SandboxID uniquely represents a container's network stack.
        example: 9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3
        type: string
      SandboxKey:
        description: SandboxKey identifies the sandbox
        example: /var/run/docker/netns/8ab54b426c38
        type: string
      SecondaryIPAddresses:
        description: ''
        items:
          $ref: '#/definitions/Address'
        type: array
        x-nullable: true
      SecondaryIPv6Addresses:
        description: ''
        items:
          $ref: '#/definitions/Address'
        type: array
        x-nullable: true
    type: object
  NetworkingConfig:
    description: 'NetworkingConfig represents the container''s networking configuration
      for

      each of its interfaces.

      It is used for the networking configs specified in the `docker create`

      and `docker network connect` commands.

      '
    example:
      EndpointsConfig:
        isolated_nw:
          Aliases:
          - server_x
          - server_y
          IPAMConfig:
            IPv4Address: 172.20.30.33
            IPv6Address: 2001:db8:abcd::3033
            LinkLocalIPs:
            - 169.254.34.68
            - fe80::3468
          Links:
          - container_1
          - container_2
    properties:
      EndpointsConfig:
        additionalProperties:
          $ref: '#/definitions/EndpointSettings'
        description: 'A mapping of network name to endpoint configuration for that
          network.

          '
        type: object
    type: object
  Node:
    properties:
      CreatedAt:
        description: 'Date and time at which the node was added to the swarm in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2016-08-18T10:44:24.496525531Z'
        format: dateTime
        type: string
      Description:
        $ref: '#/definitions/NodeDescription'
      ID:
        example: 24ifsmvkjbyhk
        type: string
      ManagerStatus:
        $ref: '#/definitions/ManagerStatus'
      Spec:
        $ref: '#/definitions/NodeSpec'
      Status:
        $ref: '#/definitions/NodeStatus'
      UpdatedAt:
        description: 'Date and time at which the node was last updated in

          [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

          '
        example: '2017-08-09T07:09:37.632105588Z'
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
  NodeDescription:
    description: 'NodeDescription encapsulates the properties of the Node as reported
      by the

      agent.

      '
    properties:
      Engine:
        $ref: '#/definitions/EngineDescription'
      Hostname:
        example: bf3067039e47
        type: string
      Platform:
        $ref: '#/definitions/Platform'
      Resources:
        $ref: '#/definitions/ResourceObject'
      TLSInfo:
        $ref: '#/definitions/TLSInfo'
    type: object
  NodeSpec:
    example:
      Availability: active
      Labels:
        foo: bar
      Name: node-name
      Role: manager
    properties:
      Availability:
        description: Availability of the node.
        enum:
        - active
        - pause
        - drain
        example: active
        type: string
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        type: object
      Name:
        description: Name for the node.
        example: my-node
        type: string
      Role:
        description: Role of the node.
        enum:
        - worker
        - manager
        example: manager
        type: string
    type: object
  NodeState:
    description: NodeState represents the state of a node.
    enum:
    - unknown
    - down
    - ready
    - disconnected
    example: ready
    type: string
  NodeStatus:
    description: 'NodeStatus represents the status of a node.


      It provides the current status of the node, as seen by the manager.

      '
    properties:
      Addr:
        description: IP address of the node.
        example: 172.17.0.2
        type: string
      Message:
        example: ''
        type: string
      State:
        $ref: '#/definitions/NodeState'
    type: object
  OCIDescriptor:
    description: 'A descriptor struct containing digest, media type, and size, as
      defined in

      the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).

      '
    properties:
      digest:
        description: 'The digest of the targeted content.

          '
        example: sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96
        type: string
      mediaType:
        description: 'The media type of the object this schema refers to.

          '
        example: application/vnd.docker.distribution.manifest.v2+json
        type: string
      size:
        description: 'The size in bytes of the blob.

          '
        example: 3987495
        format: int64
        type: integer
    type: object
    x-go-name: Descriptor
  OCIPlatform:
    description: 'Describes the platform which the image in the manifest runs on,
      as defined

      in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).

      '
    properties:
      architecture:
        description: 'The CPU architecture, for example `amd64` or `ppc64`.

          '
        example: arm
        type: string
      os:
        description: 'The operating system, for example `linux` or `windows`.

          '
        example: windows
        type: string
      os.features:
        description: 'Optional field specifying an array of strings, each listing
          a required

          OS feature (for example on Windows `win32k`).

          '
        example:
        - win32k
        items:
          type: string
        type: array
      os.version:
        description: 'Optional field specifying the operating system version, for
          example on

          Windows `10.0.19041.1165`.

          '
        example: 10.0.19041.1165
        type: string
      variant:
        description: 'Optional field specifying a variant of the CPU, for example
          `v7` to

          specify ARMv7 when architecture is `arm`.

          '
        example: v7
        type: string
    type: object
    x-go-name: Platform
  ObjectVersion:
    description: 'The version number of the object such as node, service, etc. This
      is needed

      to avoid conflicting writes. The client must send the version number along

      with the modified specification when updating these objects.


      This approach ensures safe concurrency and determinism in that the change

      on the object may not be applied if the version number has changed from the

      last read. In other words, if two update requests specify the same base

      version, only one of the requests can succeed. As a result, two separate

      update requests that happen at the same time will not unintentionally

      overwrite each other.

      '
    properties:
      Index:
        example: 373531
        format: uint64
        type: integer
    type: object
  PeerNode:
    description: Represents a peer-node in the swarm
    properties:
      Addr:
        description: 'IP address and ports at which this node can be reached.

          '
        type: string
      NodeID:
        description: Unique identifier of for this node in the swarm.
        type: string
    type: object
  Platform:
    description: 'Platform represents the platform (Arch/OS).

      '
    properties:
      Architecture:
        description: 'Architecture represents the hardware architecture (for example,

          `x86_64`).

          '
        example: x86_64
        type: string
      OS:
        description: 'OS represents the Operating System (for example, `linux` or
          `windows`).

          '
        example: linux
        type: string
    type: object
  Plugin:
    description: A plugin for the Engine API
    properties:
      Config:
        description: The config of a plugin.
        properties:
          Args:
            properties:
              Description:
                example: command line arguments
                type: string
                x-nullable: false
              Name:
                example: args
                type: string
                x-nullable: false
              Settable:
                items:
                  type: string
                type: array
              Value:
                items:
                  type: string
                type: array
            required:
            - Name
            - Description
            - Settable
            - Value
            type: object
            x-nullable: false
          Description:
            example: A sample volume plugin for Docker
            type: string
            x-nullable: false
          DockerVersion:
            description: Docker Version used to create the plugin
            example: 17.06.0-ce
            type: string
            x-nullable: false
          Documentation:
            example: /engine/extend/plugins/
            type: string
            x-nullable: false
          Entrypoint:
            example:
            - /usr/bin/sample-volume-plugin
            - /data
            items:
              type: string
            type: array
          Env:
            example:
            - Description: If set, prints debug messages
              Name: DEBUG
              Settable: null
              Value: '0'
            items:
              $ref: '#/definitions/PluginEnv'
            type: array
          Interface:
            description: The interface between Docker and the plugin
            properties:
              ProtocolScheme:
                description: Protocol to use for clients connecting to the plugin.
                enum:
                - ''
                - moby.plugins.http/v1
                example: some.protocol/v1.0
                type: string
              Socket:
                example: plugins.sock
                type: string
                x-nullable: false
              Types:
                example:
                - docker.volumedriver/1.0
                items:
                  $ref: '#/definitions/PluginInterfaceType'
                type: array
            required:
            - Types
            - Socket
            type: object
            x-nullable: false
          IpcHost:
            example: false
            type: boolean
            x-nullable: false
          Linux:
            properties:
              AllowAllDevices:
                example: false
                type: boolean
                x-nullable: false
              Capabilities:
                example:
                - CAP_SYS_ADMIN
                - CAP_SYSLOG
                items:
                  type: string
                type: array
              Devices:
                items:
                  $ref: '#/definitions/PluginDevice'
                type: array
            required:
            - Capabilities
            - AllowAllDevices
            - Devices
            type: object
            x-nullable: false
          Mounts:
            items:
              $ref: '#/definitions/PluginMount'
            type: array
          Network:
            properties:
              Type:
                example: host
                type: string
                x-nullable: false
            required:
            - Type
            type: object
            x-nullable: false
          PidHost:
            example: false
            type: boolean
            x-nullable: false
          PropagatedMount:
            example: /mnt/volumes
            type: string
            x-nullable: false
          User:
            properties:
              GID:
                example: 1000
                format: uint32
                type: integer
              UID:
                example: 1000
                format: uint32
                type: integer
            type: object
            x-nullable: false
          WorkDir:
            example: /bin/
            type: string
            x-nullable: false
          rootfs:
            properties:
              diff_ids:
                example:
                - sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887
                - sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
                items:
                  type: string
                type: array
              type:
                example: layers
                type: string
            type: object
        required:
        - Description
        - Documentation
        - Interface
        - Entrypoint
        - WorkDir
        - Network
        - Linux
        - PidHost
        - PropagatedMount
        - IpcHost
        - Mounts
        - Env
        - Args
        type: object
        x-nullable: false
      Enabled:
        description: True if the plugin is running. False if the plugin is not running,
          only installed.
        example: true
        type: boolean
        x-nullable: false
      Id:
        example: 5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078
        type: string
      Name:
        example: tiborvass/sample-volume-plugin
        type: string
        x-nullable: false
      PluginReference:
        description: plugin remote reference used to push/pull the plugin
        example: localhost:5000/tiborvass/sample-volume-plugin:latest
        type: string
        x-nullable: false
      Settings:
        description: Settings that can be modified by users.
        properties:
          Args:
            items:
              type: string
            type: array
          Devices:
            items:
              $ref: '#/definitions/PluginDevice'
            type: array
          Env:
            example:
            - DEBUG=0
            items:
              type: string
            type: array
          Mounts:
            items:
              $ref: '#/definitions/PluginMount'
            type: array
        required:
        - Args
        - Devices
        - Env
        - Mounts
        type: object
        x-nullable: false
    required:
    - Settings
    - Enabled
    - Config
    - Name
    type: object
  PluginDevice:
    properties:
      Description:
        type: string
        x-nullable: false
      Name:
        type: string
        x-nullable: false
      Path:
        example: /dev/fuse
        type: string
      Settable:
        items:
          type: string
        type: array
    required:
    - Name
    - Description
    - Settable
    - Path
    type: object
    x-nullable: false
  PluginEnv:
    properties:
      Description:
        type: string
        x-nullable: false
      Name:
        type: string
        x-nullable: false
      Settable:
        items:
          type: string
        type: array
      Value:
        type: string
    required:
    - Name
    - Description
    - Settable
    - Value
    type: object
    x-nullable: false
  PluginInterfaceType:
    properties:
      Capability:
        type: string
        x-nullable: false
      Prefix:
        type: string
        x-nullable: false
      Version:
        type: string
        x-nullable: false
    required:
    - Prefix
    - Capability
    - Version
    type: object
    x-nullable: false
  PluginMount:
    properties:
      Description:
        example: This is a mount that's used by the plugin.
        type: string
        x-nullable: false
      Destination:
        example: /mnt/state
        type: string
        x-nullable: false
      Name:
        example: some-mount
        type: string
        x-nullable: false
      Options:
        example:
        - rbind
        - rw
        items:
          type: string
        type: array
      Settable:
        items:
          type: string
        type: array
      Source:
        example: /var/lib/docker/plugins/
        type: string
      Type:
        example: bind
        type: string
        x-nullable: false
    required:
    - Name
    - Description
    - Settable
    - Source
    - Destination
    - Type
    - Options
    type: object
    x-nullable: false
  PluginPrivilege:
    description: 'Describes a permission the user has to accept upon installing

      the plugin.

      '
    properties:
      Description:
        type: string
      Name:
        example: network
        type: string
      Value:
        example:
        - host
        items:
          type: string
        type: array
    type: object
    x-go-name: PluginPrivilege
  PluginsInfo:
    description: 'Available plugins per type.


      <p><br /></p>


      > **Note**: Only unmanaged (V1) plugins are included in this list.

      > V1 plugins are "lazily" loaded, and are not returned in this list

      > if there is no resource using the plugin.

      '
    properties:
      Authorization:
        description: Names of available authorization plugins.
        example:
        - img-authz-plugin
        - hbm
        items:
          type: string
        type: array
      Log:
        description: Names of available logging-drivers, and logging-driver plugins.
        example:
        - awslogs
        - fluentd
        - gcplogs
        - gelf
        - journald
        - json-file
        - logentries
        - splunk
        - syslog
        items:
          type: string
        type: array
      Network:
        description: Names of available network-drivers, and network-driver plugins.
        example:
        - bridge
        - host
        - ipvlan
        - macvlan
        - 'null'
        - overlay
        items:
          type: string
        type: array
      Volume:
        description: Names of available volume-drivers, and network-driver plugins.
        example:
        - local
        items:
          type: string
        type: array
    type: object
  Port:
    description: An open port on a container
    example:
      PrivatePort: 8080
      PublicPort: 80
      Type: tcp
    properties:
      IP:
        description: Host IP address that the container's port is mapped to
        format: ip-address
        type: string
      PrivatePort:
        description: Port on the container
        format: uint16
        type: integer
        x-nullable: false
      PublicPort:
        description: Port exposed on the host
        format: uint16
        type: integer
      Type:
        enum:
        - tcp
        - udp
        - sctp
        type: string
        x-nullable: false
    required:
    - PrivatePort
    - Type
    type: object
  PortBinding:
    description: 'PortBinding represents a binding between a host IP address and a
      host

      port.

      '
    properties:
      HostIp:
        description: Host IP address that the container's port is mapped to.
        example: 127.0.0.1
        type: string
      HostPort:
        description: Host port number that the container's port is mapped to.
        example: '4443'
        type: string
    type: object
  PortMap:
    additionalProperties:
      items:
        $ref: '#/definitions/PortBinding'
      type: array
      x-nullable: true
    description: 'PortMap describes the mapping of container ports to host ports,
      using the

      container''s port-number and protocol as key in the format `<port>/<protocol>`,

      for example, `80/udp`.


      If a container''s port is mapped for multiple protocols, separate entries

      are added to the mapping table.

      '
    example:
      2377/tcp: null
      443/tcp:
      - HostIp: 127.0.0.1
        HostPort: '4443'
      53/udp:
      - HostIp: 0.0.0.0
        HostPort: '53'
      80/tcp:
      - HostIp: 0.0.0.0
        HostPort: '80'
      - HostIp: 0.0.0.0
        HostPort: '8080'
      80/udp:
      - HostIp: 0.0.0.0
        HostPort: '80'
    type: object
  ProcessConfig:
    properties:
      arguments:
        items:
          type: string
        type: array
      entrypoint:
        type: string
      privileged:
        type: boolean
      tty:
        type: boolean
      user:
        type: string
    type: object
  ProgressDetail:
    properties:
      current:
        type: integer
      total:
        type: integer
    type: object
  PushImageInfo:
    properties:
      error:
        type: string
      progress:
        type: string
      progressDetail:
        $ref: '#/definitions/ProgressDetail'
      status:
        type: string
    type: object
  Reachability:
    description: Reachability represents the reachability of a node.
    enum:
    - unknown
    - unreachable
    - reachable
    example: reachable
    type: string
  RegistryServiceConfig:
    description: 'RegistryServiceConfig stores daemon registry services configuration.

      '
    properties:
      AllowNondistributableArtifactsCIDRs:
        description: 'List of IP ranges to which nondistributable artifacts can be
          pushed,

          using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).


          Some images (for example, Windows base images) contain artifacts

          whose distribution is restricted by license. When these images are

          pushed to a registry, restricted artifacts are not included.


          This configuration override this behavior, and enables the daemon to

          push nondistributable artifacts to all registries whose resolved IP

          address is within the subnet described by the CIDR syntax.


          This option is useful when pushing images containing

          nondistributable artifacts to a registry on an air-gapped network so

          hosts on that network can pull the images without connecting to

          another server.


          > **Warning**: Nondistributable artifacts typically have restrictions

          > on how and where they can be distributed and shared. Only use this

          > feature to push artifacts to private registries and ensure that you

          > are in compliance with any terms that cover redistributing

          > nondistributable artifacts.

          '
        example:
        - ::1/128
        - 127.0.0.0/8
        items:
          type: string
        type: array
      AllowNondistributableArtifactsHostnames:
        description: 'List of registry hostnames to which nondistributable artifacts
          can be

          pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.


          Some images (for example, Windows base images) contain artifacts

          whose distribution is restricted by license. When these images are

          pushed to a registry, restricted artifacts are not included.


          This configuration override this behavior for the specified

          registries.


          This option is useful when pushing images containing

          nondistributable artifacts to a registry on an air-gapped network so

          hosts on that network can pull the images without connecting to

          another server.


          > **Warning**: Nondistributable artifacts typically have restrictions

          > on how and where they can be distributed and shared. Only use this

          > feature to push artifacts to private registries and ensure that you

          > are in compliance with any terms that cover redistributing

          > nondistributable artifacts.

          '
        example:
        - registry.internal.corp.example.com:3000
        - '[2001:db8:a0b:12f0::1]:443'
        items:
          type: string
        type: array
      IndexConfigs:
        additionalProperties:
          $ref: '#/definitions/IndexInfo'
        example:
          127.0.0.1:5000:
            Mirrors: []
            Name: 127.0.0.1:5000
            Official: false
            Secure: false
          '[2001:db8:a0b:12f0::1]:80':
            Mirrors: []
            Name: '[2001:db8:a0b:12f0::1]:80'
            Official: false
            Secure: false
          docker.io:
            Mirrors:
            - https://hub-mirror.corp.example.com:5000/
            Name: docker.io
            Official: true
            Secure: true
          registry.internal.corp.example.com:3000:
            Mirrors: []
            Name: registry.internal.corp.example.com:3000
            Official: false
            Secure: false
        type: object
      InsecureRegistryCIDRs:
        description: 'List of IP ranges of insecure registries, using the CIDR syntax

          ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries

          accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates

          from unknown CAs) communication.


          By default, local registries (`127.0.0.0/8`) are configured as

          insecure. All other registries are secure. Communicating with an

          insecure registry is not possible if the daemon assumes that registry

          is secure.


          This configuration override this behavior, insecure communication with

          registries whose resolved IP address is within the subnet described by

          the CIDR syntax.


          Registries can also be marked insecure by hostname. Those registries

          are listed under `IndexConfigs` and have their `Secure` field set to

          `false`.


          > **Warning**: Using this option can be useful when running a local

          > registry, but introduces security vulnerabilities. This option

          > should therefore ONLY be used for testing purposes. For increased

          > security, users should add their CA to their system''s list of trusted

          > CAs instead of enabling this option.

          '
        example:
        - ::1/128
        - 127.0.0.0/8
        items:
          type: string
        type: array
      Mirrors:
        description: 'List of registry URLs that act as a mirror for the official

          (`docker.io`) registry.

          '
        example:
        - https://hub-mirror.corp.example.com:5000/
        - https://[2001:db8:a0b:12f0::1]/
        items:
          type: string
        type: array
    type: object
    x-nullable: true
  ResourceObject:
    description: 'An object describing the resources which can be advertised by a
      node and

      requested by a task.

      '
    properties:
      GenericResources:
        $ref: '#/definitions/GenericResources'
      MemoryBytes:
        example: 8272408576
        format: int64
        type: integer
      NanoCPUs:
        example: 4000000000
        format: int64
        type: integer
    type: object
  Resources:
    description: A container's resources (cgroups config, ulimits, etc)
    properties:
      BlkioDeviceReadBps:
        description: 'Limit read rate (bytes per second) from a device, in the form:


          ```

          [{"Path": "device_path", "Rate": rate}]

          ```

          '
        items:
          $ref: '#/definitions/ThrottleDevice'
        type: array
      BlkioDeviceReadIOps:
        description: 'Limit read rate (IO per second) from a device, in the form:


          ```

          [{"Path": "device_path", "Rate": rate}]

          ```

          '
        items:
          $ref: '#/definitions/ThrottleDevice'
        type: array
      BlkioDeviceWriteBps:
        description: 'Limit write rate (bytes per second) to a device, in the form:


          ```

          [{"Path": "device_path", "Rate": rate}]

          ```

          '
        items:
          $ref: '#/definitions/ThrottleDevice'
        type: array
      BlkioDeviceWriteIOps:
        description: 'Limit write rate (IO per second) to a device, in the form:


          ```

          [{"Path": "device_path", "Rate": rate}]

          ```

          '
        items:
          $ref: '#/definitions/ThrottleDevice'
        type: array
      BlkioWeight:
        description: Block IO weight (relative weight).
        maximum: 1000
        minimum: 0
        type: integer
      BlkioWeightDevice:
        description: 'Block IO weight (relative device weight) in the form:


          ```

          [{"Path": "device_path", "Weight": weight}]

          ```

          '
        items:
          properties:
            Path:
              type: string
            Weight:
              minimum: 0
              type: integer
          type: object
        type: array
      CgroupParent:
        description: 'Path to `cgroups` under which the container''s `cgroup` is created.
          If

          the path is not absolute, the path is considered to be relative to the

          `cgroups` path of the init process. Cgroups are created if they do not

          already exist.

          '
        type: string
      CpuCount:
        description: 'The number of usable CPUs (Windows only).


          On Windows Server containers, the processor resource controls are

          mutually exclusive. The order of precedence is `CPUCount` first, then

          `CPUShares`, and `CPUPercent` last.

          '
        format: int64
        type: integer
      CpuPercent:
        description: 'The usable percentage of the available CPUs (Windows only).


          On Windows Server containers, the processor resource controls are

          mutually exclusive. The order of precedence is `CPUCount` first, then

          `CPUShares`, and `CPUPercent` last.

          '
        format: int64
        type: integer
      CpuPeriod:
        description: The length of a CPU period in microseconds.
        format: int64
        type: integer
      CpuQuota:
        description: 'Microseconds of CPU time that the container can get in a CPU
          period.

          '
        format: int64
        type: integer
      CpuRealtimePeriod:
        description: 'The length of a CPU real-time period in microseconds. Set to
          0 to

          allocate no time allocated to real-time tasks.

          '
        format: int64
        type: integer
      CpuRealtimeRuntime:
        description: 'The length of a CPU real-time runtime in microseconds. Set to
          0 to

          allocate no time allocated to real-time tasks.

          '
        format: int64
        type: integer
      CpuShares:
        description: 'An integer value representing this container''s relative CPU
          weight

          versus other containers.

          '
        type: integer
      CpusetCpus:
        description: 'CPUs in which to allow execution (e.g., `0-3`, `0,1`).

          '
        example: 0-3
        type: string
      CpusetMems:
        description: 'Memory nodes (MEMs) in which to allow execution (0-3, 0,1).
          Only

          effective on NUMA systems.

          '
        type: string
      DeviceCgroupRules:
        description: a list of cgroup rules to apply to the container
        items:
          example: c 13:* rwm
          type: string
        type: array
      DeviceRequests:
        description: 'A list of requests for devices to be sent to device drivers.

          '
        items:
          $ref: '#/definitions/DeviceRequest'
        type: array
      Devices:
        description: A list of devices to add to the container.
        items:
          $ref: '#/definitions/DeviceMapping'
        type: array
      IOMaximumBandwidth:
        description: 'Maximum IO in bytes per second for the container system drive

          (Windows only).

          '
        format: int64
        type: integer
      IOMaximumIOps:
        description: Maximum IOps for the container system drive (Windows only)
        format: int64
        type: integer
      Init:
        description: 'Run an init inside the container that forwards signals and reaps

          processes. This field is omitted if empty, and the default (as

          configured on the daemon) is used.

          '
        type: boolean
        x-nullable: true
      KernelMemory:
        description: 'Kernel memory limit in bytes.


          <p><br /></p>


          > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated

          > `kmem.limit_in_bytes`.

          '
        example: 209715200
        format: int64
        type: integer
      KernelMemoryTCP:
        description: Hard limit for kernel TCP buffer memory (in bytes).
        format: int64
        type: integer
      Memory:
        default: 0
        description: Memory limit in bytes.
        format: int64
        type: integer
      MemoryReservation:
        description: Memory soft limit in bytes.
        format: int64
        type: integer
      MemorySwap:
        description: 'Total memory limit (memory + swap). Set as `-1` to enable unlimited

          swap.

          '
        format: int64
        type: integer
      MemorySwappiness:
        description: 'Tune a container''s memory swappiness behavior. Accepts an integer

          between 0 and 100.

          '
        format: int64
        maximum: 100
        minimum: 0
        type: integer
      NanoCpus:
        description: CPU quota in units of 10<sup>-9</sup> CPUs.
        format: int64
        type: integer
      OomKillDisable:
        description: Disable OOM Killer for the container.
        type: boolean
      PidsLimit:
        description: 'Tune a container''s PIDs limit. Set `0` or `-1` for unlimited,
          or `null`

          to not change.

          '
        format: int64
        type: integer
        x-nullable: true
      Ulimits:
        description: 'A list of resource limits to set in the container. For example:


          ```

          {"Name": "nofile", "Soft": 1024, "Hard": 2048}

          ```

          '
        items:
          properties:
            Hard:
              description: Hard limit
              type: integer
            Name:
              description: Name of ulimit
              type: string
            Soft:
              description: Soft limit
              type: integer
          type: object
        type: array
    type: object
  RestartPolicy:
    description: 'The behavior to apply when the container exits. The default is not
      to

      restart.


      An ever increasing delay (double the previous delay, starting at 100ms) is

      added before each restart to prevent flooding the server.

      '
    properties:
      MaximumRetryCount:
        description: 'If `on-failure` is used, the number of times to retry before
          giving up.

          '
        type: integer
      Name:
        description: '- Empty string means not to restart

          - `no` Do not automatically restart

          - `always` Always restart

          - `unless-stopped` Restart always except when the user has manually stopped
          the container

          - `on-failure` Restart only when the container exit code is non-zero

          '
        enum:
        - ''
        - 'no'
        - always
        - unless-stopped
        - on-failure
        type: string
    type: object
  Runtime:
    description: 'Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)

      runtime.


      The runtime is invoked by the daemon via the `containerd` daemon. OCI

      runtimes act as an interface to the Linux kernel namespaces, cgroups,

      and SELinux.

      '
    properties:
      path:
        description: 'Name and, optional, path, of the OCI executable binary.


          If the path is omitted, the daemon searches the host''s `$PATH` for the

          binary and uses the first result.

          '
        example: /usr/local/bin/my-oci-runtime
        type: string
      runtimeArgs:
        description: 'List of command-line arguments to pass to the runtime when invoked.

          '
        example:
        - --debug
        - --systemd-cgroup=false
        items:
          type: string
        type: array
        x-nullable: true
    type: object
  Secret:
    properties:
      CreatedAt:
        example: '2017-07-20T13:55:28.678958722Z'
        format: dateTime
        type: string
      ID:
        example: blt1owaxmitz71s9v5zh81zun
        type: string
      Spec:
        $ref: '#/definitions/SecretSpec'
      UpdatedAt:
        example: '2017-07-20T13:55:28.678958722Z'
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
  SecretSpec:
    properties:
      Data:
        description: 'Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))

          data to store as secret.


          This field is only used to _create_ a secret, and is not returned by

          other endpoints.

          '
        example: ''
        type: string
      Driver:
        $ref: '#/definitions/Driver'
        description: 'Name of the secrets driver used to fetch the secret''s value
          from an

          external secret store.

          '
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        example:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        type: object
      Name:
        description: User-defined name of the secret.
        type: string
      Templating:
        $ref: '#/definitions/Driver'
        description: 'Templating driver, if applicable


          Templating controls whether and how to evaluate the config payload as

          a template. If no driver is set, no templating is used.

          '
    type: object
  Service:
    example:
      CreatedAt: '2016-06-07T21:05:51.880065305Z'
      Endpoint:
        Ports:
        - Protocol: tcp
          PublishedPort: 30001
          TargetPort: 6379
        Spec:
          Mode: vip
          Ports:
          - Protocol: tcp
            PublishedPort: 30001
            TargetPort: 6379
        VirtualIPs:
        - Addr: 10.255.0.2/16
          NetworkID: 4qvuz4ko70xaltuqbt8956gd1
        - Addr: 10.255.0.3/16
          NetworkID: 4qvuz4ko70xaltuqbt8956gd1
      ID: 9mnpnzenvg8p8tdbtq4wvbkcz
      Spec:
        EndpointSpec:
          Mode: vip
          Ports:
          - Protocol: tcp
            PublishedPort: 30001
            TargetPort: 6379
        Mode:
          Replicated:
            Replicas: 1
        Name: hopeful_cori
        RollbackConfig:
          Delay: 1000000000
          FailureAction: pause
          MaxFailureRatio: 0.15
          Monitor: 15000000000
          Parallelism: 1
        TaskTemplate:
          ContainerSpec:
            Image: redis
          ForceUpdate: 0
          Placement: {}
          Resources:
            Limits: {}
            Reservations: {}
          RestartPolicy:
            Condition: any
            MaxAttempts: 0
        UpdateConfig:
          Delay: 1000000000
          FailureAction: pause
          MaxFailureRatio: 0.15
          Monitor: 15000000000
          Parallelism: 1
      UpdatedAt: '2016-06-07T21:07:29.962229872Z'
      Version:
        Index: 19
    properties:
      CreatedAt:
        format: dateTime
        type: string
      Endpoint:
        properties:
          Ports:
            items:
              $ref: '#/definitions/EndpointPortConfig'
            type: array
          Spec:
            $ref: '#/definitions/EndpointSpec'
          VirtualIPs:
            items:
              properties:
                Addr:
                  type: string
                NetworkID:
                  type: string
              type: object
            type: array
        type: object
      ID:
        type: string
      JobStatus:
        description: 'The status of the service when it is in one of ReplicatedJob
          or

          GlobalJob modes. Absent on Replicated and Global mode services. The

          JobIteration is an ObjectVersion, but unlike the Service''s version,

          does not need to be sent with an update request.

          '
        properties:
          JobIteration:
            $ref: '#/definitions/ObjectVersion'
            description: 'JobIteration is a value increased each time a Job is executed,

              successfully or otherwise. "Executed", in this case, means the

              job as a whole has been started, not that an individual Task has

              been launched. A job is "Executed" when its ServiceSpec is

              updated. JobIteration can be used to disambiguate Tasks belonging

              to different executions of a job.  Though JobIteration will

              increase with each subsequent execution, it may not necessarily

              increase by 1, and so JobIteration should not be used to

              '
          LastExecution:
            description: 'The last time, as observed by the server, that this job
              was

              started.

              '
            format: dateTime
            type: string
        type: object
      ServiceStatus:
        description: 'The status of the service''s tasks. Provided only when requested
          as

          part of a ServiceList operation.

          '
        properties:
          CompletedTasks:
            description: 'The number of tasks for a job that are in the Completed
              state.

              This field must be cross-referenced with the service type, as the

              value of 0 may mean the service is not in a job mode, or it may

              mean the job-mode service has no tasks yet Completed.

              '
            format: uint64
            type: integer
          DesiredTasks:
            description: 'The number of tasks for the service desired to be running.

              For replicated services, this is the replica count from the

              service spec. For global services, this is computed by taking

              count of all tasks for the service with a Desired State other

              than Shutdown.

              '
            example: 10
            format: uint64
            type: integer
          RunningTasks:
            description: 'The number of tasks for the service currently in the Running
              state.

              '
            example: 7
            format: uint64
            type: integer
        type: object
      Spec:
        $ref: '#/definitions/ServiceSpec'
      UpdateStatus:
        description: The status of a service update.
        properties:
          CompletedAt:
            format: dateTime
            type: string
          Message:
            type: string
          StartedAt:
            format: dateTime
            type: string
          State:
            enum:
            - updating
            - paused
            - completed
            type: string
        type: object
      UpdatedAt:
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
  ServiceSpec:
    description: User modifiable configuration for a service.
    properties:
      EndpointSpec:
        $ref: '#/definitions/EndpointSpec'
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        type: object
      Mode:
        description: Scheduling mode for the service.
        properties:
          Global:
            type: object
          GlobalJob:
            description: 'The mode used for services which run a task to the completed
              state

              on each valid node.

              '
            type: object
          Replicated:
            properties:
              Replicas:
                format: int64
                type: integer
            type: object
          ReplicatedJob:
            description: 'The mode used for services with a finite number of tasks
              that run

              to a completed state.

              '
            properties:
              MaxConcurrent:
                default: 1
                description: 'The maximum number of replicas to run simultaneously.

                  '
                format: int64
                type: integer
              TotalCompletions:
                description: 'The total number of replicas desired to reach the Completed

                  state. If unset, will default to the value of `MaxConcurrent`

                  '
                format: int64
                type: integer
            type: object
        type: object
      Name:
        description: Name of the service.
        type: string
      Networks:
        description: Specifies which networks the service should attach to.
        items:
          $ref: '#/definitions/NetworkAttachmentConfig'
        type: array
      RollbackConfig:
        description: Specification for the rollback strategy of the service.
        properties:
          Delay:
            description: 'Amount of time between rollback iterations, in nanoseconds.

              '
            format: int64
            type: integer
          FailureAction:
            description: 'Action to take if an rolled back task fails to run, or stops

              running during the rollback.

              '
            enum:
            - continue
            - pause
            type: string
          MaxFailureRatio:
            default: 0
            description: 'The fraction of tasks that may fail during a rollback before
              the

              failure action is invoked, specified as a floating point number

              between 0 and 1.

              '
            type: number
          Monitor:
            description: 'Amount of time to monitor each rolled back task for failures,
              in

              nanoseconds.

              '
            format: int64
            type: integer
          Order:
            description: 'The order of operations when rolling back a task. Either
              the old

              task is shut down before the new task is started, or the new task

              is started before the old task is shut down.

              '
            enum:
            - stop-first
            - start-first
            type: string
          Parallelism:
            description: 'Maximum number of tasks to be rolled back in one iteration
              (0 means

              unlimited parallelism).

              '
            format: int64
            type: integer
        type: object
      TaskTemplate:
        $ref: '#/definitions/TaskSpec'
      UpdateConfig:
        description: Specification for the update strategy of the service.
        properties:
          Delay:
            description: Amount of time between updates, in nanoseconds.
            format: int64
            type: integer
          FailureAction:
            description: 'Action to take if an updated task fails to run, or stops
              running

              during the update.

              '
            enum:
            - continue
            - pause
            - rollback
            type: string
          MaxFailureRatio:
            default: 0
            description: 'The fraction of tasks that may fail during an update before
              the

              failure action is invoked, specified as a floating point number

              between 0 and 1.

              '
            type: number
          Monitor:
            description: 'Amount of time to monitor each updated task for failures,
              in

              nanoseconds.

              '
            format: int64
            type: integer
          Order:
            description: 'The order of operations when rolling out an updated task.
              Either

              the old task is shut down before the new task is started, or the

              new task is started before the old task is shut down.

              '
            enum:
            - stop-first
            - start-first
            type: string
          Parallelism:
            description: 'Maximum number of tasks to be updated in one iteration (0
              means

              unlimited parallelism).

              '
            format: int64
            type: integer
        type: object
    type: object
  ServiceUpdateResponse:
    example:
      Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest
        not found'
    properties:
      Warnings:
        description: Optional warning messages
        items:
          type: string
        type: array
    type: object
  Swarm:
    allOf:
    - $ref: '#/definitions/ClusterInfo'
    - properties:
        JoinTokens:
          $ref: '#/definitions/JoinTokens'
      type: object
    type: object
  SwarmInfo:
    description: 'Represents generic information about swarm.

      '
    properties:
      Cluster:
        $ref: '#/definitions/ClusterInfo'
      ControlAvailable:
        default: false
        example: true
        type: boolean
      Error:
        default: ''
        type: string
      LocalNodeState:
        $ref: '#/definitions/LocalNodeState'
      Managers:
        description: Total number of managers in the swarm.
        example: 3
        type: integer
        x-nullable: true
      NodeAddr:
        default: ''
        description: 'IP address at which this node can be reached by other nodes
          in the

          swarm.

          '
        example: 10.0.0.46
        type: string
      NodeID:
        default: ''
        description: Unique identifier of for this node in the swarm.
        example: k67qz4598weg5unwwffg6z1m1
        type: string
      Nodes:
        description: Total number of nodes in the swarm.
        example: 4
        type: integer
        x-nullable: true
      RemoteManagers:
        default: null
        description: 'List of ID''s and addresses of other managers in the swarm.

          '
        example:
        - Addr: 10.0.0.158:2377
          NodeID: 71izy0goik036k48jg985xnds
        - Addr: 10.0.0.159:2377
          NodeID: 79y6h1o4gv8n120drcprv5nmc
        - Addr: 10.0.0.46:2377
          NodeID: k67qz4598weg5unwwffg6z1m1
        items:
          $ref: '#/definitions/PeerNode'
        type: array
        x-nullable: true
    type: object
  SwarmSpec:
    description: User modifiable swarm configuration.
    properties:
      CAConfig:
        description: CA configuration.
        properties:
          ExternalCAs:
            description: 'Configuration for forwarding signing requests to an external

              certificate authority.

              '
            items:
              properties:
                CACert:
                  description: 'The root CA certificate (in PEM format) this external
                    CA uses

                    to issue TLS certificates (assumed to be to the current swarm

                    root CA certificate if not provided).

                    '
                  type: string
                Options:
                  additionalProperties:
                    type: string
                  description: 'An object with key/value pairs that are interpreted
                    as

                    protocol-specific options for the external CA driver.

                    '
                  type: object
                Protocol:
                  default: cfssl
                  description: 'Protocol for communication with the external CA (currently

                    only `cfssl` is supported).

                    '
                  enum:
                  - cfssl
                  type: string
                URL:
                  description: 'URL where certificate signing requests should be sent.

                    '
                  type: string
              type: object
            type: array
          ForceRotate:
            description: 'An integer whose purpose is to force swarm to generate a
              new

              signing CA certificate and key, if none have been specified in

              `SigningCACert` and `SigningCAKey`

              '
            format: uint64
            type: integer
          NodeCertExpiry:
            description: The duration node certificates are issued for.
            example: 7776000000000000
            format: int64
            type: integer
          SigningCACert:
            description: 'The desired signing CA certificate for all swarm node TLS
              leaf

              certificates, in PEM format.

              '
            type: string
          SigningCAKey:
            description: 'The desired signing CA key for all swarm node TLS leaf certificates,

              in PEM format.

              '
            type: string
        type: object
        x-nullable: true
      Dispatcher:
        description: Dispatcher configuration.
        properties:
          HeartbeatPeriod:
            description: 'The delay for an agent to send a heartbeat to the dispatcher.

              '
            example: 5000000000
            format: int64
            type: integer
        type: object
        x-nullable: true
      EncryptionConfig:
        description: Parameters related to encryption-at-rest.
        properties:
          AutoLockManagers:
            description: 'If set, generate a key and use it to lock data stored on
              the

              managers.

              '
            example: false
            type: boolean
        type: object
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        example:
          com.example.corp.department: engineering
          com.example.corp.type: production
        type: object
      Name:
        description: Name of the swarm.
        example: default
        type: string
      Orchestration:
        description: Orchestration configuration.
        properties:
          TaskHistoryRetentionLimit:
            description: 'The number of historic tasks to keep per instance or node.
              If

              negative, never remove completed or failed tasks.

              '
            example: 10
            format: int64
            type: integer
        type: object
        x-nullable: true
      Raft:
        description: Raft configuration.
        properties:
          ElectionTick:
            description: 'The number of ticks that a follower will wait for a message
              from

              the leader before becoming a candidate and starting an election.

              `ElectionTick` must be greater than `HeartbeatTick`.


              A tick currently defaults to one second, so these translate

              directly to seconds currently, but this is NOT guaranteed.

              '
            example: 3
            type: integer
          HeartbeatTick:
            description: 'The number of ticks between heartbeats. Every HeartbeatTick
              ticks,

              the leader will send a heartbeat to the followers.


              A tick currently defaults to one second, so these translate

              directly to seconds currently, but this is NOT guaranteed.

              '
            example: 1
            type: integer
          KeepOldSnapshots:
            description: 'The number of snapshots to keep beyond the current snapshot.

              '
            format: uint64
            type: integer
          LogEntriesForSlowFollowers:
            description: 'The number of log entries to keep around to sync up slow
              followers

              after a snapshot is created.

              '
            example: 500
            format: uint64
            type: integer
          SnapshotInterval:
            description: The number of log entries between snapshots.
            example: 10000
            format: uint64
            type: integer
        type: object
      TaskDefaults:
        description: Defaults for creating tasks in this cluster.
        properties:
          LogDriver:
            description: 'The log driver to use for tasks created in the orchestrator
              if

              unspecified by a service.


              Updating this value only affects new tasks. Existing tasks continue

              to use their previously configured log driver until recreated.

              '
            properties:
              Name:
                description: 'The log driver to use as a default for new tasks.

                  '
                example: json-file
                type: string
              Options:
                additionalProperties:
                  type: string
                description: 'Driver-specific options for the selectd log driver,
                  specified

                  as key/value pairs.

                  '
                example:
                  max-file: '10'
                  max-size: 100m
                type: object
            type: object
        type: object
    type: object
  SystemInfo:
    properties:
      Architecture:
        description: 'Hardware architecture of the host, as returned by the Go runtime

          (`GOARCH`).


          A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).

          '
        example: x86_64
        type: string
      BridgeNfIp6tables:
        description: Indicates if `bridge-nf-call-ip6tables` is available on the host.
        example: true
        type: boolean
      BridgeNfIptables:
        description: Indicates if `bridge-nf-call-iptables` is available on the host.
        example: true
        type: boolean
      CPUSet:
        description: 'Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported
          by the host.


          See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)

          '
        example: true
        type: boolean
      CPUShares:
        description: 'Indicates if CPU Shares limiting is supported by the host.

          '
        example: true
        type: boolean
      CgroupDriver:
        default: cgroupfs
        description: 'The driver to use for managing cgroups.

          '
        enum:
        - cgroupfs
        - systemd
        - none
        example: cgroupfs
        type: string
      CgroupVersion:
        default: '1'
        description: 'The version of the cgroup.

          '
        enum:
        - '1'
        - '2'
        example: '1'
        type: string
      ClusterAdvertise:
        description: 'The network endpoint that the Engine advertises for the purpose
          of

          node discovery. ClusterAdvertise is a `host:port` combination on which

          the daemon is reachable by other hosts.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when using standalone Swarm

          > mode, and overlay networking using an external k/v store. Overlay

          > networks with Swarm mode enabled use the built-in raft store, and

          > this field will be empty.

          '
        example: node5.corp.example.com:8000
        type: string
      ClusterStore:
        description: 'URL of the distributed storage backend.



          The storage backend is used for multihost networking (to store

          network and endpoint information) and by the node discovery mechanism.


          <p><br /></p>


          > **Deprecated**: This field is only propagated when using standalone Swarm

          > mode, and overlay networking using an external k/v store. Overlay

          > networks with Swarm mode enabled use the built-in raft store, and

          > this field will be empty.

          '
        example: consul://consul.corp.example.com:8600/some/path
        type: string
      ContainerdCommit:
        $ref: '#/definitions/Commit'
      Containers:
        description: Total number of containers on the host.
        example: 14
        type: integer
      ContainersPaused:
        description: 'Number of containers with status `"paused"`.

          '
        example: 1
        type: integer
      ContainersRunning:
        description: 'Number of containers with status `"running"`.

          '
        example: 3
        type: integer
      ContainersStopped:
        description: 'Number of containers with status `"stopped"`.

          '
        example: 10
        type: integer
      CpuCfsPeriod:
        description: 'Indicates if CPU CFS(Completely Fair Scheduler) period is supported
          by

          the host.

          '
        example: true
        type: boolean
      CpuCfsQuota:
        description: 'Indicates if CPU CFS(Completely Fair Scheduler) quota is supported
          by

          the host.

          '
        example: true
        type: boolean
      Debug:
        description: 'Indicates if the daemon is running in debug-mode / with debug-level

          logging enabled.

          '
        example: true
        type: boolean
      DefaultAddressPools:
        description: 'List of custom default address pools for local networks, which
          can be

          specified in the daemon.json file or dockerd option.


          Example: a Base "10.10.0.0/16" with Size 24 will define the set of 256

          10.10.[0-255].0/24 address pools.

          '
        items:
          properties:
            Base:
              description: The network address in CIDR format
              example: 10.10.0.0/16
              type: string
            Size:
              description: The network pool size
              example: '24'
              type: integer
          type: object
        type: array
      DefaultRuntime:
        default: runc
        description: 'Name of the default OCI runtime that is used when starting containers.


          The default can be overridden per-container at create time.

          '
        example: runc
        type: string
      DockerRootDir:
        description: 'Root directory of persistent Docker state.


          Defaults to `/var/lib/docker` on Linux, and `C:\ProgramData\docker`

          on Windows.

          '
        example: /var/lib/docker
        type: string
      Driver:
        description: Name of the storage driver in use.
        example: overlay2
        type: string
      DriverStatus:
        description: 'Information specific to the storage driver, provided as

          "label" / "value" pairs.


          This information is provided by the storage driver, and formatted

          in a way consistent with the output of `docker info` on the command

          line.


          <p><br /></p>


          > **Note**: The information returned in this field, including the

          > formatting of values and labels, should not be considered stable,

          > and may change without notice.

          '
        example:
        - - Backing Filesystem
          - extfs
        - - Supports d_type
          - 'true'
        - - Native Overlay Diff
          - 'true'
        items:
          items:
            type: string
          type: array
        type: array
      ExperimentalBuild:
        description: 'Indicates if experimental features are enabled on the daemon.

          '
        example: true
        type: boolean
      GenericResources:
        $ref: '#/definitions/GenericResources'
      HttpProxy:
        description: 'HTTP-proxy configured for the daemon. This value is obtained
          from the

          [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
          environment variable.

          Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1))
          in the proxy URL

          are masked in the API response.


          Containers do not automatically inherit this configuration.

          '
        example: http://xxxxx:xxxxx@proxy.corp.example.com:8080
        type: string
      HttpsProxy:
        description: 'HTTPS-proxy configured for the daemon. This value is obtained
          from the

          [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)
          environment variable.

          Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1))
          in the proxy URL

          are masked in the API response.


          Containers do not automatically inherit this configuration.

          '
        example: https://xxxxx:xxxxx@proxy.corp.example.com:4443
        type: string
      ID:
        description: 'Unique identifier of the daemon.


          <p><br /></p>


          > **Note**: The format of the ID itself is not part of the API, and

          > should not be considered stable.

          '
        example: 7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS
        type: string
      IPv4Forwarding:
        description: Indicates IPv4 forwarding is enabled.
        example: true
        type: boolean
      Images:
        description: 'Total number of images on the host.


          Both _tagged_ and _untagged_ (dangling) images are counted.

          '
        example: 508
        type: integer
      IndexServerAddress:
        default: https://index.docker.io/v1/
        description: 'Address / URL of the index server that is used for image search,

          and as a default for user authentication for Docker Hub and Docker Cloud.

          '
        example: https://index.docker.io/v1/
        type: string
      InitBinary:
        description: 'Name and, optional, path of the `docker-init` binary.


          If the path is omitted, the daemon searches the host''s `$PATH` for the

          binary and uses the first result.

          '
        example: docker-init
        type: string
      InitCommit:
        $ref: '#/definitions/Commit'
      Isolation:
        default: default
        description: 'Represents the isolation technology to use as a default for
          containers.

          The supported values are platform-specific.


          If no isolation value is specified on daemon start, on Windows client,

          the default is `hyperv`, and on Windows server, the default is `process`.


          This option is currently not used on other platforms.

          '
        enum:
        - default
        - hyperv
        - process
        type: string
      KernelMemory:
        description: 'Indicates if the host has kernel memory limit support enabled.


          <p><br /></p>


          > **Deprecated**: This field is deprecated as the kernel 5.4 deprecated

          > `kmem.limit_in_bytes`.

          '
        example: true
        type: boolean
      KernelMemoryTCP:
        description: 'Indicates if the host has kernel memory TCP limit support enabled.


          Kernel memory TCP limits are not supported when using cgroups v2, which

          does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.

          '
        example: true
        type: boolean
      KernelVersion:
        description: 'Kernel version of the host.


          On Linux, this information obtained from `uname`. On Windows this

          information is queried from the <kbd>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows
          NT\\CurrentVersion\\</kbd>

          registry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.

          '
        example: 4.9.38-moby
        type: string
      Labels:
        description: 'User-defined labels (key/value metadata) as set on the daemon.


          <p><br /></p>


          > **Note**: When part of a Swarm, nodes can both have _daemon_ labels,

          > set through the daemon configuration, and _node_ labels, set from a

          > manager node in the Swarm. Node labels are not included in this

          > field. Node labels can be retrieved using the `/nodes/(id)` endpoint

          > on a manager node in the Swarm.

          '
        example:
        - storage=ssd
        - production
        items:
          type: string
        type: array
      LiveRestoreEnabled:
        default: false
        description: 'Indicates if live restore is enabled.


          If enabled, containers are kept running when the daemon is shutdown

          or upon daemon start if running containers are detected.

          '
        example: false
        type: boolean
      LoggingDriver:
        description: 'The logging driver to use as a default for new containers.

          '
        type: string
      MemTotal:
        description: 'Total amount of physical memory available on the host, in bytes.

          '
        example: 2095882240
        format: int64
        type: integer
      MemoryLimit:
        description: Indicates if the host has memory limit support enabled.
        example: true
        type: boolean
      NCPU:
        description: 'The number of logical CPUs usable by the daemon.


          The number of available CPUs is checked by querying the operating

          system when the daemon starts. Changes to operating system CPU

          allocation after the daemon is started are not reflected.

          '
        example: 4
        type: integer
      NEventsListener:
        description: Number of event listeners subscribed.
        example: 30
        type: integer
      NFd:
        description: 'The total number of file Descriptors in use by the daemon process.


          This information is only returned if debug-mode is enabled.

          '
        example: 64
        type: integer
      NGoroutines:
        description: 'The  number of goroutines that currently exist.


          This information is only returned if debug-mode is enabled.

          '
        example: 174
        type: integer
      Name:
        description: Hostname of the host.
        example: node5.corp.example.com
        type: string
      NoProxy:
        description: 'Comma-separated list of domain extensions for which no proxy
          should be

          used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)

          environment variable.


          Containers do not automatically inherit this configuration.

          '
        example: '*.local, 169.254/16'
        type: string
      OSType:
        description: 'Generic type of the operating system of the host, as returned
          by the

          Go runtime (`GOOS`).


          Currently returned values are "linux" and "windows". A full list of

          possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).

          '
        example: linux
        type: string
      OSVersion:
        description: 'Version of the host''s operating system


          <p><br /></p>


          > **Note**: The information returned in this field, including its

          > very existence, and the formatting of values, should not be considered

          > stable, and may change without notice.

          '
        example: '16.04'
        type: string
      OomKillDisable:
        description: Indicates if OOM killer disable is supported on the host.
        type: boolean
      OperatingSystem:
        description: 'Name of the host''s operating system, for example: "Ubuntu 16.04.2
          LTS"

          or "Windows Server 2016 Datacenter"

          '
        example: Alpine Linux v3.5
        type: string
      PidsLimit:
        description: Indicates if the host kernel has PID limit support enabled.
        example: true
        type: boolean
      Plugins:
        $ref: '#/definitions/PluginsInfo'
      ProductLicense:
        description: 'Reports a summary of the product license on the daemon.


          If a commercial license has been applied to the daemon, information

          such as number of nodes, and expiration are included.

          '
        example: Community Engine
        type: string
      RegistryConfig:
        $ref: '#/definitions/RegistryServiceConfig'
      RuncCommit:
        $ref: '#/definitions/Commit'
      Runtimes:
        additionalProperties:
          $ref: '#/definitions/Runtime'
        default:
          runc:
            path: runc
        description: 'List of [OCI compliant](https://github.com/opencontainers/runtime-spec)

          runtimes configured on the daemon. Keys hold the "name" used to

          reference the runtime.


          The Docker daemon relies on an OCI compliant runtime (invoked via the

          `containerd` daemon) as its interface to the Linux kernel namespaces,

          cgroups, and SELinux.


          The default runtime is `runc`, and automatically configured. Additional

          runtimes can be configured by the user and will be listed here.

          '
        example:
          custom:
            path: /usr/local/bin/my-oci-runtime
            runtimeArgs:
            - --debug
            - --systemd-cgroup=false
          runc:
            path: runc
          runc-master:
            path: /go/bin/runc
        type: object
      SecurityOptions:
        description: 'List of security features that are enabled on the daemon, such
          as

          apparmor, seccomp, SELinux, user-namespaces (userns), and rootless.


          Additional configuration options for each security feature may

          be present, and are included as a comma-separated list of key/value

          pairs.

          '
        example:
        - name=apparmor
        - name=seccomp,profile=default
        - name=selinux
        - name=userns
        - name=rootless
        items:
          type: string
        type: array
      ServerVersion:
        description: 'Version string of the daemon.


          > **Note**: the [standalone Swarm API](/swarm/swarm-api/)

          > returns the Swarm version instead of the daemon  version, for example

          > `swarm/1.2.8`.

          '
        example: 17.06.0-ce
        type: string
      SwapLimit:
        description: Indicates if the host has memory swap limit support enabled.
        example: true
        type: boolean
      Swarm:
        $ref: '#/definitions/SwarmInfo'
      SystemTime:
        description: 'Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)

          format with nano-seconds.

          '
        example: '2017-08-08T20:28:29.06202363Z'
        type: string
      Warnings:
        description: 'List of warnings / informational messages about missing features,
          or

          issues related to the daemon configuration.


          These messages can be printed by the client as information to the user.

          '
        example:
        - 'WARNING: No memory limit support'
        - 'WARNING: bridge-nf-call-iptables is disabled'
        - 'WARNING: bridge-nf-call-ip6tables is disabled'
        items:
          type: string
        type: array
    type: object
  SystemVersion:
    description: 'Response of Engine API: GET "/version"

      '
    properties:
      ApiVersion:
        description: 'The default (and highest) API version that is supported by the
          daemon

          '
        example: '1.40'
        type: string
      Arch:
        description: 'The architecture that the daemon is running on

          '
        example: amd64
        type: string
      BuildTime:
        description: 'The date and time that the daemon was compiled.

          '
        example: '2020-06-22T15:49:27.000000000+00:00'
        type: string
      Components:
        description: 'Information about system components

          '
        items:
          properties:
            Details:
              description: 'Key/value pairs of strings with additional information
                about the

                component. These values are intended for informational purposes

                only, and their content is not defined, and not part of the API

                specification.


                These messages can be printed by the client as information to the
                user.

                '
              type: object
              x-nullable: true
            Name:
              description: 'Name of the component

                '
              example: Engine
              type: string
            Version:
              description: 'Version of the component

                '
              example: 19.03.12
              type: string
              x-nullable: false
          required:
          - Name
          - Version
          type: object
          x-go-name: ComponentVersion
        type: array
      Experimental:
        description: 'Indicates if the daemon is started with experimental features
          enabled.


          This field is omitted when empty / false.

          '
        example: true
        type: boolean
      GitCommit:
        description: 'The Git commit of the source code that was used to build the
          daemon

          '
        example: 48a66213fe
        type: string
      GoVersion:
        description: 'The version Go used to compile the daemon, and the version of
          the Go

          runtime in use.

          '
        example: go1.13.14
        type: string
      KernelVersion:
        description: 'The kernel version (`uname -r`) that the daemon is running on.


          This field is omitted when empty.

          '
        example: 4.19.76-linuxkit
        type: string
      MinAPIVersion:
        description: 'The minimum API version that is supported by the daemon

          '
        example: '1.12'
        type: string
      Os:
        description: 'The operating system that the daemon is running on ("linux"
          or "windows")

          '
        example: linux
        type: string
      Platform:
        properties:
          Name:
            type: string
        required:
        - Name
        type: object
      Version:
        description: The version of the daemon
        example: 19.03.12
        type: string
    type: object
  TLSInfo:
    description: 'Information about the issuer of leaf TLS certificates and the trusted
      root

      CA certificate.

      '
    example:
      CertIssuerPublicKey: MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEmT9XIw9h1qoNclv9VeHmf/Vi6/uI2vFXdBveXTpcPjqx6i9wNazchk1XWV/dKTKvSh9xyGKmiIeRcE4OiMnJ1A==
      CertIssuerSubject: MBMxETAPBgNVBAMTCHN3YXJtLWNh
      TrustRoot: '-----BEGIN CERTIFICATE-----

        MIIBajCCARCgAwIBAgIUbYqrLSOSQHoxD8CwG6Bi2PJi9c8wCgYIKoZIzj0EAwIw

        EzERMA8GA1UEAxMIc3dhcm0tY2EwHhcNMTcwNDI0MjE0MzAwWhcNMzcwNDE5MjE0

        MzAwWjATMREwDwYDVQQDEwhzd2FybS1jYTBZMBMGByqGSM49AgEGCCqGSM49AwEH

        A0IABJk/VyMPYdaqDXJb/VXh5n/1Yuv7iNrxV3Qb3l06XD46seovcDWs3IZNV1lf

        3Skyr0ofcchipoiHkXBODojJydSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMB

        Af8EBTADAQH/MB0GA1UdDgQWBBRUXxuRcnFjDfR/RIAUQab8ZV/n4jAKBggqhkjO

        PQQDAgNIADBFAiAy+JTe6Uc3KyLCMiqGl2GyWGQqQDEcO3/YG36x7om65AIhAJvz

        pxv6zFeVEkAEEkqIYi0omA9+CjanB/6Bz4n1uw8H

        -----END CERTIFICATE-----

        '
    properties:
      CertIssuerPublicKey:
        description: 'The base64-url-safe-encoded raw public key bytes of the issuer.

          '
        type: string
      CertIssuerSubject:
        description: The base64-url-safe-encoded raw subject bytes of the issuer.
        type: string
      TrustRoot:
        description: 'The root CA certificate(s) that are used to validate leaf TLS

          certificates.

          '
        type: string
    type: object
  Task:
    example:
      AssignedGenericResources:
      - DiscreteResourceSpec:
          Kind: SSD
          Value: 3
      - NamedResourceSpec:
          Kind: GPU
          Value: UUID1
      - NamedResourceSpec:
          Kind: GPU
          Value: UUID2
      CreatedAt: '2016-06-07T21:07:31.171892745Z'
      DesiredState: running
      ID: 0kzzo1i0y4jz6027t0k7aezc7
      NetworksAttachments:
      - Addresses:
        - 10.255.0.10/16
        Network:
          CreatedAt: '2016-06-07T20:31:11.912919752Z'
          DriverState:
            Name: overlay
            Options:
              com.docker.network.driver.overlay.vxlanid_list: '256'
          ID: 4qvuz4ko70xaltuqbt8956gd1
          IPAMOptions:
            Configs:
            - Gateway: 10.255.0.1
              Subnet: 10.255.0.0/16
            Driver:
              Name: default
          Spec:
            DriverConfiguration: {}
            IPAMOptions:
              Configs:
              - Gateway: 10.255.0.1
                Subnet: 10.255.0.0/16
              Driver: {}
            Labels:
              com.docker.swarm.internal: 'true'
            Name: ingress
          UpdatedAt: '2016-06-07T21:07:29.955277358Z'
          Version:
            Index: 18
      NodeID: 60gvrl6tm78dmak4yl7srz94v
      ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
      Slot: 1
      Spec:
        ContainerSpec:
          Image: redis
        Placement: {}
        Resources:
          Limits: {}
          Reservations: {}
        RestartPolicy:
          Condition: any
          MaxAttempts: 0
      Status:
        ContainerStatus:
          ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
          PID: 677
        Message: started
        State: running
        Timestamp: '2016-06-07T21:07:31.290032978Z'
      UpdatedAt: '2016-06-07T21:07:31.376370513Z'
      Version:
        Index: 71
    properties:
      AssignedGenericResources:
        $ref: '#/definitions/GenericResources'
      CreatedAt:
        format: dateTime
        type: string
      DesiredState:
        $ref: '#/definitions/TaskState'
      ID:
        description: The ID of the task.
        type: string
      JobIteration:
        $ref: '#/definitions/ObjectVersion'
        description: 'If the Service this Task belongs to is a job-mode service, contains

          the JobIteration of the Service this Task was created for. Absent if

          the Task was created for a Replicated or Global Service.

          '
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        type: object
      Name:
        description: Name of the task.
        type: string
      NodeID:
        description: The ID of the node that this task is on.
        type: string
      ServiceID:
        description: The ID of the service this task is part of.
        type: string
      Slot:
        type: integer
      Spec:
        $ref: '#/definitions/TaskSpec'
      Status:
        properties:
          ContainerStatus:
            properties:
              ContainerID:
                type: string
              ExitCode:
                type: integer
              PID:
                type: integer
            type: object
          Err:
            type: string
          Message:
            type: string
          State:
            $ref: '#/definitions/TaskState'
          Timestamp:
            format: dateTime
            type: string
        type: object
      UpdatedAt:
        format: dateTime
        type: string
      Version:
        $ref: '#/definitions/ObjectVersion'
    type: object
  TaskSpec:
    description: User modifiable task configuration.
    properties:
      ContainerSpec:
        description: 'Container spec for the service.


          <p><br /></p>


          > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are

          > mutually exclusive. PluginSpec is only used when the Runtime field

          > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime

          > field is set to `attachment`.

          '
        properties:
          Args:
            description: Arguments to the command.
            items:
              type: string
            type: array
          CapabilityAdd:
            description: 'A list of kernel capabilities to add to the default set

              for the container.

              '
            example:
            - CAP_NET_RAW
            - CAP_SYS_ADMIN
            - CAP_SYS_CHROOT
            - CAP_SYSLOG
            items:
              type: string
            type: array
          CapabilityDrop:
            description: 'A list of kernel capabilities to drop from the default set

              for the container.

              '
            example:
            - CAP_NET_RAW
            items:
              type: string
            type: array
          Command:
            description: The command to be run in the image.
            items:
              type: string
            type: array
          Configs:
            description: 'Configs contains references to zero or more configs that
              will be

              exposed to the service.

              '
            items:
              properties:
                ConfigID:
                  description: 'ConfigID represents the ID of the specific config
                    that we''re

                    referencing.

                    '
                  type: string
                ConfigName:
                  description: 'ConfigName is the name of the config that this references,

                    but this is just provided for lookup/display purposes. The

                    config in the reference will be identified by its ID.

                    '
                  type: string
                File:
                  description: 'File represents a specific target that is backed by
                    a file.


                    <p><br /><p>


                    > **Note**: `Configs.File` and `Configs.Runtime` are mutually
                    exclusive

                    '
                  properties:
                    GID:
                      description: GID represents the file GID.
                      type: string
                    Mode:
                      description: Mode represents the FileMode of the file.
                      format: uint32
                      type: integer
                    Name:
                      description: 'Name represents the final filename in the filesystem.

                        '
                      type: string
                    UID:
                      description: UID represents the file UID.
                      type: string
                  type: object
                Runtime:
                  description: 'Runtime represents a target that is not mounted into
                    the

                    container but is used by the task


                    <p><br /><p>


                    > **Note**: `Configs.File` and `Configs.Runtime` are mutually

                    > exclusive

                    '
                  type: object
              type: object
            type: array
          DNSConfig:
            description: 'Specification for DNS related configurations in resolver
              configuration

              file (`resolv.conf`).

              '
            properties:
              Nameservers:
                description: The IP addresses of the name servers.
                items:
                  type: string
                type: array
              Options:
                description: 'A list of internal resolver variables to be modified
                  (e.g.,

                  `debug`, `ndots:3`, etc.).

                  '
                items:
                  type: string
                type: array
              Search:
                description: A search list for host-name lookup.
                items:
                  type: string
                type: array
            type: object
          Dir:
            description: The working directory for commands to run in.
            type: string
          Env:
            description: 'A list of environment variables in the form `VAR=value`.

              '
            items:
              type: string
            type: array
          Groups:
            description: 'A list of additional groups that the container process will
              run as.

              '
            items:
              type: string
            type: array
          HealthCheck:
            $ref: '#/definitions/HealthConfig'
          Hostname:
            description: 'The hostname to use for the container, as a valid

              [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.

              '
            type: string
          Hosts:
            description: "A list of hostname/IP mappings to add to the container's\
              \ `hosts`\nfile. The format of extra hosts is specified in the\n[hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)\n\
              man page:\n\n    IP_address canonical_hostname [aliases...]\n"
            items:
              type: string
            type: array
          Image:
            description: The image name to use for the container
            type: string
          Init:
            description: 'Run an init inside the container that forwards signals and
              reaps

              processes. This field is omitted if empty, and the default (as

              configured on the daemon) is used.

              '
            type: boolean
            x-nullable: true
          Isolation:
            description: 'Isolation technology of the containers running the service.

              (Windows only)

              '
            enum:
            - default
            - process
            - hyperv
            type: string
          Labels:
            additionalProperties:
              type: string
            description: User-defined key/value data.
            type: object
          Mounts:
            description: 'Specification for mounts to be added to containers created
              as part

              of the service.

              '
            items:
              $ref: '#/definitions/Mount'
            type: array
          OpenStdin:
            description: Open `stdin`
            type: boolean
          Privileges:
            description: Security options for the container
            properties:
              CredentialSpec:
                description: CredentialSpec for managed service account (Windows only)
                properties:
                  Config:
                    description: 'Load credential spec from a Swarm Config with the
                      given ID.

                      The specified config must also be present in the Configs

                      field with the Runtime property set.


                      <p><br /></p>



                      > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,

                      > and `CredentialSpec.Config` are mutually exclusive.

                      '
                    example: 0bt9dmxjvjiqermk6xrop3ekq
                    type: string
                  File:
                    description: 'Load credential spec from this file. The file is
                      read by

                      the daemon, and must be present in the `CredentialSpecs`

                      subdirectory in the docker data directory, which defaults

                      to `C:\ProgramData\Docker\` on Windows.


                      For example, specifying `spec.json` loads

                      `C:\ProgramData\Docker\CredentialSpecs\spec.json`.


                      <p><br /></p>


                      > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,

                      > and `CredentialSpec.Config` are mutually exclusive.

                      '
                    example: spec.json
                    type: string
                  Registry:
                    description: 'Load credential spec from this value in the Windows

                      registry. The specified registry value must be located in:


                      `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Virtualization\Containers\CredentialSpecs`


                      <p><br /></p>



                      > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,

                      > and `CredentialSpec.Config` are mutually exclusive.

                      '
                    type: string
                type: object
              SELinuxContext:
                description: SELinux labels of the container
                properties:
                  Disable:
                    description: Disable SELinux
                    type: boolean
                  Level:
                    description: SELinux level label
                    type: string
                  Role:
                    description: SELinux role label
                    type: string
                  Type:
                    description: SELinux type label
                    type: string
                  User:
                    description: SELinux user label
                    type: string
                type: object
            type: object
          ReadOnly:
            description: Mount the container's root filesystem as read only.
            type: boolean
          Secrets:
            description: 'Secrets contains references to zero or more secrets that
              will be

              exposed to the service.

              '
            items:
              properties:
                File:
                  description: 'File represents a specific target that is backed by
                    a file.

                    '
                  properties:
                    GID:
                      description: GID represents the file GID.
                      type: string
                    Mode:
                      description: Mode represents the FileMode of the file.
                      format: uint32
                      type: integer
                    Name:
                      description: 'Name represents the final filename in the filesystem.

                        '
                      type: string
                    UID:
                      description: UID represents the file UID.
                      type: string
                  type: object
                SecretID:
                  description: 'SecretID represents the ID of the specific secret
                    that we''re

                    referencing.

                    '
                  type: string
                SecretName:
                  description: 'SecretName is the name of the secret that this references,

                    but this is just provided for lookup/display purposes. The

                    secret in the reference will be identified by its ID.

                    '
                  type: string
              type: object
            type: array
          StopGracePeriod:
            description: 'Amount of time to wait for the container to terminate before

              forcefully killing it.

              '
            format: int64
            type: integer
          StopSignal:
            description: Signal to stop the container.
            type: string
          Sysctls:
            additionalProperties:
              type: string
            description: 'Set kernel namedspaced parameters (sysctls) in the container.

              The Sysctls option on services accepts the same sysctls as the

              are supported on containers. Note that while the same sysctls are

              supported, no guarantees or checks are made about their

              suitability for a clustered environment, and it''s up to the user

              to determine whether a given sysctl will work properly in a

              Service.

              '
            type: object
          TTY:
            description: Whether a pseudo-TTY should be allocated.
            type: boolean
          Ulimits:
            description: 'A list of resource limits to set in the container. For example:
              `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"

              '
            items:
              properties:
                Hard:
                  description: Hard limit
                  type: integer
                Name:
                  description: Name of ulimit
                  type: string
                Soft:
                  description: Soft limit
                  type: integer
              type: object
            type: array
          User:
            description: The user inside the container.
            type: string
        type: object
      ForceUpdate:
        description: 'A counter that triggers an update even if no relevant parameters
          have

          been changed.

          '
        type: integer
      LogDriver:
        description: 'Specifies the log driver to use for tasks created from this
          spec. If

          not present, the default one for the swarm will be used, finally

          falling back to the engine default if not specified.

          '
        properties:
          Name:
            type: string
          Options:
            additionalProperties:
              type: string
            type: object
        type: object
      NetworkAttachmentSpec:
        description: 'Read-only spec type for non-swarm containers attached to swarm
          overlay

          networks.


          <p><br /></p>


          > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are

          > mutually exclusive. PluginSpec is only used when the Runtime field

          > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime

          > field is set to `attachment`.

          '
        properties:
          ContainerID:
            description: ID of the container represented by this task
            type: string
        type: object
      Networks:
        description: Specifies which networks the service should attach to.
        items:
          $ref: '#/definitions/NetworkAttachmentConfig'
        type: array
      Placement:
        properties:
          Constraints:
            description: 'An array of constraint expressions to limit the set of nodes
              where

              a task can be scheduled. Constraint expressions can either use a

              _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find

              nodes that satisfy every expression (AND match). Constraints can

              match node or Docker Engine labels as follows:


              node attribute       | matches                        | example

              ---------------------|--------------------------------|-----------------------------------------------

              `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`

              `node.hostname`      | Node hostname                  | `node.hostname!=node-2`

              `node.role`          | Node role (`manager`/`worker`) | `node.role==manager`

              `node.platform.os`   | Node operating system          | `node.platform.os==windows`

              `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`

              `node.labels`        | User-defined node labels       | `node.labels.security==high`

              `engine.labels`      | Docker Engine''s labels         | `engine.labels.operatingsystem==ubuntu-14.04`


              `engine.labels` apply to Docker Engine labels like operating system,

              drivers, etc. Swarm administrators add `node.labels` for operational

              purposes by using the [`node update endpoint`](#operation/NodeUpdate).

              '
            example:
            - node.hostname!=node3.corp.example.com
            - node.role!=manager
            - node.labels.type==production
            - node.platform.os==linux
            - node.platform.arch==x86_64
            items:
              type: string
            type: array
          MaxReplicas:
            default: 0
            description: 'Maximum number of replicas for per node (default value is
              0, which

              is unlimited)

              '
            format: int64
            type: integer
          Platforms:
            description: 'Platforms stores all the platforms that the service''s image
              can

              run on. This field is used in the platform filter for scheduling.

              If empty, then the platform filter is off, meaning there are no

              scheduling restrictions.

              '
            items:
              $ref: '#/definitions/Platform'
            type: array
          Preferences:
            description: 'Preferences provide a way to make the scheduler aware of
              factors

              such as topology. They are provided in order from highest to

              lowest precedence.

              '
            example:
            - Spread:
                SpreadDescriptor: node.labels.datacenter
            - Spread:
                SpreadDescriptor: node.labels.rack
            items:
              properties:
                Spread:
                  properties:
                    SpreadDescriptor:
                      description: 'label descriptor, such as `engine.labels.az`.

                        '
                      type: string
                  type: object
              type: object
            type: array
        type: object
      PluginSpec:
        description: 'Plugin spec for the service.  *(Experimental release only.)*


          <p><br /></p>


          > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are

          > mutually exclusive. PluginSpec is only used when the Runtime field

          > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime

          > field is set to `attachment`.

          '
        properties:
          Disabled:
            description: Disable the plugin once scheduled.
            type: boolean
          Name:
            description: The name or 'alias' to use for the plugin.
            type: string
          PluginPrivilege:
            items:
              $ref: '#/definitions/PluginPrivilege'
            type: array
          Remote:
            description: The plugin image reference to use.
            type: string
        type: object
      Resources:
        description: 'Resource requirements which apply to each individual container
          created

          as part of the service.

          '
        properties:
          Limits:
            $ref: '#/definitions/Limit'
            description: Define resources limits.
          Reservations:
            $ref: '#/definitions/ResourceObject'
            description: Define resources reservation.
        type: object
      RestartPolicy:
        description: 'Specification for the restart policy which applies to containers

          created as part of this service.

          '
        properties:
          Condition:
            description: Condition for restart.
            enum:
            - none
            - on-failure
            - any
            type: string
          Delay:
            description: Delay between restart attempts.
            format: int64
            type: integer
          MaxAttempts:
            default: 0
            description: 'Maximum attempts to restart a given container before giving
              up

              (default value is 0, which is ignored).

              '
            format: int64
            type: integer
          Window:
            default: 0
            description: 'Windows is the time window used to evaluate the restart
              policy

              (default value is 0, which is unbounded).

              '
            format: int64
            type: integer
        type: object
      Runtime:
        description: 'Runtime is the type of runtime specified for the task executor.

          '
        type: string
    type: object
  TaskState:
    enum:
    - new
    - allocated
    - pending
    - assigned
    - accepted
    - preparing
    - ready
    - starting
    - running
    - complete
    - shutdown
    - failed
    - rejected
    - remove
    - orphaned
    type: string
  ThrottleDevice:
    properties:
      Path:
        description: Device path
        type: string
      Rate:
        description: Rate
        format: int64
        minimum: 0
        type: integer
    type: object
  Volume:
    properties:
      CreatedAt:
        description: Date/Time the volume was created.
        example: '2016-06-07T20:31:11.853781916Z'
        format: dateTime
        type: string
      Driver:
        description: Name of the volume driver used by the volume.
        example: custom
        type: string
        x-nullable: false
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        example:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        type: object
        x-nullable: false
      Mountpoint:
        description: Mount path of the volume on the host.
        example: /var/lib/docker/volumes/tardis
        type: string
        x-nullable: false
      Name:
        description: Name of the volume.
        example: tardis
        type: string
        x-nullable: false
      Options:
        additionalProperties:
          type: string
        description: 'The driver specific options used when creating the volume.

          '
        example:
          device: tmpfs
          o: size=100m,uid=1000
          type: tmpfs
        type: object
      Scope:
        default: local
        description: 'The level at which the volume exists. Either `global` for cluster-wide,

          or `local` for machine level.

          '
        enum:
        - local
        - global
        example: local
        type: string
        x-nullable: false
      Status:
        additionalProperties:
          type: object
        description: 'Low-level details about the volume, provided by the volume driver.

          Details are returned as a map with key/value pairs:

          `{"key":"value","key2":"value2"}`.


          The `Status` field is optional, and is omitted if the volume driver

          does not support this feature.

          '
        example:
          hello: world
        type: object
      UsageData:
        description: 'Usage details about the volume. This information is used by
          the

          `GET /system/df` endpoint, and omitted in other endpoints.

          '
        properties:
          RefCount:
            default: -1
            description: 'The number of containers referencing this volume. This field

              is set to `-1` if the reference-count is not available.

              '
            type: integer
            x-nullable: false
          Size:
            default: -1
            description: 'Amount of disk space used by the volume (in bytes). This
              information

              is only available for volumes created with the `"local"` volume

              driver. For volumes created with other volume drivers, this field

              is set to `-1` ("not available")

              '
            type: integer
            x-nullable: false
        required:
        - Size
        - RefCount
        type: object
        x-nullable: true
    required:
    - Name
    - Driver
    - Mountpoint
    - Labels
    - Scope
    - Options
    type: object
  VolumeCreateOptions:
    description: Volume configuration
    properties:
      Driver:
        default: local
        description: Name of the volume driver to use.
        example: custom
        type: string
        x-nullable: false
      DriverOpts:
        additionalProperties:
          type: string
        description: 'A mapping of driver options and values. These options are

          passed directly to the driver and are driver specific.

          '
        example:
          device: tmpfs
          o: size=100m,uid=1000
          type: tmpfs
        type: object
      Labels:
        additionalProperties:
          type: string
        description: User-defined key/value metadata.
        example:
          com.example.some-label: some-value
          com.example.some-other-label: some-other-value
        type: object
      Name:
        description: 'The new volume''s name. If not specified, Docker generates a
          name.

          '
        example: tardis
        type: string
        x-nullable: false
    title: VolumeConfig
    type: object
    x-go-name: VolumeCreateBody
info:
  description: "The Engine API is an HTTP API served by Docker Engine. It is the API\
    \ the\nDocker client uses to communicate with the Engine, so everything the Docker\n\
    client can do can be done with the API.\n\nMost of the client's commands map directly\
    \ to API endpoints (e.g. `docker ps`\nis `GET /containers/json`). The notable\
    \ exception is running containers,\nwhich consists of several API calls.\n\n#\
    \ Errors\n\nThe API uses standard HTTP status codes to indicate the success or\
    \ failure\nof the API call. The body of the response will be JSON in the following\n\
    format:\n\n```\n{\n  \"message\": \"page not found\"\n}\n```\n\n# Versioning\n\
    \nThe API is usually changed in each release, so API calls are versioned to\n\
    ensure that clients don't break. To lock to a specific version of the API,\nyou\
    \ prefix the URL with its version, for example, call `/v1.30/info` to use\nthe\
    \ v1.30 version of the `/info` endpoint. If the API version specified in\nthe\
    \ URL is not supported by the daemon, a HTTP `400 Bad Request` error message\n\
    is returned.\n\nIf you omit the version-prefix, the current version of the API\
    \ (v1.41) is used.\nFor example, calling `/info` is the same as calling `/v1.41/info`.\
    \ Using the\nAPI without a version-prefix is deprecated and will be removed in\
    \ a future release.\n\nEngine releases in the near future should support this\
    \ version of the API,\nso your client will continue to work even if it is talking\
    \ to a newer Engine.\n\nThe API uses an open schema model, which means server\
    \ may add extra properties\nto responses. Likewise, the server will ignore any\
    \ extra query parameters and\nrequest body properties. When you write clients,\
    \ you need to ignore additional\nproperties in responses to ensure they do not\
    \ break when talking to newer\ndaemons.\n\n\n# Authentication\n\nAuthentication\
    \ for registries is handled client side. The client has to send\nauthentication\
    \ details to various endpoints that need to communicate with\nregistries, such\
    \ as `POST /images/(name)/push`. These are sent as\n`X-Registry-Auth` header as\
    \ a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)\n(JSON)\
    \ string with the following structure:\n\n```\n{\n  \"username\": \"string\",\n\
    \  \"password\": \"string\",\n  \"email\": \"string\",\n  \"serveraddress\": \"\
    string\"\n}\n```\n\nThe `serveraddress` is a domain/IP without a protocol. Throughout\
    \ this\nstructure, double quotes are required.\n\nIf you have already got an identity\
    \ token from the [`/auth` endpoint](#operation/SystemAuth),\nyou can just pass\
    \ this instead of credentials:\n\n```\n{\n  \"identitytoken\": \"9cbaf023786cd7...\"\
    \n}\n```\n"
  title: Docker Engine API
  version: '1.41'
  x-logo:
    url: /images/logo-docker-main.png
paths:
  /_ping:
    get:
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPing
      produces:
      - text/plain
      responses:
        200:
          description: no error
          headers:
            API-Version:
              description: Max API Version the server supports
              type: string
            Builder-Version:
              description: Default version of docker image builder
              type: string
            Cache-Control:
              default: no-cache, no-store, must-revalidate
              type: string
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              type: boolean
            Pragma:
              default: no-cache
              type: string
          schema:
            example: OK
            type: string
        500:
          description: server error
          headers:
            Cache-Control:
              default: no-cache, no-store, must-revalidate
              type: string
            Pragma:
              default: no-cache
              type: string
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Ping
      tags:
      - System
    head:
      description: This is a dummy endpoint you can use to test if the server is accessible.
      operationId: SystemPingHead
      produces:
      - text/plain
      responses:
        200:
          description: no error
          headers:
            API-Version:
              description: Max API Version the server supports
              type: string
            Builder-Version:
              description: Default version of docker image builder
              type: string
            Cache-Control:
              default: no-cache, no-store, must-revalidate
              type: string
            Docker-Experimental:
              description: If the server is running with experimental mode enabled
              type: boolean
            Pragma:
              default: no-cache
              type: string
          schema:
            example: (empty)
            type: string
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Ping
      tags:
      - System
  /auth:
    post:
      consumes:
      - application/json
      description: 'Validate credentials for a registry and, if available, get an
        identity

        token for accessing the registry without password.

        '
      operationId: SystemAuth
      parameters:
      - description: Authentication to check
        in: body
        name: authConfig
        schema:
          $ref: '#/definitions/AuthConfig'
      produces:
      - application/json
      responses:
        200:
          description: An identity token was generated successfully.
          examples:
            application/json:
              IdentityToken: 9cbaf023786cd7...
              Status: Login Succeeded
          schema:
            properties:
              IdentityToken:
                description: An opaque token used to authenticate a user after a successful
                  login
                type: string
                x-nullable: false
              Status:
                description: The status of the authentication
                type: string
                x-nullable: false
            required:
            - Status
            title: SystemAuthResponse
            type: object
        204:
          description: No error
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Check auth configuration
      tags:
      - System
  /build:
    post:
      consumes:
      - application/octet-stream
      description: 'Build an image from a tar archive with a `Dockerfile` in it.


        The `Dockerfile` specifies how the image is built from the tar archive. It
        is typically in the archive''s root, but can be at a different path or have
        a different name by specifying the `dockerfile` parameter. [See the `Dockerfile`
        reference for more information](/engine/reference/builder/).


        The Docker daemon performs a preliminary validation of the `Dockerfile` before
        starting the build, and returns an error if the syntax is incorrect. After
        that, each instruction is run one-by-one until the ID of the new image is
        output.


        The build is canceled if the client drops the connection by quitting or being
        killed.

        '
      operationId: ImageBuild
      parameters:
      - description: 'A tar archive compressed with one of the following algorithms:
          identity (no compression), gzip, bzip2, xz.'
        in: body
        name: inputStream
        schema:
          format: binary
          type: string
      - default: Dockerfile
        description: Path within the build context to the `Dockerfile`. This is ignored
          if `remote` is specified and points to an external `Dockerfile`.
        in: query
        name: dockerfile
        type: string
      - description: A name and optional tag to apply to the image in the `name:tag`
          format. If you omit the tag the default `latest` value is assumed. You can
          provide several `t` parameters.
        in: query
        name: t
        type: string
      - description: Extra hosts to add to /etc/hosts
        in: query
        name: extrahosts
        type: string
      - description: "A Git repository URI or HTTP/HTTPS context URI. If the URI points\
          \ to a single text file, the file\u2019s contents are placed into a file\
          \ called `Dockerfile` and the image is built from that file. If the URI\
          \ points to a tarball, the file is downloaded by the daemon and the contents\
          \ therein used as the context for the build. If the URI points to a tarball\
          \ and the `dockerfile` parameter is also specified, there must be a file\
          \ with the corresponding path inside the tarball."
        in: query
        name: remote
        type: string
      - default: false
        description: Suppress verbose build output.
        in: query
        name: q
        type: boolean
      - default: false
        description: Do not use the cache when building the image.
        in: query
        name: nocache
        type: boolean
      - description: JSON array of images used for build cache resolution.
        in: query
        name: cachefrom
        type: string
      - description: Attempt to pull the image even if an older image exists locally.
        in: query
        name: pull
        type: string
      - default: true
        description: Remove intermediate containers after a successful build.
        in: query
        name: rm
        type: boolean
      - default: false
        description: Always remove intermediate containers, even upon failure.
        in: query
        name: forcerm
        type: boolean
      - description: Set memory limit for build.
        in: query
        name: memory
        type: integer
      - description: Total memory (memory + swap). Set as `-1` to disable swap.
        in: query
        name: memswap
        type: integer
      - description: CPU shares (relative weight).
        in: query
        name: cpushares
        type: integer
      - description: CPUs in which to allow execution (e.g., `0-3`, `0,1`).
        in: query
        name: cpusetcpus
        type: string
      - description: The length of a CPU period in microseconds.
        in: query
        name: cpuperiod
        type: integer
      - description: Microseconds of CPU time that the container can get in a CPU
          period.
        in: query
        name: cpuquota
        type: integer
      - description: 'JSON map of string pairs for build-time variables. Users pass
          these values at build-time. Docker uses the buildargs as the environment
          context for commands run via the `Dockerfile` RUN instruction, or for variable
          expansion in other `Dockerfile` instructions. This is not meant for passing
          secret values.


          For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON.
          This would result in the query parameter `buildargs={"FOO":"bar"}`. Note
          that `{"FOO":"bar"}` should be URI component encoded.


          [Read more about the buildargs instruction.](/engine/reference/builder/#arg)

          '
        in: query
        name: buildargs
        type: string
      - description: Size of `/dev/shm` in bytes. The size must be greater than 0.
          If omitted the system uses 64MB.
        in: query
        name: shmsize
        type: integer
      - description: Squash the resulting images layers into a single layer. *(Experimental
          release only.)*
        in: query
        name: squash
        type: boolean
      - description: Arbitrary key/value labels to set on the image, as a JSON map
          of string pairs.
        in: query
        name: labels
        type: string
      - description: 'Sets the networking mode for the run commands during build.
          Supported

          standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.

          Any other value is taken as a custom network''s name or ID to which this

          container should connect to.

          '
        in: query
        name: networkmode
        type: string
      - default: application/x-tar
        enum:
        - application/x-tar
        in: header
        name: Content-type
        type: string
      - description: "This is a base64-encoded JSON object with auth configurations\
          \ for multiple registries that a build may refer to.\n\nThe key is a registry\
          \ URL, and the value is an auth configuration object, [as described in the\
          \ authentication section](#section/Authentication). For example:\n\n```\n\
          {\n  \"docker.example.com\": {\n    \"username\": \"janedoe\",\n    \"password\"\
          : \"hunter2\"\n  },\n  \"https://index.docker.io/v1/\": {\n    \"username\"\
          : \"mobydock\",\n    \"password\": \"conta1n3rize14\"\n  }\n}\n```\n\nOnly\
          \ the registry domain name (and port if not the default 443) are required.\
          \ However, for legacy reasons, the Docker Hub registry must be specified\
          \ with both a `https://` prefix and a `/v1/` suffix even though Docker will\
          \ prefer to use the v2 registry API.\n"
        in: header
        name: X-Registry-Config
        type: string
      - default: ''
        description: Platform in the format os[/arch[/variant]]
        in: query
        name: platform
        type: string
      - default: ''
        description: Target build stage
        in: query
        name: target
        type: string
      - default: ''
        description: BuildKit output configuration
        in: query
        name: outputs
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
        400:
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Build an image
      tags:
      - Image
  /build/prune:
    post:
      operationId: BuildPrune
      parameters:
      - description: Amount of disk space in bytes to keep for cache
        format: int64
        in: query
        name: keep-storage
        type: integer
      - description: Remove all types of build cache
        in: query
        name: all
        type: boolean
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the list of build cache objects.


          Available filters:


          - `until=<duration>`: duration relative to daemon''s time, during which
          build cache was not used, in Go''s duration format (e.g., ''24h'')

          - `id=<id>`

          - `parent=<id>`

          - `type=<string>`

          - `description=<string>`

          - `inuse`

          - `shared`

          - `private`

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            properties:
              CachesDeleted:
                items:
                  description: ID of build cache object
                  type: string
                type: array
              SpaceReclaimed:
                description: Disk space reclaimed in bytes
                format: int64
                type: integer
            title: BuildPruneResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete builder cache
      tags:
      - Image
  /commit:
    post:
      consumes:
      - application/json
      operationId: ImageCommit
      parameters:
      - description: The container configuration
        in: body
        name: containerConfig
        schema:
          $ref: '#/definitions/ContainerConfig'
      - description: The ID or name of the container to commit
        in: query
        name: container
        type: string
      - description: Repository name for the created image
        in: query
        name: repo
        type: string
      - description: Tag name for the create image
        in: query
        name: tag
        type: string
      - description: Commit message
        in: query
        name: comment
        type: string
      - description: Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)
        in: query
        name: author
        type: string
      - default: true
        description: Whether to pause the container before committing
        in: query
        name: pause
        type: boolean
      - description: '`Dockerfile` instructions to apply while committing'
        in: query
        name: changes
        type: string
      produces:
      - application/json
      responses:
        201:
          description: no error
          schema:
            $ref: '#/definitions/IdResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a new image from a container
      tags:
      - Image
  /configs:
    get:
      operationId: ConfigList
      parameters:
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the configs list.


          Available filters:


          - `id=<config id>`

          - `label=<key> or label=<key>=value`

          - `name=<config name>`

          - `names=<config name>`

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            example:
            - CreatedAt: '2016-11-05T01:20:17.327670065Z'
              ID: ktnbjxoalbkvbvedmg1urrz8h
              Spec:
                Name: server.conf
              UpdatedAt: '2016-11-05T01:20:17.327670065Z'
              Version:
                Index: 11
            items:
              $ref: '#/definitions/Config'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List configs
      tags:
      - Config
  /configs/create:
    post:
      consumes:
      - application/json
      operationId: ConfigCreate
      parameters:
      - in: body
        name: body
        schema:
          allOf:
          - $ref: '#/definitions/ConfigSpec'
          - example:
              Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
              Labels:
                foo: bar
              Name: server.conf
            type: object
      produces:
      - application/json
      responses:
        201:
          description: no error
          schema:
            $ref: '#/definitions/IdResponse'
        409:
          description: name conflicts with an existing object
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a config
      tags:
      - Config
  /configs/{id}:
    delete:
      operationId: ConfigDelete
      parameters:
      - description: ID of the config
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        204:
          description: no error
        404:
          description: config not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a config
      tags:
      - Config
    get:
      operationId: ConfigInspect
      parameters:
      - description: ID of the config
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          examples:
            application/json:
              CreatedAt: '2016-11-05T01:20:17.327670065Z'
              ID: ktnbjxoalbkvbvedmg1urrz8h
              Spec:
                Name: app-dev.crt
              UpdatedAt: '2016-11-05T01:20:17.327670065Z'
              Version:
                Index: 11
          schema:
            $ref: '#/definitions/Config'
        404:
          description: config not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a config
      tags:
      - Config
  /configs/{id}/update:
    post:
      operationId: ConfigUpdate
      parameters:
      - description: The ID or name of the config
        in: path
        name: id
        required: true
        type: string
      - description: 'The spec of the config to update. Currently, only the Labels
          field

          can be updated. All other fields must remain unchanged from the

          [ConfigInspect endpoint](#operation/ConfigInspect) response values.

          '
        in: body
        name: body
        schema:
          $ref: '#/definitions/ConfigSpec'
      - description: 'The version number of the config object being updated. This
          is

          required to avoid conflicting writes.

          '
        format: int64
        in: query
        name: version
        required: true
        type: integer
      responses:
        200:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such config
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a Config
      tags:
      - Config
  /containers/create:
    post:
      consumes:
      - application/json
      - application/octet-stream
      operationId: ContainerCreate
      parameters:
      - description: 'Assign the specified name to the container. Must match

          `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.

          '
        in: query
        name: name
        pattern: ^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$
        type: string
      - default: ''
        description: "Platform in the format `os[/arch[/variant]]` used for image\
          \ lookup.\n\nWhen specified, the daemon checks if the requested image is\
          \ present\nin the local image cache with the given OS and Architecture,\
          \ and\notherwise returns a `404` status.\n\nIf the option is not set, the\
          \ host's native OS and Architecture are\nused to look up the image in the\
          \ image cache. However, if no platform\nis passed and the given image does\
          \ exist in the local image cache,\nbut its OS or architecture does not match,\
          \ the container is created\nwith the available image, and a warning is added\
          \ to the `Warnings`\nfield in the response, for example;\n\n    WARNING:\
          \ The requested image's platform (linux/arm64/v8) does not\n           \
          \  match the detected host platform (linux/amd64) and no\n             specific\
          \ platform was requested\n"
        in: query
        name: platform
        type: string
      - description: Container to create
        in: body
        name: body
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/ContainerConfig'
          - properties:
              HostConfig:
                $ref: '#/definitions/HostConfig'
              NetworkingConfig:
                $ref: '#/definitions/NetworkingConfig'
            type: object
          example:
            AttachStderr: true
            AttachStdin: false
            AttachStdout: true
            Cmd:
            - date
            Domainname: ''
            Entrypoint: ''
            Env:
            - FOO=bar
            - BAZ=quux
            ExposedPorts:
              22/tcp: {}
            HostConfig:
              AutoRemove: true
              Binds:
              - /tmp:/tmp
              BlkioDeviceReadBps:
              - {}
              BlkioDeviceReadIOps:
              - {}
              BlkioDeviceWriteBps:
              - {}
              BlkioDeviceWriteIOps:
              - {}
              BlkioWeight: 300
              BlkioWeightDevice:
              - {}
              CapAdd:
              - NET_ADMIN
              CapDrop:
              - MKNOD
              CgroupParent: ''
              CpuPercent: 80
              CpuPeriod: 100000
              CpuQuota: 50000
              CpuRealtimePeriod: 1000000
              CpuRealtimeRuntime: 10000
              CpuShares: 512
              CpusetCpus: 0,1
              CpusetMems: 0,1
              DeviceRequests:
              - Capabilities:
                - - gpu
                  - nvidia
                  - compute
                Count: -1
                DeviceIDs":
                - '0'
                - '1'
                - GPU-fef8089b-4820-abfc-e83e-94318197576e
                Driver: nvidia
                Options:
                  property1: string
                  property2: string
              Devices: []
              Dns:
              - 8.8.8.8
              DnsOptions:
              - ''
              DnsSearch:
              - ''
              GroupAdd:
              - newgroup
              KernelMemory: 0
              Links:
              - redis3:redis
              LogConfig:
                Config: {}
                Type: json-file
              MaximumIOBps: 0
              MaximumIOps: 0
              Memory: 0
              MemoryReservation: 0
              MemorySwap: 0
              MemorySwappiness: 60
              NanoCpus: 500000
              NetworkMode: bridge
              OomKillDisable: false
              OomScoreAdj: 500
              PidMode: ''
              PidsLimit: 0
              PortBindings:
                22/tcp:
                - HostPort: '11022'
              Privileged: false
              PublishAllPorts: false
              ReadonlyRootfs: false
              RestartPolicy:
                MaximumRetryCount: 0
                Name: ''
              SecurityOpt: []
              ShmSize: 67108864
              StorageOpt: {}
              Ulimits:
              - {}
              VolumeDriver: ''
              VolumesFrom:
              - parent
              - other:ro
            Hostname: ''
            Image: ubuntu
            Labels:
              com.example.license: GPL
              com.example.vendor: Acme
              com.example.version: '1.0'
            MacAddress: 12:34:56:78:9a:bc
            NetworkDisabled: false
            NetworkingConfig:
              EndpointsConfig:
                isolated_nw:
                  Aliases:
                  - server_x
                  - server_y
                  IPAMConfig:
                    IPv4Address: 172.20.30.33
                    IPv6Address: 2001:db8:abcd::3033
                    LinkLocalIPs:
                    - 169.254.34.68
                    - fe80::3468
                  Links:
                  - container_1
                  - container_2
            OpenStdin: false
            StdinOnce: false
            StopSignal: SIGTERM
            StopTimeout: 10
            Tty: false
            User: ''
            Volumes:
              /volumes/data: {}
            WorkingDir: ''
      produces:
      - application/json
      responses:
        201:
          description: Container created successfully
          examples:
            application/json:
              Id: e90e34656806
              Warnings: []
          schema:
            description: OK response to ContainerCreate operation
            properties:
              Id:
                description: The ID of the created container
                type: string
                x-nullable: false
              Warnings:
                description: Warnings encountered when creating the container
                items:
                  type: string
                type: array
                x-nullable: false
            required:
            - Id
            - Warnings
            title: ContainerCreateResponse
            type: object
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such image
          examples:
            application/json:
              message: 'No such image: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a container
      tags:
      - Container
  /containers/json:
    get:
      description: 'Returns a list of containers. For details on the format, see the

        [inspect endpoint](#operation/ContainerInspect).


        Note that it uses a different, smaller representation of a container

        than inspecting a single container. For example, the list of linked

        containers is not propagated .

        '
      operationId: ContainerList
      parameters:
      - default: false
        description: 'Return all containers. By default, only running containers are
          shown.

          '
        in: query
        name: all
        type: boolean
      - description: 'Return this number of most recently created containers, including

          non-running ones.

          '
        in: query
        name: limit
        type: integer
      - default: false
        description: 'Return the size of container as fields `SizeRw` and `SizeRootFs`.

          '
        in: query
        name: size
        type: boolean
      - description: 'Filters to process on the container list, encoded as JSON (a

          `map[string][]string`). For example, `{"status": ["paused"]}` will

          only return paused containers.


          Available filters:


          - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)

          - `before`=(`<container id>` or `<container name>`)

          - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)

          - `exited=<int>` containers with exit code of `<int>`

          - `health`=(`starting`|`healthy`|`unhealthy`|`none`)

          - `id=<ID>` a container''s ID

          - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)

          - `is-task=`(`true`|`false`)

          - `label=key` or `label="key=value"` of a container label

          - `name=<name>` a container''s name

          - `network`=(`<network id>` or `<network name>`)

          - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)

          - `since`=(`<container id>` or `<container name>`)

          - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)

          - `volume`=(`<volume name>` or `<mount point destination>`)

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          examples:
            application/json:
            - Command: echo 1
              Created: 1367854155
              HostConfig:
                NetworkMode: default
              Id: 8dfafdbc3a40
              Image: ubuntu:latest
              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
              Labels:
                com.example.license: GPL
                com.example.vendor: Acme
                com.example.version: '1.0'
              Mounts:
              - Destination: /data
                Driver: local
                Mode: ro,Z
                Name: fac362...80535
                Propagation: ''
                RW: false
                Source: /data
              Names:
              - /boring_feynman
              NetworkSettings:
                Networks:
                  bridge:
                    EndpointID: 2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f
                    Gateway: 172.17.0.1
                    GlobalIPv6Address: ''
                    GlobalIPv6PrefixLen: 0
                    IPAddress: 172.17.0.2
                    IPPrefixLen: 16
                    IPv6Gateway: ''
                    MacAddress: 02:42:ac:11:00:02
                    NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
              Ports:
              - PrivatePort: 2222
                PublicPort: 3333
                Type: tcp
              SizeRootFs: 0
              SizeRw: 12288
              State: Exited
              Status: Exit 0
            - Command: echo 222222
              Created: 1367854155
              HostConfig:
                NetworkMode: default
              Id: 9cd87474be90
              Image: ubuntu:latest
              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
              Labels: {}
              Mounts: []
              Names:
              - /coolName
              NetworkSettings:
                Networks:
                  bridge:
                    EndpointID: 88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a
                    Gateway: 172.17.0.1
                    GlobalIPv6Address: ''
                    GlobalIPv6PrefixLen: 0
                    IPAddress: 172.17.0.8
                    IPPrefixLen: 16
                    IPv6Gateway: ''
                    MacAddress: 02:42:ac:11:00:08
                    NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
              Ports: []
              SizeRootFs: 0
              SizeRw: 12288
              State: Exited
              Status: Exit 0
            - Command: echo 3333333333333333
              Created: 1367854154
              HostConfig:
                NetworkMode: default
              Id: 3176a2479c92
              Image: ubuntu:latest
              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
              Labels: {}
              Mounts: []
              Names:
              - /sleepy_dog
              NetworkSettings:
                Networks:
                  bridge:
                    EndpointID: 8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d
                    Gateway: 172.17.0.1
                    GlobalIPv6Address: ''
                    GlobalIPv6PrefixLen: 0
                    IPAddress: 172.17.0.6
                    IPPrefixLen: 16
                    IPv6Gateway: ''
                    MacAddress: 02:42:ac:11:00:06
                    NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
              Ports: []
              SizeRootFs: 0
              SizeRw: 12288
              State: Exited
              Status: Exit 0
            - Command: echo 444444444444444444444444444444444
              Created: 1367854152
              HostConfig:
                NetworkMode: default
              Id: 4cb07b47f9fb
              Image: ubuntu:latest
              ImageID: d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82
              Labels: {}
              Mounts: []
              Names:
              - /running_cat
              NetworkSettings:
                Networks:
                  bridge:
                    EndpointID: d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9
                    Gateway: 172.17.0.1
                    GlobalIPv6Address: ''
                    GlobalIPv6PrefixLen: 0
                    IPAddress: 172.17.0.5
                    IPPrefixLen: 16
                    IPv6Gateway: ''
                    MacAddress: 02:42:ac:11:00:05
                    NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
              Ports: []
              SizeRootFs: 0
              SizeRw: 12288
              State: Exited
              Status: Exit 0
          schema:
            items:
              $ref: '#/definitions/ContainerSummary'
            type: array
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List containers
      tags:
      - Container
  /containers/prune:
    post:
      operationId: ContainerPrune
      parameters:
      - description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n- `until=<timestamp>` Prune containers created before\
          \ this timestamp. The `<timestamp>` can be Unix timestamps, date formatted\
          \ timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative\
          \ to the daemon machine\u2019s time.\n- `label` (`label=<key>`, `label=<key>=<value>`,\
          \ `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without,\
          \ in case `label!=...` is used) the specified labels.\n"
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            properties:
              ContainersDeleted:
                description: Container IDs that were deleted
                items:
                  type: string
                type: array
              SpaceReclaimed:
                description: Disk space reclaimed in bytes
                format: int64
                type: integer
            title: ContainerPruneResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete stopped containers
      tags:
      - Container
  /containers/{id}:
    delete:
      operationId: ContainerDelete
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Remove anonymous volumes associated with the container.
        in: query
        name: v
        type: boolean
      - default: false
        description: If the container is running, kill it before removing it.
        in: query
        name: force
        type: boolean
      - default: false
        description: Remove the specified link associated with the container.
        in: query
        name: link
        type: boolean
      responses:
        204:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: conflict
          examples:
            application/json:
              message: 'You cannot remove a running container: c2ada9df5af8. Stop
                the

                container before attempting removal or force remove

                '
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove a container
      tags:
      - Container
  /containers/{id}/archive:
    get:
      description: Get a tar archive of a resource in the filesystem of container
        id.
      operationId: ContainerArchive
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: "Resource in the container\u2019s filesystem to archive."
        in: query
        name: path
        required: true
        type: string
      produces:
      - application/x-tar
      responses:
        200:
          description: no error
        400:
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Container or path does not exist
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get an archive of a filesystem resource in a container
      tags:
      - Container
    head:
      description: 'A response header `X-Docker-Container-Path-Stat` is returned,
        containing

        a base64 - encoded JSON object with some filesystem header information

        about the path.

        '
      operationId: ContainerArchiveInfo
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: "Resource in the container\u2019s filesystem to archive."
        in: query
        name: path
        required: true
        type: string
      responses:
        200:
          description: no error
          headers:
            X-Docker-Container-Path-Stat:
              description: 'A base64 - encoded JSON object with some filesystem header

                information about the path

                '
              type: string
        400:
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Container or path does not exist
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get information about files in a container
      tags:
      - Container
    put:
      consumes:
      - application/x-tar
      - application/octet-stream
      description: 'Upload a tar archive to be extracted to a path in the filesystem
        of container id.

        `path` parameter is asserted to be a directory. If it exists as a file, 400
        error

        will be returned with message "not a directory".

        '
      operationId: PutContainerArchive
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: "Path to a directory in the container to extract the archive\u2019\
          s contents into. "
        in: query
        name: path
        required: true
        type: string
      - description: 'If `1`, `true`, or `True` then it will be an error if unpacking
          the

          given content would cause an existing directory to be replaced with

          a non-directory and vice versa.

          '
        in: query
        name: noOverwriteDirNonDir
        type: string
      - description: 'If `1`, `true`, then it will copy UID/GID maps to the dest file
          or

          dir

          '
        in: query
        name: copyUIDGID
        type: string
      - description: 'The input stream must be a tar archive compressed with one of
          the

          following algorithms: `identity` (no compression), `gzip`, `bzip2`,

          or `xz`.

          '
        in: body
        name: inputStream
        required: true
        schema:
          format: binary
          type: string
      responses:
        200:
          description: The content was extracted successfully
        400:
          description: Bad parameter
          examples:
            application/json:
              message: not a directory
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: Permission denied, the volume or container rootfs is marked
            as read-only.
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: No such container or path does not exist inside the container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Extract an archive of files or folders to a directory in a container
      tags:
      - Container
  /containers/{id}/attach:
    post:
      description: 'Attach to a container to read its output or send it input. You
        can attach

        to the same container multiple times and you can reattach to containers

        that have been detached.


        Either the `stream` or `logs` parameter must be `true` for this endpoint

        to do anything.


        See the [documentation for the `docker attach` command](/engine/reference/commandline/attach/)

        for more details.


        ### Hijacking


        This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,

        and `stderr` on the same socket.


        This is the response from the daemon for an attach request:


        ```

        HTTP/1.1 200 OK

        Content-Type: application/vnd.docker.raw-stream


        [STREAM]

        ```


        After the headers and two new lines, the TCP connection can now be used

        for raw, bidirectional communication between the client and server.


        To hint potential proxies about connection hijacking, the Docker client

        can also optionally send connection upgrade headers.


        For example, the client sends this request to upgrade the connection:


        ```

        POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1

        Upgrade: tcp

        Connection: Upgrade

        ```


        The Docker daemon will respond with a `101 UPGRADED` response, and will

        similarly follow with the raw stream:


        ```

        HTTP/1.1 101 UPGRADED

        Content-Type: application/vnd.docker.raw-stream

        Connection: Upgrade

        Upgrade: tcp


        [STREAM]

        ```


        ### Stream format


        When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),

        the stream over the hijacked connected is multiplexed to separate out

        `stdout` and `stderr`. The stream consists of a series of frames, each

        containing a header and a payload.


        The header contains the information which the stream writes (`stdout` or

        `stderr`). It also contains the size of the associated frame encoded in

        the last four bytes (`uint32`).


        It is encoded on the first eight bytes like this:


        ```go

        header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}

        ```


        `STREAM_TYPE` can be:


        - 0: `stdin` (is written on `stdout`)

        - 1: `stdout`

        - 2: `stderr`


        `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size

        encoded as big endian.


        Following the header is the payload, which is the specified number of

        bytes of `STREAM_TYPE`.


        The simplest way to implement this protocol is the following:


        1. Read 8 bytes.

        2. Choose `stdout` or `stderr` depending on the first byte.

        3. Extract the frame size from the last four bytes.

        4. Read the extracted size and output it on the correct output.

        5. Goto 1.


        ### Stream format when using a TTY


        When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),

        the stream is not multiplexed. The data exchanged over the hijacked

        connection is simply the raw data from the process PTY and client''s

        `stdin`.

        '
      operationId: ContainerAttach
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: 'Override the key sequence for detaching a container.Format is
          a single

          character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,

          `@`, `^`, `[`, `,` or `_`.

          '
        in: query
        name: detachKeys
        type: string
      - default: false
        description: 'Replay previous logs from the container.


          This is useful for attaching to a container that has started and you

          want to output everything since the container started.


          If `stream` is also enabled, once all the previous output has been

          returned, it will seamlessly transition into streaming current

          output.

          '
        in: query
        name: logs
        type: boolean
      - default: false
        description: 'Stream attached streams from the time the request was made onwards.

          '
        in: query
        name: stream
        type: boolean
      - default: false
        description: Attach to `stdin`
        in: query
        name: stdin
        type: boolean
      - default: false
        description: Attach to `stdout`
        in: query
        name: stdout
        type: boolean
      - default: false
        description: Attach to `stderr`
        in: query
        name: stderr
        type: boolean
      produces:
      - application/vnd.docker.raw-stream
      responses:
        101:
          description: no error, hints proxy about hijacking
        200:
          description: no error, no upgrade header found
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Attach to a container
      tags:
      - Container
  /containers/{id}/attach/ws:
    get:
      operationId: ContainerAttachWebsocket
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: 'Override the key sequence for detaching a container.Format is
          a single

          character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,

          `@`, `^`, `[`, `,`, or `_`.

          '
        in: query
        name: detachKeys
        type: string
      - default: false
        description: Return logs
        in: query
        name: logs
        type: boolean
      - default: false
        description: Return stream
        in: query
        name: stream
        type: boolean
      responses:
        101:
          description: no error, hints proxy about hijacking
        200:
          description: no error, no upgrade header found
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Attach to a container via a websocket
      tags:
      - Container
  /containers/{id}/changes:
    get:
      description: 'Returns which files in a container''s filesystem have been added,
        deleted,

        or modified. The `Kind` of modification can be one of:


        - `0`: Modified

        - `1`: Added

        - `2`: Deleted

        '
      operationId: ContainerChanges
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: The list of changes
          examples:
            application/json:
            - Kind: 0
              Path: /dev
            - Kind: 1
              Path: /dev/kmsg
            - Kind: 1
              Path: /test
          schema:
            items:
              description: change item in response to ContainerChanges operation
              properties:
                Kind:
                  description: Kind of change
                  enum:
                  - 0
                  - 1
                  - 2
                  format: uint8
                  type: integer
                  x-nullable: false
                Path:
                  description: Path to file that has changed
                  type: string
                  x-nullable: false
              required:
              - Path
              - Kind
              title: ContainerChangeResponseItem
              type: object
              x-go-name: ContainerChangeResponseItem
            type: array
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: "Get changes on a container\u2019s filesystem"
      tags:
      - Container
  /containers/{id}/exec:
    post:
      consumes:
      - application/json
      description: Run a command inside a running container.
      operationId: ContainerExec
      parameters:
      - description: Exec configuration
        in: body
        name: execConfig
        required: true
        schema:
          example:
            AttachStderr: true
            AttachStdin: false
            AttachStdout: true
            Cmd:
            - date
            DetachKeys: ctrl-p,ctrl-q
            Env:
            - FOO=bar
            - BAZ=quux
            Tty: false
          properties:
            AttachStderr:
              description: Attach to `stderr` of the exec command.
              type: boolean
            AttachStdin:
              description: Attach to `stdin` of the exec command.
              type: boolean
            AttachStdout:
              description: Attach to `stdout` of the exec command.
              type: boolean
            Cmd:
              description: Command to run, as a string or array of strings.
              items:
                type: string
              type: array
            DetachKeys:
              description: 'Override the key sequence for detaching a container. Format
                is

                a single character `[a-Z]` or `ctrl-<value>` where `<value>`

                is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.

                '
              type: string
            Env:
              description: 'A list of environment variables in the form `["VAR=value",
                ...]`.

                '
              items:
                type: string
              type: array
            Privileged:
              default: false
              description: Runs the exec process with extended privileges.
              type: boolean
            Tty:
              description: Allocate a pseudo-TTY.
              type: boolean
            User:
              description: 'The user, and optionally, group to run the exec process
                inside

                the container. Format is one of: `user`, `user:group`, `uid`,

                or `uid:gid`.

                '
              type: string
            WorkingDir:
              description: 'The working directory for the exec process inside the
                container.

                '
              type: string
          title: ExecConfig
          type: object
      - description: ID or name of container
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        201:
          description: no error
          schema:
            $ref: '#/definitions/IdResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: container is paused
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create an exec instance
      tags:
      - Exec
  /containers/{id}/export:
    get:
      description: Export the contents of a container as a tarball.
      operationId: ContainerExport
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        200:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Export a container
      tags:
      - Container
  /containers/{id}/json:
    get:
      description: Return low-level information about a container.
      operationId: ContainerInspect
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Return the size of container as fields `SizeRw` and `SizeRootFs`
        in: query
        name: size
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: no error
          examples:
            application/json:
              AppArmorProfile: ''
              Args:
              - -c
              - exit 9
              Config:
                AttachStderr: true
                AttachStdin: false
                AttachStdout: true
                Cmd:
                - /bin/sh
                - -c
                - exit 9
                Domainname: ''
                Env:
                - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
                Healthcheck:
                  Test:
                  - CMD-SHELL
                  - exit 0
                Hostname: ba033ac44011
                Image: ubuntu
                Labels:
                  com.example.license: GPL
                  com.example.vendor: Acme
                  com.example.version: '1.0'
                MacAddress: ''
                NetworkDisabled: false
                OpenStdin: false
                StdinOnce: false
                StopSignal: SIGTERM
                StopTimeout: 10
                Tty: false
                User: ''
                Volumes:
                  /volumes/data: {}
                WorkingDir: ''
              Created: '2015-01-06T15:47:31.485331387Z'
              Driver: devicemapper
              ExecIDs:
              - b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca
              - 3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4
              HostConfig:
                BlkioDeviceReadBps:
                - {}
                BlkioDeviceReadIOps:
                - {}
                BlkioDeviceWriteBps:
                - {}
                BlkioDeviceWriteIOps:
                - {}
                BlkioWeight: 0
                BlkioWeightDevice:
                - {}
                ContainerIDFile: ''
                CpuPercent: 80
                CpuPeriod: 100000
                CpuRealtimePeriod: 1000000
                CpuRealtimeRuntime: 10000
                CpuShares: 0
                CpusetCpus: ''
                CpusetMems: ''
                DeviceRequests:
                - Capabilities:
                  - - gpu
                    - nvidia
                    - compute
                  Count: -1
                  DeviceIDs":
                  - '0'
                  - '1'
                  - GPU-fef8089b-4820-abfc-e83e-94318197576e
                  Driver: nvidia
                  Options:
                    property1: string
                    property2: string
                Devices: []
                IpcMode: ''
                KernelMemory: 0
                LogConfig:
                  Type: json-file
                MaximumIOBps: 0
                MaximumIOps: 0
                Memory: 0
                MemoryReservation: 0
                MemorySwap: 0
                NetworkMode: bridge
                OomKillDisable: false
                OomScoreAdj: 500
                PidMode: ''
                PortBindings: {}
                Privileged: false
                PublishAllPorts: false
                ReadonlyRootfs: false
                RestartPolicy:
                  MaximumRetryCount: 2
                  Name: on-failure
                ShmSize: 67108864
                Sysctls:
                  net.ipv4.ip_forward: '1'
                Ulimits:
                - {}
                VolumeDriver: ''
              HostnamePath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname
              HostsPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts
              Id: ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39
              Image: 04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2
              LogPath: /var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log
              MountLabel: ''
              Mounts:
              - Destination: /data
                Driver: local
                Mode: ro,Z
                Name: fac362...80535
                Propagation: ''
                RW: false
                Source: /data
              Name: /boring_euclid
              NetworkSettings:
                Bridge: ''
                EndpointID: ''
                Gateway: ''
                GlobalIPv6Address: ''
                GlobalIPv6PrefixLen: 0
                HairpinMode: false
                IPAddress: ''
                IPPrefixLen: 0
                IPv6Gateway: ''
                LinkLocalIPv6Address: ''
                LinkLocalIPv6PrefixLen: 0
                MacAddress: ''
                Networks:
                  bridge:
                    EndpointID: 7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d
                    Gateway: 172.17.0.1
                    GlobalIPv6Address: ''
                    GlobalIPv6PrefixLen: 0
                    IPAddress: 172.17.0.2
                    IPPrefixLen: 16
                    IPv6Gateway: ''
                    MacAddress: 02:42:ac:12:00:02
                    NetworkID: 7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812
                SandboxID: ''
                SandboxKey: ''
              Path: /bin/sh
              ProcessLabel: ''
              ResolvConfPath: /var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf
              RestartCount: 1
              State:
                Dead: false
                Error: ''
                ExitCode: 9
                FinishedAt: '2015-01-06T15:47:32.080254511Z'
                Health:
                  FailingStreak: 0
                  Log:
                  - End: '2019-12-22T10:59:05.8078452Z'
                    ExitCode: 0
                    Output: ''
                    Start: '2019-12-22T10:59:05.6385933Z'
                  Status: healthy
                OOMKilled: false
                Paused: false
                Pid: 0
                Restarting: false
                Running: true
                StartedAt: '2015-01-06T15:47:32.072697474Z'
                Status: running
          schema:
            properties:
              AppArmorProfile:
                type: string
              Args:
                description: The arguments to the command being run
                items:
                  type: string
                type: array
              Config:
                $ref: '#/definitions/ContainerConfig'
              Created:
                description: The time the container was created
                type: string
              Driver:
                type: string
              ExecIDs:
                description: IDs of exec instances that are running in the container.
                items:
                  type: string
                type: array
                x-nullable: true
              GraphDriver:
                $ref: '#/definitions/GraphDriverData'
              HostConfig:
                $ref: '#/definitions/HostConfig'
              HostnamePath:
                type: string
              HostsPath:
                type: string
              Id:
                description: The ID of the container
                type: string
              Image:
                description: The container's image ID
                type: string
              LogPath:
                type: string
              MountLabel:
                type: string
              Mounts:
                items:
                  $ref: '#/definitions/MountPoint'
                type: array
              Name:
                type: string
              NetworkSettings:
                $ref: '#/definitions/NetworkSettings'
              Path:
                description: The path to the command being run
                type: string
              Platform:
                type: string
              ProcessLabel:
                type: string
              ResolvConfPath:
                type: string
              RestartCount:
                type: integer
              SizeRootFs:
                description: The total size of all the files in this container.
                format: int64
                type: integer
              SizeRw:
                description: 'The size of files that have been created or changed
                  by this

                  container.

                  '
                format: int64
                type: integer
              State:
                $ref: '#/definitions/ContainerState'
                x-nullable: true
            title: ContainerInspectResponse
            type: object
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a container
      tags:
      - Container
  /containers/{id}/kill:
    post:
      description: 'Send a POSIX signal to a container, defaulting to killing to the

        container.

        '
      operationId: ContainerKill
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: SIGKILL
        description: Signal to send to the container as an integer or string (e.g.
          `SIGINT`)
        in: query
        name: signal
        type: string
      responses:
        204:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: container is not running
          examples:
            application/json:
              message: Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28
                is not running
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Kill a container
      tags:
      - Container
  /containers/{id}/logs:
    get:
      description: 'Get `stdout` and `stderr` logs from a container.


        Note: This endpoint works only for containers with the `json-file` or

        `journald` logging driver.

        '
      operationId: ContainerLogs
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Keep connection after returning logs.
        in: query
        name: follow
        type: boolean
      - default: false
        description: Return logs from `stdout`
        in: query
        name: stdout
        type: boolean
      - default: false
        description: Return logs from `stderr`
        in: query
        name: stderr
        type: boolean
      - default: 0
        description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        type: integer
      - default: 0
        description: Only return logs before this time, as a UNIX timestamp
        in: query
        name: until
        type: integer
      - default: false
        description: Add timestamps to every log line
        in: query
        name: timestamps
        type: boolean
      - default: all
        description: 'Only return this number of log lines from the end of the logs.

          Specify as an integer or `all` to output all log lines.

          '
        in: query
        name: tail
        type: string
      responses:
        200:
          description: 'logs returned as a stream in response body.

            For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).

            Note that unlike the attach endpoint, the logs endpoint does not

            upgrade the connection and does not set Content-Type.

            '
          schema:
            format: binary
            type: string
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get container logs
      tags:
      - Container
  /containers/{id}/pause:
    post:
      description: 'Use the freezer cgroup to suspend all processes in a container.


        Traditionally, when suspending a process the `SIGSTOP` signal is used,

        which is observable by the process being suspended. With the freezer

        cgroup the process is unaware, and unable to capture, that it is being

        suspended, and subsequently resumed.

        '
      operationId: ContainerPause
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      responses:
        204:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Pause a container
      tags:
      - Container
  /containers/{id}/rename:
    post:
      operationId: ContainerRename
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: New name for the container
        in: query
        name: name
        required: true
        type: string
      responses:
        204:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: name already in use
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Rename a container
      tags:
      - Container
  /containers/{id}/resize:
    post:
      consumes:
      - application/octet-stream
      description: Resize the TTY for a container.
      operationId: ContainerResize
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: Height of the TTY session in characters
        in: query
        name: h
        type: integer
      - description: Width of the TTY session in characters
        in: query
        name: w
        type: integer
      produces:
      - text/plain
      responses:
        200:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: cannot resize container
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Resize a container TTY
      tags:
      - Container
  /containers/{id}/restart:
    post:
      operationId: ContainerRestart
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: Number of seconds to wait before killing the container
        in: query
        name: t
        type: integer
      responses:
        204:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Restart a container
      tags:
      - Container
  /containers/{id}/start:
    post:
      operationId: ContainerStart
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: 'Override the key sequence for detaching a container. Format
          is a

          single character `[a-Z]` or `ctrl-<value>` where `<value>` is one

          of: `a-z`, `@`, `^`, `[`, `,` or `_`.

          '
        in: query
        name: detachKeys
        type: string
      responses:
        204:
          description: no error
        304:
          description: container already started
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Start a container
      tags:
      - Container
  /containers/{id}/stats:
    get:
      description: "This endpoint returns a live stream of a container\u2019s resource\
        \ usage\nstatistics.\n\nThe `precpu_stats` is the CPU statistic of the *previous*\
        \ read, and is\nused to calculate the CPU usage percentage. It is not an exact\
        \ copy\nof the `cpu_stats` field.\n\nIf either `precpu_stats.online_cpus`\
        \ or `cpu_stats.online_cpus` is\nnil then for compatibility with older daemons\
        \ the length of the\ncorresponding `cpu_usage.percpu_usage` array should be\
        \ used.\n\nOn a cgroup v2 host, the following fields are not set\n* `blkio_stats`:\
        \ all fields other than `io_service_bytes_recursive`\n* `cpu_stats`: `cpu_usage.percpu_usage`\n\
        * `memory_stats`: `max_usage` and `failcnt`\nAlso, `memory_stats.stats` fields\
        \ are incompatible with cgroup v1.\n\nTo calculate the values shown by the\
        \ `stats` command of the docker cli tool\nthe following formulas can be used:\n\
        * used_memory = `memory_stats.usage - memory_stats.stats.cache`\n* available_memory\
        \ = `memory_stats.limit`\n* Memory usage % = `(used_memory / available_memory)\
        \ * 100.0`\n* cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`\n\
        * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`\n\
        * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`\n\
        * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`\n"
      operationId: ContainerStats
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: true
        description: 'Stream the output. If false, the stats will be output once and
          then

          it will disconnect.

          '
        in: query
        name: stream
        type: boolean
      - default: false
        description: 'Only get a single stat instead of waiting for 2 cycles. Must
          be used

          with `stream=false`.

          '
        in: query
        name: one-shot
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: no error
          examples:
            application/json:
              blkio_stats: {}
              cpu_stats:
                cpu_usage:
                  percpu_usage:
                  - 8646879
                  - 24472255
                  - 36438778
                  - 30657443
                  total_usage: 100215355
                  usage_in_kernelmode: 30000000
                  usage_in_usermode: 50000000
                online_cpus: 4
                system_cpu_usage: 739306590000000
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
              memory_stats:
                failcnt: 0
                limit: 67108864
                max_usage: 6651904
                stats:
                  active_anon: 6537216
                  active_file: 0
                  cache: 0
                  hierarchical_memory_limit: 67108864
                  inactive_anon: 0
                  inactive_file: 0
                  mapped_file: 0
                  pgfault: 964
                  pgmajfault: 0
                  pgpgin: 477
                  pgpgout: 414
                  rss: 6537216
                  rss_huge: 6291456
                  total_active_anon: 6537216
                  total_active_file: 0
                  total_cache: 0
                  total_inactive_anon: 0
                  total_inactive_file: 0
                  total_mapped_file: 0
                  total_pgfault: 964
                  total_pgmajfault: 0
                  total_pgpgin: 477
                  total_pgpgout: 414
                  total_rss: 6537216
                  total_rss_huge: 6291456
                  total_unevictable: 0
                  total_writeback: 0
                  unevictable: 0
                  writeback: 0
                usage: 6537216
              networks:
                eth0:
                  rx_bytes: 5338
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 36
                  tx_bytes: 648
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 8
                eth5:
                  rx_bytes: 4641
                  rx_dropped: 0
                  rx_errors: 0
                  rx_packets: 26
                  tx_bytes: 690
                  tx_dropped: 0
                  tx_errors: 0
                  tx_packets: 9
              pids_stats:
                current: 3
              precpu_stats:
                cpu_usage:
                  percpu_usage:
                  - 8646879
                  - 24350896
                  - 36438778
                  - 30657443
                  total_usage: 100093996
                  usage_in_kernelmode: 30000000
                  usage_in_usermode: 50000000
                online_cpus: 4
                system_cpu_usage: 9492140000000
                throttling_data:
                  periods: 0
                  throttled_periods: 0
                  throttled_time: 0
              read: '2015-01-08T22:57:31.547920715Z'
          schema:
            type: object
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get container stats based on resource usage
      tags:
      - Container
  /containers/{id}/stop:
    post:
      operationId: ContainerStop
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - description: Number of seconds to wait before killing the container
        in: query
        name: t
        type: integer
      responses:
        204:
          description: no error
        304:
          description: container already stopped
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Stop a container
      tags:
      - Container
  /containers/{id}/top:
    get:
      description: 'On Unix systems, this is done by running the `ps` command. This
        endpoint

        is not supported on Windows.

        '
      operationId: ContainerTop
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: -ef
        description: The arguments to pass to `ps`. For example, `aux`
        in: query
        name: ps_args
        type: string
      responses:
        200:
          description: no error
          examples:
            application/json:
              Processes:
              - - root
                - '13642'
                - '882'
                - '0'
                - '17:03'
                - pts/0
                - 00:00:00
                - /bin/bash
              - - root
                - '13735'
                - '13642'
                - '0'
                - '17:06'
                - pts/0
                - 00:00:00
                - sleep 10
              Titles:
              - UID
              - PID
              - PPID
              - C
              - STIME
              - TTY
              - TIME
              - CMD
          schema:
            description: OK response to ContainerTop operation
            properties:
              Processes:
                description: 'Each process running in the container, where each is
                  process

                  is an array of values corresponding to the titles.

                  '
                items:
                  items:
                    type: string
                  type: array
                type: array
              Titles:
                description: The ps column titles
                items:
                  type: string
                type: array
            title: ContainerTopResponse
            type: object
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List processes running inside a container
      tags:
      - Container
  /containers/{id}/unpause:
    post:
      description: Resume a container which has been paused.
      operationId: ContainerUnpause
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      responses:
        204:
          description: no error
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Unpause a container
      tags:
      - Container
  /containers/{id}/update:
    post:
      consumes:
      - application/json
      description: 'Change various configuration options of a container without having
        to

        recreate it.

        '
      operationId: ContainerUpdate
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: update
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/Resources'
          - properties:
              RestartPolicy:
                $ref: '#/definitions/RestartPolicy'
            type: object
          example:
            BlkioWeight: 300
            CpuPeriod: 100000
            CpuQuota: 50000
            CpuRealtimePeriod: 1000000
            CpuRealtimeRuntime: 10000
            CpuShares: 512
            CpusetCpus: 0,1
            CpusetMems: '0'
            KernelMemory: 52428800
            Memory: 314572800
            MemoryReservation: 209715200
            MemorySwap: 514288000
            RestartPolicy:
              MaximumRetryCount: 4
              Name: on-failure
      produces:
      - application/json
      responses:
        200:
          description: The container has been updated.
          schema:
            description: OK response to ContainerUpdate operation
            properties:
              Warnings:
                items:
                  type: string
                type: array
            title: ContainerUpdateResponse
            type: object
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a container
      tags:
      - Container
  /containers/{id}/wait:
    post:
      description: Block until a container stops, then returns the exit code.
      operationId: ContainerWait
      parameters:
      - description: ID or name of the container
        in: path
        name: id
        required: true
        type: string
      - default: not-running
        description: 'Wait until a container state reaches the given condition.


          Defaults to `not-running` if omitted or empty.

          '
        enum:
        - not-running
        - next-exit
        - removed
        in: query
        name: condition
        type: string
      produces:
      - application/json
      responses:
        200:
          description: The container has exit.
          schema:
            $ref: '#/definitions/ContainerWaitResponse'
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such container
          examples:
            application/json:
              message: 'No such container: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Wait for a container
      tags:
      - Container
  /distribution/{name}/json:
    get:
      description: 'Return image digest and platform information by contacting the
        registry.

        '
      operationId: DistributionInspect
      parameters:
      - description: Image name or id
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: descriptor and platform information
          schema:
            $ref: '#/definitions/DistributionInspect'
        401:
          description: Failed authentication or no image found
          examples:
            application/json:
              message: 'No such image: someimage (tag: latest)'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get image information from the registry
      tags:
      - Distribution
  /events:
    get:
      description: 'Stream real-time events from the server.


        Various objects within Docker report events when something happens to them.


        Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`,
        `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`,
        `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`,
        `stop`, `top`, `unpause`, `update`, and `prune`


        Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`,
        `tag`, `untag`, and `prune`


        Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and
        `prune`


        Networks report these events: `create`, `connect`, `disconnect`, `destroy`,
        `update`, `remove`, and `prune`


        The Docker daemon reports these events: `reload`


        Services report these events: `create`, `update`, and `remove`


        Nodes report these events: `create`, `update`, and `remove`


        Secrets report these events: `create`, `update`, and `remove`


        Configs report these events: `create`, `update`, and `remove`


        The Builder reports `prune` events

        '
      operationId: SystemEvents
      parameters:
      - description: Show events created since this timestamp then stream new events.
        in: query
        name: since
        type: string
      - description: Show events created until this timestamp then stop streaming.
        in: query
        name: until
        type: string
      - description: 'A JSON encoded value of filters (a `map[string][]string`) to
          process on the event list. Available filters:


          - `config=<string>` config name or ID

          - `container=<string>` container name or ID

          - `daemon=<string>` daemon name or ID

          - `event=<string>` event type

          - `image=<string>` image name or ID

          - `label=<string>` image or container label

          - `network=<string>` network name or ID

          - `node=<string>` node ID

          - `plugin`=<string> plugin name or ID

          - `scope`=<string> local or swarm

          - `secret=<string>` secret name or ID

          - `service=<string>` service name or ID

          - `type=<string>` object to filter by, one of `container`, `image`, `volume`,
          `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`

          - `volume=<string>` volume name

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/EventMessage'
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Monitor events
      tags:
      - System
  /exec/{id}/json:
    get:
      description: Return low-level information about an exec instance.
      operationId: ExecInspect
      parameters:
      - description: Exec instance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          examples:
            application/json:
              CanRemove: false
              ContainerID: b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126
              DetachKeys: ''
              ExitCode: 2
              ID: f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b
              OpenStderr: true
              OpenStdin: true
              OpenStdout: true
              Pid: 42000
              ProcessConfig:
                arguments:
                - -c
                - exit 2
                entrypoint: sh
                privileged: false
                tty: true
                user: '1000'
              Running: false
          schema:
            properties:
              CanRemove:
                type: boolean
              ContainerID:
                type: string
              DetachKeys:
                type: string
              ExitCode:
                type: integer
              ID:
                type: string
              OpenStderr:
                type: boolean
              OpenStdin:
                type: boolean
              OpenStdout:
                type: boolean
              Pid:
                description: The system process ID for the exec process.
                type: integer
              ProcessConfig:
                $ref: '#/definitions/ProcessConfig'
              Running:
                type: boolean
            title: ExecInspectResponse
            type: object
        404:
          description: No such exec instance
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect an exec instance
      tags:
      - Exec
  /exec/{id}/resize:
    post:
      description: 'Resize the TTY session used by an exec instance. This endpoint
        only works

        if `tty` was specified as part of creating and starting the exec instance.

        '
      operationId: ExecResize
      parameters:
      - description: Exec instance ID
        in: path
        name: id
        required: true
        type: string
      - description: Height of the TTY session in characters
        in: query
        name: h
        type: integer
      - description: Width of the TTY session in characters
        in: query
        name: w
        type: integer
      responses:
        200:
          description: No error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: No such exec instance
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Resize an exec instance
      tags:
      - Exec
  /exec/{id}/start:
    post:
      consumes:
      - application/json
      description: 'Starts a previously set up exec instance. If detach is true, this
        endpoint

        returns immediately after starting the command. Otherwise, it sets up an

        interactive session with the command.

        '
      operationId: ExecStart
      parameters:
      - in: body
        name: execStartConfig
        schema:
          example:
            Detach: false
            Tty: false
          properties:
            Detach:
              description: Detach from the command.
              type: boolean
            Tty:
              description: Allocate a pseudo-TTY.
              type: boolean
          title: ExecStartConfig
          type: object
      - description: Exec instance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/vnd.docker.raw-stream
      responses:
        200:
          description: No error
        404:
          description: No such exec instance
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Container is stopped or paused
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Start an exec instance
      tags:
      - Exec
  /images/create:
    post:
      consumes:
      - text/plain
      - application/octet-stream
      description: Create an image by either pulling it from a registry or importing
        it.
      operationId: ImageCreate
      parameters:
      - description: Name of the image to pull. The name may include a tag or digest.
          This parameter may only be used when pulling an image. The pull is cancelled
          if the HTTP connection is closed.
        in: query
        name: fromImage
        type: string
      - description: Source to import. The value may be a URL from which the image
          can be retrieved or `-` to read the image from the request body. This parameter
          may only be used when importing an image.
        in: query
        name: fromSrc
        type: string
      - description: Repository name given to an image when it is imported. The repo
          may include a tag. This parameter may only be used when importing an image.
        in: query
        name: repo
        type: string
      - description: Tag or digest. If empty when pulling an image, this causes all
          tags for the given image to be pulled.
        in: query
        name: tag
        type: string
      - description: Set commit message for imported image.
        in: query
        name: message
        type: string
      - description: Image content if the value `-` has been specified in fromSrc
          query parameter
        in: body
        name: inputImage
        required: false
        schema:
          type: string
      - description: 'A base64url-encoded auth configuration.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        type: string
      - description: 'Apply `Dockerfile` instructions to the image that is created,

          for example: `changes=ENV DEBUG=true`.

          Note that `ENV DEBUG=true` should be URI component encoded.


          Supported `Dockerfile` instructions:

          `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`

          '
        in: query
        items:
          type: string
        name: changes
        type: array
      - default: ''
        description: Platform in the format os[/arch[/variant]]
        in: query
        name: platform
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
        404:
          description: repository does not exist or no read access
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create an image
      tags:
      - Image
  /images/get:
    get:
      description: 'Get a tarball containing all images and metadata for several image

        repositories.


        For each value of the `names` parameter: if it is a specific name and

        tag (e.g. `ubuntu:latest`), then only that image (and its parents) are

        returned; if it is an image ID, similarly only that image (and its parents)

        are returned and there would be no names referenced in the ''repositories''

        file for this image ID.


        For details on the format, see the [export image endpoint](#operation/ImageGet).

        '
      operationId: ImageGetAll
      parameters:
      - description: Image names to filter by
        in: query
        items:
          type: string
        name: names
        type: array
      produces:
      - application/x-tar
      responses:
        200:
          description: no error
          schema:
            format: binary
            type: string
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Export several images
      tags:
      - Image
  /images/json:
    get:
      description: Returns a list of images on the server. Note that it uses a different,
        smaller representation of an image than inspecting a single image.
      operationId: ImageList
      parameters:
      - default: false
        description: Show all images. Only images from a final layer (no children)
          are shown by default.
        in: query
        name: all
        type: boolean
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the images list.


          Available filters:


          - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)

          - `dangling=true`

          - `label=key` or `label="key=value"` of an image label

          - `reference`=(`<image-name>[:<tag>]`)

          - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)

          '
        in: query
        name: filters
        type: string
      - default: false
        description: Show digest information as a `RepoDigests` field on each image.
        in: query
        name: digests
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: Summary image data for the images matching the query
          examples:
            application/json:
            - Containers: 2
              Created: 1474925151
              Id: sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8
              Labels: {}
              ParentId: ''
              RepoDigests:
              - ubuntu@sha256:992069aee4016783df6345315302fa59681aae51a8eeb2f889dea59290f21787
              RepoTags:
              - ubuntu:12.04
              - ubuntu:precise
              SharedSize: 0
              Size: 103579269
              VirtualSize: 103579269
            - Containers: 5
              Created: 1403128455
              Id: sha256:3e314f95dcace0f5e4fd37b10862fe8398e3c60ed36600bc0ca5fda78b087175
              Labels: {}
              ParentId: ''
              RepoDigests:
              - ubuntu@sha256:002fba3e3255af10be97ea26e476692a7ebed0bb074a9ab960b2e7a1526b15d7
              - ubuntu@sha256:68ea0200f0b90df725d99d823905b04cf844f6039ef60c60bf3e019915017bd3
              RepoTags:
              - ubuntu:12.10
              - ubuntu:quantal
              SharedSize: 0
              Size: 172064416
              VirtualSize: 172064416
          schema:
            items:
              $ref: '#/definitions/ImageSummary'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List Images
      tags:
      - Image
  /images/load:
    post:
      consumes:
      - application/x-tar
      description: 'Load a set of images and tags into a repository.


        For details on the format, see the [export image endpoint](#operation/ImageGet).

        '
      operationId: ImageLoad
      parameters:
      - description: Tar archive containing images
        in: body
        name: imagesTarball
        schema:
          format: binary
          type: string
      - default: false
        description: Suppress progress details during load.
        in: query
        name: quiet
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: no error
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Import images
      tags:
      - Image
  /images/prune:
    post:
      operationId: ImagePrune
      parameters:
      - description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\
          \ Available filters:\n\n- `dangling=<boolean>` When set to `true` (or `1`),\
          \ prune only\n   unused *and* untagged images. When set to `false`\n   (or\
          \ `0`), all unused images are pruned.\n- `until=<string>` Prune images created\
          \ before this timestamp. The `<timestamp>` can be Unix timestamps, date\
          \ formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed\
          \ relative to the daemon machine\u2019s time.\n- `label` (`label=<key>`,\
          \ `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune\
          \ images with (or without, in case `label!=...` is used) the specified labels.\n"
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            properties:
              ImagesDeleted:
                description: Images that were deleted
                items:
                  $ref: '#/definitions/ImageDeleteResponseItem'
                type: array
              SpaceReclaimed:
                description: Disk space reclaimed in bytes
                format: int64
                type: integer
            title: ImagePruneResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete unused images
      tags:
      - Image
  /images/search:
    get:
      description: Search for an image on Docker Hub.
      operationId: ImageSearch
      parameters:
      - description: Term to search
        in: query
        name: term
        required: true
        type: string
      - description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to process on the images list. Available filters:


          - `is-automated=(true|false)`

          - `is-official=(true|false)`

          - `stars=<number>` Matches images that has at least ''number'' stars.

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          examples:
            application/json:
            - description: ''
              is_automated: false
              is_official: false
              name: wma55/u1210sshd
              star_count: 0
            - description: ''
              is_automated: false
              is_official: false
              name: jdswinbank/sshd
              star_count: 0
            - description: ''
              is_automated: false
              is_official: false
              name: vgauthier/sshd
              star_count: 0
          schema:
            items:
              properties:
                description:
                  type: string
                is_automated:
                  type: boolean
                is_official:
                  type: boolean
                name:
                  type: string
                star_count:
                  type: integer
              title: ImageSearchResponseItem
              type: object
            type: array
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Search images
      tags:
      - Image
  /images/{name}:
    delete:
      description: 'Remove an image, along with any untagged parent images that were

        referenced by that image.


        Images can''t be removed if they have descendant images, are being

        used by a running container or are being used by a build.

        '
      operationId: ImageDelete
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        type: string
      - default: false
        description: Remove the image even if it is being used by stopped containers
          or has other tags
        in: query
        name: force
        type: boolean
      - default: false
        description: Do not delete untagged parent images
        in: query
        name: noprune
        type: boolean
      produces:
      - application/json
      responses:
        200:
          description: The image was deleted successfully
          examples:
            application/json:
            - Untagged: 3e2f21a89f
            - Deleted: 3e2f21a89f
            - Deleted: 53b4f83ac9
          schema:
            items:
              $ref: '#/definitions/ImageDeleteResponseItem'
            type: array
        404:
          description: No such image
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove an image
      tags:
      - Image
  /images/{name}/get:
    get:
      description: "Get a tarball containing all images and metadata for a repository.\n\
        \nIf `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that\
        \ image (and its parents) are returned. If `name` is an image ID, similarly\
        \ only that image (and its parents) are returned, but with the exclusion of\
        \ the `repositories` file in the tarball, as there were no image names referenced.\n\
        \n### Image tarball format\n\nAn image tarball contains one directory per\
        \ image layer (named using its long ID), each containing these files:\n\n\
        - `VERSION`: currently `1.0` - the file format version\n- `json`: detailed\
        \ layer information, similar to `docker inspect layer_id`\n- `layer.tar`:\
        \ A tarfile containing the filesystem changes in this layer\n\nThe `layer.tar`\
        \ file contains `aufs` style `.wh..wh.aufs` files and directories for storing\
        \ attribute changes and deletions.\n\nIf the tarball defines a repository,\
        \ the tarball should also include a `repositories` file at the root that contains\
        \ a list of repository and tag names mapped to layer IDs.\n\n```json\n{\n\
        \  \"hello-world\": {\n    \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"\
        \n  }\n}\n```\n"
      operationId: ImageGet
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/x-tar
      responses:
        200:
          description: no error
          schema:
            format: binary
            type: string
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Export an image
      tags:
      - Image
  /images/{name}/history:
    get:
      description: Return parent layers of an image.
      operationId: ImageHistory
      parameters:
      - description: Image name or ID
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: List of image layers
          examples:
            application/json:
            - Comment: ''
              Created: 1398108230
              CreatedBy: '/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148
                in /'
              Id: 3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710
              Size: 182964289
              Tags:
              - ubuntu:lucid
              - ubuntu:10.04
            - Comment: ''
              Created: 1398108222
              CreatedBy: '/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com>
                - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t
                lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/'
              Id: 6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8
              Size: 0
              Tags: []
            - Comment: Imported from -
              Created: 1371157430
              CreatedBy: ''
              Id: 511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158
              Size: 0
              Tags:
              - scratch12:latest
              - scratch:latest
          schema:
            items:
              description: individual image layer information in response to ImageHistory
                operation
              properties:
                Comment:
                  type: string
                  x-nullable: false
                Created:
                  format: int64
                  type: integer
                  x-nullable: false
                CreatedBy:
                  type: string
                  x-nullable: false
                Id:
                  type: string
                  x-nullable: false
                Size:
                  format: int64
                  type: integer
                  x-nullable: false
                Tags:
                  items:
                    type: string
                  type: array
              required:
              - Id
              - Created
              - CreatedBy
              - Tags
              - Size
              - Comment
              title: HistoryResponseItem
              type: object
              x-go-name: HistoryResponseItem
            type: array
        404:
          description: No such image
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the history of an image
      tags:
      - Image
  /images/{name}/json:
    get:
      description: Return low-level information about an image.
      operationId: ImageInspect
      parameters:
      - description: Image name or id
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            $ref: '#/definitions/ImageInspect'
        404:
          description: No such image
          examples:
            application/json:
              message: 'No such image: someimage (tag: latest)'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect an image
      tags:
      - Image
  /images/{name}/push:
    post:
      consumes:
      - application/octet-stream
      description: 'Push an image to a registry.


        If you wish to push an image on to a private registry, that image must

        already have a tag which references the registry. For example,

        `registry.example.com/myimage:latest`.


        The push is cancelled if the HTTP connection is closed.

        '
      operationId: ImagePush
      parameters:
      - description: Image name or ID.
        in: path
        name: name
        required: true
        type: string
      - description: The tag to associate with the image on the registry.
        in: query
        name: tag
        type: string
      - description: 'A base64url-encoded auth configuration.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        required: true
        type: string
      responses:
        200:
          description: No error
        404:
          description: No such image
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Push an image
      tags:
      - Image
  /images/{name}/tag:
    post:
      description: Tag an image so that it becomes part of a repository.
      operationId: ImageTag
      parameters:
      - description: Image name or ID to tag.
        in: path
        name: name
        required: true
        type: string
      - description: The repository to tag in. For example, `someuser/someimage`.
        in: query
        name: repo
        type: string
      - description: The name of the new tag.
        in: query
        name: tag
        type: string
      responses:
        201:
          description: No error
        400:
          description: Bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: No such image
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Tag an image
      tags:
      - Image
  /info:
    get:
      operationId: SystemInfo
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            $ref: '#/definitions/SystemInfo'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get system information
      tags:
      - System
  /networks:
    get:
      description: 'Returns a list of networks. For details on the format, see the

        [network inspect endpoint](#operation/NetworkInspect).


        Note that it uses a different, smaller representation of a network than

        inspecting a single network. For example, the list of containers attached

        to the network is not propagated in API versions 1.28 and up.

        '
      operationId: NetworkList
      parameters:
      - description: "JSON encoded value of the filters (a `map[string][]string`)\
          \ to process\non the networks list.\n\nAvailable filters:\n\n- `dangling=<boolean>`\
          \ When set to `true` (or `1`), returns all\n   networks that are not in\
          \ use by a container. When set to `false`\n   (or `0`), only networks that\
          \ are in use by one or more\n   containers are returned.\n- `driver=<driver-name>`\
          \ Matches a network's driver.\n- `id=<network-id>` Matches all or part of\
          \ a network ID.\n- `label=<key>` or `label=<key>=<value>` of a network label.\n\
          - `name=<network-name>` Matches all or part of a network name.\n- `scope=[\"\
          swarm\"|\"global\"|\"local\"]` Filters networks by scope (`swarm`, `global`,\
          \ or `local`).\n- `type=[\"custom\"|\"builtin\"]` Filters networks by type.\
          \ The `custom` keyword returns all user-defined networks.\n"
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          examples:
            application/json:
            - Attachable: false
              Created: '2016-10-19T06:21:00.416543526Z'
              Driver: bridge
              EnableIPv6: false
              IPAM:
                Config:
                - Subnet: 172.17.0.0/16
                Driver: default
              Id: f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566
              Ingress: false
              Internal: false
              Name: bridge
              Options:
                com.docker.network.bridge.default_bridge: 'true'
                com.docker.network.bridge.enable_icc: 'true'
                com.docker.network.bridge.enable_ip_masquerade: 'true'
                com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
                com.docker.network.bridge.name: docker0
                com.docker.network.driver.mtu: '1500'
              Scope: local
            - Attachable: false
              Containers: {}
              Created: '0001-01-01T00:00:00Z'
              Driver: 'null'
              EnableIPv6: false
              IPAM:
                Config: []
                Driver: default
              Id: e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794
              Ingress: false
              Internal: false
              Name: none
              Options: {}
              Scope: local
            - Attachable: false
              Containers: {}
              Created: '0001-01-01T00:00:00Z'
              Driver: host
              EnableIPv6: false
              IPAM:
                Config: []
                Driver: default
              Id: 13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e
              Ingress: false
              Internal: false
              Name: host
              Options: {}
              Scope: local
          schema:
            items:
              $ref: '#/definitions/Network'
            type: array
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List networks
      tags:
      - Network
  /networks/create:
    post:
      consumes:
      - application/json
      operationId: NetworkCreate
      parameters:
      - description: Network configuration
        in: body
        name: networkConfig
        required: true
        schema:
          example:
            Attachable: false
            CheckDuplicate: false
            Driver: bridge
            EnableIPv6: true
            IPAM:
              Config:
              - Gateway: 172.20.10.11
                IPRange: 172.20.10.0/24
                Subnet: 172.20.0.0/16
              - Gateway: 2001:db8:abcd::1011
                Subnet: 2001:db8:abcd::/64
              Driver: default
              Options:
                foo: bar
            Ingress: false
            Internal: true
            Labels:
              com.example.some-label: some-value
              com.example.some-other-label: some-other-value
            Name: isolated_nw
            Options:
              com.docker.network.bridge.default_bridge: 'true'
              com.docker.network.bridge.enable_icc: 'true'
              com.docker.network.bridge.enable_ip_masquerade: 'true'
              com.docker.network.bridge.host_binding_ipv4: 0.0.0.0
              com.docker.network.bridge.name: docker0
              com.docker.network.driver.mtu: '1500'
          properties:
            Attachable:
              description: 'Globally scoped network is manually attachable by regular

                containers from workers in swarm mode.

                '
              type: boolean
            CheckDuplicate:
              description: 'Check for networks with duplicate names. Since Network
                is

                primarily keyed based on a random ID and not on the name, and

                network name is strictly a user-friendly alias to the network

                which is uniquely identified using ID, there is no guaranteed

                way to check for duplicates. CheckDuplicate is there to provide

                a best effort checking of any networks which has the same name

                but it is not guaranteed to catch all name collisions.

                '
              type: boolean
            Driver:
              default: bridge
              description: Name of the network driver plugin to use.
              type: string
            EnableIPv6:
              description: Enable IPv6 on the network.
              type: boolean
            IPAM:
              $ref: '#/definitions/IPAM'
              description: Optional custom IP scheme for the network.
            Ingress:
              description: 'Ingress network is the network which provides the routing-mesh

                in swarm mode.

                '
              type: boolean
            Internal:
              description: Restrict external access to the network.
              type: boolean
            Labels:
              additionalProperties:
                type: string
              description: User-defined key/value metadata.
              type: object
            Name:
              description: The network's name.
              type: string
            Options:
              additionalProperties:
                type: string
              description: Network specific options to be used by the drivers.
              type: object
          required:
          - Name
          title: NetworkCreateRequest
          type: object
      produces:
      - application/json
      responses:
        201:
          description: No error
          schema:
            example:
              Id: 22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30
              Warning: ''
            properties:
              Id:
                description: The ID of the created network.
                type: string
              Warning:
                type: string
            title: NetworkCreateResponse
            type: object
        403:
          description: operation not supported for pre-defined networks
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: plugin not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a network
      tags:
      - Network
  /networks/prune:
    post:
      operationId: NetworkPrune
      parameters:
      - description: "Filters to process on the prune list, encoded as JSON (a `map[string][]string`).\n\
          \nAvailable filters:\n- `until=<timestamp>` Prune networks created before\
          \ this timestamp. The `<timestamp>` can be Unix timestamps, date formatted\
          \ timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative\
          \ to the daemon machine\u2019s time.\n- `label` (`label=<key>`, `label=<key>=<value>`,\
          \ `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without,\
          \ in case `label!=...` is used) the specified labels.\n"
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            properties:
              NetworksDeleted:
                description: Networks that were deleted
                items:
                  type: string
                type: array
            title: NetworkPruneResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete unused networks
      tags:
      - Network
  /networks/{id}:
    delete:
      operationId: NetworkDelete
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        type: string
      responses:
        204:
          description: No error
        403:
          description: operation not supported for pre-defined networks
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such network
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove a network
      tags:
      - Network
    get:
      operationId: NetworkInspect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Detailed inspect output for troubleshooting
        in: query
        name: verbose
        type: boolean
      - description: Filter the network by scope (swarm, global, or local)
        in: query
        name: scope
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            $ref: '#/definitions/Network'
        404:
          description: Network not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a network
      tags:
      - Network
  /networks/{id}/connect:
    post:
      consumes:
      - application/json
      operationId: NetworkConnect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: container
        required: true
        schema:
          example:
            Container: 3613f73ba0e4
            EndpointConfig:
              IPAMConfig:
                IPv4Address: 172.24.56.89
                IPv6Address: 2001:db8::5689
          properties:
            Container:
              description: The ID or name of the container to connect to the network.
              type: string
            EndpointConfig:
              $ref: '#/definitions/EndpointSettings'
          title: NetworkDisconnectRequest
          type: object
      responses:
        200:
          description: No error
        403:
          description: Operation not supported for swarm scoped networks
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Network or container not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Connect a container to a network
      tags:
      - Network
  /networks/{id}/disconnect:
    post:
      consumes:
      - application/json
      operationId: NetworkDisconnect
      parameters:
      - description: Network ID or name
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: container
        required: true
        schema:
          properties:
            Container:
              description: 'The ID or name of the container to disconnect from the
                network.

                '
              type: string
            Force:
              description: 'Force the container to disconnect from the network.

                '
              type: boolean
          title: NetworkConnectRequest
          type: object
      responses:
        200:
          description: No error
        403:
          description: Operation not supported for swarm scoped networks
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: Network or container not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Disconnect a container from a network
      tags:
      - Network
  /nodes:
    get:
      operationId: NodeList
      parameters:
      - description: 'Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).


          Available filters:

          - `id=<node id>`

          - `label=<engine label>`

          - `membership=`(`accepted`|`pending`)`

          - `name=<node name>`

          - `node.label=<node label>`

          - `role=`(`manager`|`worker`)`

          '
        in: query
        name: filters
        type: string
      responses:
        200:
          description: no error
          schema:
            items:
              $ref: '#/definitions/Node'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List nodes
      tags:
      - Node
  /nodes/{id}:
    delete:
      operationId: NodeDelete
      parameters:
      - description: The ID or name of the node
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Force remove a node from the swarm
        in: query
        name: force
        type: boolean
      responses:
        200:
          description: no error
        404:
          description: no such node
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a node
      tags:
      - Node
    get:
      operationId: NodeInspect
      parameters:
      - description: The ID or name of the node
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Node'
        404:
          description: no such node
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a node
      tags:
      - Node
  /nodes/{id}/update:
    post:
      operationId: NodeUpdate
      parameters:
      - description: The ID of the node
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: body
        schema:
          $ref: '#/definitions/NodeSpec'
      - description: 'The version number of the node object being updated. This is
          required

          to avoid conflicting writes.

          '
        format: int64
        in: query
        name: version
        required: true
        type: integer
      responses:
        200:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such node
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a node
      tags:
      - Node
  /plugins:
    get:
      description: Returns information about installed plugins.
      operationId: PluginList
      parameters:
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the plugin list.


          Available filters:


          - `capability=<capability name>`

          - `enable=<true>|<false>`

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            items:
              $ref: '#/definitions/Plugin'
            type: array
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List plugins
      tags:
      - Plugin
  /plugins/create:
    post:
      consumes:
      - application/x-tar
      operationId: PluginCreate
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: query
        name: name
        required: true
        type: string
      - description: Path to tar containing plugin rootfs and manifest
        in: body
        name: tarContext
        schema:
          format: binary
          type: string
      responses:
        204:
          description: no error
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a plugin
      tags:
      - Plugin
  /plugins/privileges:
    get:
      operationId: GetPluginPrivileges
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: query
        name: remote
        required: true
        type: string
      responses:
        200:
          description: no error
          schema:
            example:
            - Description: ''
              Name: network
              Value:
              - host
            - Description: ''
              Name: mount
              Value:
              - /data
            - Description: ''
              Name: device
              Value:
              - /dev/cpu_dma_latency
            items:
              $ref: '#/definitions/PluginPrivilege'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get plugin privileges
      tags:
      - Plugin
  /plugins/pull:
    post:
      description: 'Pulls and installs a plugin. After the plugin is installed, it
        can be

        enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).

        '
      operationId: PluginPull
      parameters:
      - description: 'Remote reference for plugin to install.


          The `:latest` tag is optional, and is used as the default if omitted.

          '
        in: query
        name: remote
        required: true
        type: string
      - description: 'Local name for the pulled plugin.


          The `:latest` tag is optional, and is used as the default if omitted.

          '
        in: query
        name: name
        required: false
        type: string
      - description: 'A base64url-encoded auth configuration to use when pulling a
          plugin

          from a registry.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        type: string
      - in: body
        name: body
        schema:
          example:
          - Description: ''
            Name: network
            Value:
            - host
          - Description: ''
            Name: mount
            Value:
            - /data
          - Description: ''
            Name: device
            Value:
            - /dev/cpu_dma_latency
          items:
            $ref: '#/definitions/PluginPrivilege'
          type: array
      produces:
      - application/json
      responses:
        204:
          description: no error
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Install a plugin
      tags:
      - Plugin
  /plugins/{name}:
    delete:
      operationId: PluginDelete
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      - default: false
        description: 'Disable the plugin before removing. This may result in issues
          if the

          plugin is in use by a container.

          '
        in: query
        name: force
        type: boolean
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Plugin'
        404:
          description: plugin is not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove a plugin
      tags:
      - Plugin
  /plugins/{name}/disable:
    post:
      operationId: PluginDisable
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      responses:
        200:
          description: no error
        404:
          description: plugin is not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Disable a plugin
      tags:
      - Plugin
  /plugins/{name}/enable:
    post:
      operationId: PluginEnable
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      - default: 0
        description: Set the HTTP client timeout (in seconds)
        in: query
        name: timeout
        type: integer
      responses:
        200:
          description: no error
        404:
          description: plugin is not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Enable a plugin
      tags:
      - Plugin
  /plugins/{name}/json:
    get:
      operationId: PluginInspect
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Plugin'
        404:
          description: plugin is not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a plugin
      tags:
      - Plugin
  /plugins/{name}/push:
    post:
      description: 'Push a plugin to the registry.

        '
      operationId: PluginPush
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      responses:
        200:
          description: no error
        404:
          description: plugin not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Push a plugin
      tags:
      - Plugin
  /plugins/{name}/set:
    post:
      consumes:
      - application/json
      operationId: PluginSet
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      - in: body
        name: body
        schema:
          example:
          - DEBUG=1
          items:
            type: string
          type: array
      responses:
        204:
          description: No error
        404:
          description: Plugin not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Configure a plugin
      tags:
      - Plugin
  /plugins/{name}/upgrade:
    post:
      operationId: PluginUpgrade
      parameters:
      - description: 'The name of the plugin. The `:latest` tag is optional, and is
          the

          default if omitted.

          '
        in: path
        name: name
        required: true
        type: string
      - description: 'Remote reference to upgrade to.


          The `:latest` tag is optional, and is used as the default if omitted.

          '
        in: query
        name: remote
        required: true
        type: string
      - description: 'A base64url-encoded auth configuration to use when pulling a
          plugin

          from a registry.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        type: string
      - in: body
        name: body
        schema:
          example:
          - Description: ''
            Name: network
            Value:
            - host
          - Description: ''
            Name: mount
            Value:
            - /data
          - Description: ''
            Name: device
            Value:
            - /dev/cpu_dma_latency
          items:
            $ref: '#/definitions/PluginPrivilege'
          type: array
      responses:
        204:
          description: no error
        404:
          description: plugin not installed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Upgrade a plugin
      tags:
      - Plugin
  /secrets:
    get:
      operationId: SecretList
      parameters:
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the secrets list.


          Available filters:


          - `id=<secret id>`

          - `label=<key> or label=<key>=value`

          - `name=<secret name>`

          - `names=<secret name>`

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            example:
            - CreatedAt: '2017-07-20T13:55:28.678958722Z'
              ID: blt1owaxmitz71s9v5zh81zun
              Spec:
                Driver:
                  Name: secret-bucket
                  Options:
                    OptionA: value for driver option A
                    OptionB: value for driver option B
                Labels:
                  some.label: some.value
                Name: mysql-passwd
              UpdatedAt: '2017-07-20T13:55:28.678958722Z'
              Version:
                Index: 85
            - CreatedAt: '2016-11-05T01:20:17.327670065Z'
              ID: ktnbjxoalbkvbvedmg1urrz8h
              Spec:
                Labels:
                  foo: bar
                Name: app-dev.crt
              UpdatedAt: '2016-11-05T01:20:17.327670065Z'
              Version:
                Index: 11
            items:
              $ref: '#/definitions/Secret'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List secrets
      tags:
      - Secret
  /secrets/create:
    post:
      consumes:
      - application/json
      operationId: SecretCreate
      parameters:
      - in: body
        name: body
        schema:
          allOf:
          - $ref: '#/definitions/SecretSpec'
          - example:
              Data: VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg==
              Driver:
                Name: secret-bucket
                Options:
                  OptionA: value for driver option A
                  OptionB: value for driver option B
              Labels:
                foo: bar
              Name: app-key.crt
            type: object
      produces:
      - application/json
      responses:
        201:
          description: no error
          schema:
            $ref: '#/definitions/IdResponse'
        409:
          description: name conflicts with an existing object
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a secret
      tags:
      - Secret
  /secrets/{id}:
    delete:
      operationId: SecretDelete
      parameters:
      - description: ID of the secret
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        204:
          description: no error
        404:
          description: secret not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a secret
      tags:
      - Secret
    get:
      operationId: SecretInspect
      parameters:
      - description: ID of the secret
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          examples:
            application/json:
              CreatedAt: '2016-11-05T01:20:17.327670065Z'
              ID: ktnbjxoalbkvbvedmg1urrz8h
              Spec:
                Driver:
                  Name: secret-bucket
                  Options:
                    OptionA: value for driver option A
                    OptionB: value for driver option B
                Labels:
                  foo: bar
                Name: app-dev.crt
              UpdatedAt: '2016-11-05T01:20:17.327670065Z'
              Version:
                Index: 11
          schema:
            $ref: '#/definitions/Secret'
        404:
          description: secret not found
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a secret
      tags:
      - Secret
  /secrets/{id}/update:
    post:
      operationId: SecretUpdate
      parameters:
      - description: The ID or name of the secret
        in: path
        name: id
        required: true
        type: string
      - description: 'The spec of the secret to update. Currently, only the Labels
          field

          can be updated. All other fields must remain unchanged from the

          [SecretInspect endpoint](#operation/SecretInspect) response values.

          '
        in: body
        name: body
        schema:
          $ref: '#/definitions/SecretSpec'
      - description: 'The version number of the secret object being updated. This
          is

          required to avoid conflicting writes.

          '
        format: int64
        in: query
        name: version
        required: true
        type: integer
      responses:
        200:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such secret
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a Secret
      tags:
      - Secret
  /services:
    get:
      operationId: ServiceList
      parameters:
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the services list.


          Available filters:


          - `id=<service id>`

          - `label=<service label>`

          - `mode=["replicated"|"global"]`

          - `name=<service name>`

          '
        in: query
        name: filters
        type: string
      - description: 'Include service status, with count of running and desired tasks.

          '
        in: query
        name: status
        type: boolean
      responses:
        200:
          description: no error
          schema:
            items:
              $ref: '#/definitions/Service'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List services
      tags:
      - Service
  /services/create:
    post:
      consumes:
      - application/json
      operationId: ServiceCreate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/ServiceSpec'
          - example:
              EndpointSpec:
                Ports:
                - Protocol: tcp
                  PublishedPort: 8080
                  TargetPort: 80
              Labels:
                foo: bar
              Mode:
                Replicated:
                  Replicas: 4
              Name: web
              RollbackConfig:
                Delay: 1000000000
                FailureAction: pause
                MaxFailureRatio: 0.15
                Monitor: 15000000000
                Parallelism: 1
              TaskTemplate:
                ContainerSpec:
                  DNSConfig:
                    Nameservers:
                    - 8.8.8.8
                    Options:
                    - timeout:3
                    Search:
                    - example.org
                  Hosts:
                  - 10.10.10.10 host1
                  - ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2
                  Image: nginx:alpine
                  Mounts:
                  - ReadOnly: true
                    Source: web-data
                    Target: /usr/share/nginx/html
                    Type: volume
                    VolumeOptions:
                      DriverConfig: {}
                      Labels:
                        com.example.something: something-value
                  Secrets:
                  - File:
                      GID: '33'
                      Mode: 384
                      Name: www.example.org.key
                      UID: '33'
                    SecretID: fpjqlhnwb19zds35k8wn80lq9
                    SecretName: example_org_domain_key
                  User: '33'
                LogDriver:
                  Name: json-file
                  Options:
                    max-file: '3'
                    max-size: 10M
                Placement: {}
                Resources:
                  Limits:
                    MemoryBytes: 104857600
                  Reservations: {}
                RestartPolicy:
                  Condition: on-failure
                  Delay: 10000000000
                  MaxAttempts: 10
              UpdateConfig:
                Delay: 1000000000
                FailureAction: pause
                MaxFailureRatio: 0.15
                Monitor: 15000000000
                Parallelism: 2
            type: object
      - description: 'A base64url-encoded auth configuration for pulling from private

          registries.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        type: string
      produces:
      - application/json
      responses:
        201:
          description: no error
          schema:
            example:
              ID: ak7w3gjqoa3kuz8xcpnyy0pvl
              Warning: 'unable to pin image doesnotexist:latest to digest: image library/doesnotexist:latest
                not found'
            properties:
              ID:
                description: The ID of the created service.
                type: string
              Warning:
                description: Optional warning message
                type: string
            title: ServiceCreateResponse
            type: object
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        403:
          description: network is not eligible for services
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: name conflicts with an existing service
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a service
      tags:
      - Service
  /services/{id}:
    delete:
      operationId: ServiceDelete
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        type: string
      responses:
        200:
          description: no error
        404:
          description: no such service
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete a service
      tags:
      - Service
    get:
      operationId: ServiceInspect
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Fill empty fields with default values.
        in: query
        name: insertDefaults
        type: boolean
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Service'
        404:
          description: no such service
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a service
      tags:
      - Service
  /services/{id}/logs:
    get:
      description: 'Get `stdout` and `stderr` logs from a service. See also

        [`/containers/{id}/logs`](#operation/ContainerLogs).


        **Note**: This endpoint works only for services with the `local`,

        `json-file` or `journald` logging drivers.

        '
      operationId: ServiceLogs
      parameters:
      - description: ID or name of the service
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Show service context and extra details provided to logs.
        in: query
        name: details
        type: boolean
      - default: false
        description: Keep connection after returning logs.
        in: query
        name: follow
        type: boolean
      - default: false
        description: Return logs from `stdout`
        in: query
        name: stdout
        type: boolean
      - default: false
        description: Return logs from `stderr`
        in: query
        name: stderr
        type: boolean
      - default: 0
        description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        type: integer
      - default: false
        description: Add timestamps to every log line
        in: query
        name: timestamps
        type: boolean
      - default: all
        description: 'Only return this number of log lines from the end of the logs.

          Specify as an integer or `all` to output all log lines.

          '
        in: query
        name: tail
        type: string
      responses:
        200:
          description: logs returned as a stream in response body
          schema:
            format: binary
            type: string
        404:
          description: no such service
          examples:
            application/json:
              message: 'No such service: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get service logs
      tags:
      - Service
  /services/{id}/update:
    post:
      consumes:
      - application/json
      operationId: ServiceUpdate
      parameters:
      - description: ID or name of service.
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/ServiceSpec'
          - example:
              EndpointSpec:
                Mode: vip
              Mode:
                Replicated:
                  Replicas: 1
              Name: top
              RollbackConfig:
                Delay: 1000000000
                FailureAction: pause
                MaxFailureRatio: 0.15
                Monitor: 15000000000
                Parallelism: 1
              TaskTemplate:
                ContainerSpec:
                  Args:
                  - top
                  Image: busybox
                ForceUpdate: 0
                Placement: {}
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: any
                  MaxAttempts: 0
              UpdateConfig:
                Delay: 1000000000
                FailureAction: pause
                MaxFailureRatio: 0.15
                Monitor: 15000000000
                Parallelism: 2
            type: object
      - description: 'The version number of the service object being updated. This
          is

          required to avoid conflicting writes.

          This version number should be the value as currently set on the

          service *before* the update. You can find the current version by

          calling `GET /services/{id}`

          '
        in: query
        name: version
        required: true
        type: integer
      - default: spec
        description: 'If the `X-Registry-Auth` header is not specified, this parameter

          indicates where to find registry authorization credentials.

          '
        enum:
        - spec
        - previous-spec
        in: query
        name: registryAuthFrom
        type: string
      - description: 'Set to this parameter to `previous` to cause a server-side rollback

          to the previous service spec. The supplied spec will be ignored in

          this case.

          '
        in: query
        name: rollback
        type: string
      - description: 'A base64url-encoded auth configuration for pulling from private

          registries.


          Refer to the [authentication section](#section/Authentication) for

          details.

          '
        in: header
        name: X-Registry-Auth
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/ServiceUpdateResponse'
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        404:
          description: no such service
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a service
      tags:
      - Service
  /session:
    post:
      description: 'Start a new interactive session with a server. Session allows
        server to

        call back to the client for advanced capabilities.


        ### Hijacking


        This endpoint hijacks the HTTP connection to HTTP2 transport that allows

        the client to expose gPRC services on that connection.


        For example, the client sends this request to upgrade the connection:


        ```

        POST /session HTTP/1.1

        Upgrade: h2c

        Connection: Upgrade

        ```


        The Docker daemon responds with a `101 UPGRADED` response follow with

        the raw stream:


        ```

        HTTP/1.1 101 UPGRADED

        Connection: Upgrade

        Upgrade: h2c

        ```

        '
      operationId: Session
      produces:
      - application/vnd.docker.raw-stream
      responses:
        101:
          description: no error, hijacking successful
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Initialize interactive session
      tags:
      - Session
  /swarm:
    get:
      operationId: SwarmInspect
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Swarm'
        404:
          description: no such swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect swarm
      tags:
      - Swarm
  /swarm/init:
    post:
      operationId: SwarmInit
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            AdvertiseAddr: 192.168.1.1:2377
            DataPathPort: 4789
            DefaultAddrPool:
            - 10.10.0.0/8
            - 20.20.0.0/8
            ForceNewCluster: false
            ListenAddr: 0.0.0.0:2377
            Spec:
              CAConfig: {}
              Dispatcher: {}
              EncryptionConfig:
                AutoLockManagers: false
              Orchestration: {}
              Raft: {}
            SubnetSize: 24
          properties:
            AdvertiseAddr:
              description: 'Externally reachable address advertised to other nodes.
                This

                can either be an address/port combination in the form

                `192.168.1.1:4567`, or an interface followed by a port number,

                like `eth0:4567`. If the port number is omitted, the port

                number from the listen address is used. If `AdvertiseAddr` is

                not specified, it will be automatically detected when possible.

                '
              type: string
            DataPathAddr:
              description: 'Address or interface to use for data path traffic (format:

                `<ip|interface>`), for example,  `192.168.1.1`, or an interface,

                like `eth0`. If `DataPathAddr` is unspecified, the same address

                as `AdvertiseAddr` is used.


                The `DataPathAddr` specifies the address that global scope

                network drivers will publish towards other  nodes in order to

                reach the containers running on this node. Using this parameter

                it is possible to separate the container data traffic from the

                management traffic of the cluster.

                '
              type: string
            DataPathPort:
              description: 'DataPathPort specifies the data path port number for data
                traffic.

                Acceptable port range is 1024 to 49151.

                if no port is set or is set to 0, default port 4789 will be used.

                '
              format: uint32
              type: integer
            DefaultAddrPool:
              description: 'Default Address Pool specifies default subnet pools for
                global

                scope networks.

                '
              items:
                example:
                - 10.10.0.0/16
                - 20.20.0.0/16
                type: string
              type: array
            ForceNewCluster:
              description: Force creation of a new swarm.
              type: boolean
            ListenAddr:
              description: 'Listen address used for inter-manager communication, as
                well

                as determining the networking interface used for the VXLAN

                Tunnel Endpoint (VTEP). This can either be an address/port

                combination in the form `192.168.1.1:4567`, or an interface

                followed by a port number, like `eth0:4567`. If the port number

                is omitted, the default swarm listening port is used.

                '
              type: string
            Spec:
              $ref: '#/definitions/SwarmSpec'
            SubnetSize:
              description: 'SubnetSize specifies the subnet size of the networks created

                from the default subnet pool.

                '
              format: uint32
              type: integer
          title: SwarmInitRequest
          type: object
      produces:
      - application/json
      - text/plain
      responses:
        200:
          description: no error
          schema:
            description: The node ID
            example: 7v2t30z9blmxuhnyo6s4cpenp
            type: string
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is already part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Initialize a new swarm
      tags:
      - Swarm
  /swarm/join:
    post:
      operationId: SwarmJoin
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            AdvertiseAddr: 192.168.1.1:2377
            JoinToken: SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2
            ListenAddr: 0.0.0.0:2377
            RemoteAddrs:
            - node1:2377
          properties:
            AdvertiseAddr:
              description: 'Externally reachable address advertised to other nodes.
                This

                can either be an address/port combination in the form

                `192.168.1.1:4567`, or an interface followed by a port number,

                like `eth0:4567`. If the port number is omitted, the port

                number from the listen address is used. If `AdvertiseAddr` is

                not specified, it will be automatically detected when possible.

                '
              type: string
            DataPathAddr:
              description: 'Address or interface to use for data path traffic (format:

                `<ip|interface>`), for example,  `192.168.1.1`, or an interface,

                like `eth0`. If `DataPathAddr` is unspecified, the same addres

                as `AdvertiseAddr` is used.


                The `DataPathAddr` specifies the address that global scope

                network drivers will publish towards other nodes in order to

                reach the containers running on this node. Using this parameter

                it is possible to separate the container data traffic from the

                management traffic of the cluster.

                '
              type: string
            JoinToken:
              description: Secret token for joining this swarm.
              type: string
            ListenAddr:
              description: 'Listen address used for inter-manager communication if
                the node

                gets promoted to manager, as well as determining the networking

                interface used for the VXLAN Tunnel Endpoint (VTEP).

                '
              type: string
            RemoteAddrs:
              description: 'Addresses of manager nodes already participating in the
                swarm.

                '
              items:
                type: string
              type: array
          title: SwarmJoinRequest
          type: object
      responses:
        200:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is already part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Join an existing swarm
      tags:
      - Swarm
  /swarm/leave:
    post:
      operationId: SwarmLeave
      parameters:
      - default: false
        description: 'Force leave swarm, even if this is the last manager or that
          it will

          break the cluster.

          '
        in: query
        name: force
        type: boolean
      responses:
        200:
          description: no error
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Leave a swarm
      tags:
      - Swarm
  /swarm/unlock:
    post:
      consumes:
      - application/json
      operationId: SwarmUnlock
      parameters:
      - in: body
        name: body
        required: true
        schema:
          example:
            UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
          properties:
            UnlockKey:
              description: The swarm's unlock key.
              type: string
          title: SwarmUnlockRequest
          type: object
      produces:
      - application/json
      responses:
        200:
          description: no error
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Unlock a locked manager
      tags:
      - Swarm
  /swarm/unlockkey:
    get:
      consumes:
      - application/json
      operationId: SwarmUnlockkey
      responses:
        200:
          description: no error
          schema:
            example:
              UnlockKey: SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8
            properties:
              UnlockKey:
                description: The swarm's unlock key.
                type: string
            title: UnlockKeyResponse
            type: object
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get the unlock key
      tags:
      - Swarm
  /swarm/update:
    post:
      operationId: SwarmUpdate
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/SwarmSpec'
      - description: 'The version number of the swarm object being updated. This is

          required to avoid conflicting writes.

          '
        format: int64
        in: query
        name: version
        required: true
        type: integer
      - default: false
        description: Rotate the worker join token.
        in: query
        name: rotateWorkerToken
        type: boolean
      - default: false
        description: Rotate the manager join token.
        in: query
        name: rotateManagerToken
        type: boolean
      - default: false
        description: Rotate the manager unlock key.
        in: query
        name: rotateManagerUnlockKey
        type: boolean
      responses:
        200:
          description: no error
        400:
          description: bad parameter
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Update a swarm
      tags:
      - Swarm
  /system/df:
    get:
      operationId: SystemDataUsage
      responses:
        200:
          description: no error
          schema:
            example:
              BuildCache:
              - CreatedAt: '2021-06-28T13:31:01.474619385Z'
                Description: pulled from docker.io/library/debian@sha256:234cb88d3020898631af0ccbbcca9a66ae7306ecd30c9720690858c1b007d2a0
                ID: hw53o5aio51xtltp5xjp8v7fx
                InUse: false
                LastUsedAt: '2021-07-07T22:02:32.738075951Z'
                Parent: ''
                Shared: true
                Size: 0
                Type: regular
                UsageCount: 26
              - CreatedAt: '2021-06-28T13:31:03.002625487Z'
                Description: mount / from exec /bin/sh -c echo 'Binary::apt::APT::Keep-Downloaded-Packages
                  "true";' > /etc/apt/apt.conf.d/keep-cache
                ID: ndlpt0hhvkqcdfkputsk4cq9c
                InUse: false
                LastUsedAt: '2021-07-07T22:02:32.773909517Z'
                Parent: ndlpt0hhvkqcdfkputsk4cq9c
                Shared: true
                Size: 51
                Type: regular
                UsageCount: 26
              Containers:
              - Command: top
                Created: 1472592424
                HostConfig:
                  NetworkMode: default
                Id: e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148
                Image: busybox
                ImageID: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                Labels: {}
                Mounts: []
                Names:
                - /top
                NetworkSettings:
                  Networks:
                    bridge:
                      Aliases: null
                      EndpointID: 8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a
                      Gateway: 172.18.0.1
                      GlobalIPv6Address: ''
                      GlobalIPv6PrefixLen: 0
                      IPAMConfig: null
                      IPAddress: 172.18.0.2
                      IPPrefixLen: 16
                      IPv6Gateway: ''
                      Links: null
                      MacAddress: 02:42:ac:12:00:02
                      NetworkID: d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92
                Ports: []
                SizeRootFs: 1092588
                State: exited
                Status: Exited (0) 56 minutes ago
              Images:
              - Containers: 1
                Created: 1466724217
                Id: sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749
                Labels: {}
                ParentId: ''
                RepoDigests:
                - busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6
                RepoTags:
                - busybox:latest
                SharedSize: 0
                Size: 1092588
                VirtualSize: 1092588
              LayersSize: 1092588
              Volumes:
              - Driver: local
                Labels: null
                Mountpoint: /var/lib/docker/volumes/my-volume/_data
                Name: my-volume
                Options: null
                Scope: local
                UsageData:
                  RefCount: 2
                  Size: 10920104
            properties:
              BuildCache:
                items:
                  $ref: '#/definitions/BuildCache'
                type: array
              Containers:
                items:
                  $ref: '#/definitions/ContainerSummary'
                type: array
              Images:
                items:
                  $ref: '#/definitions/ImageSummary'
                type: array
              LayersSize:
                format: int64
                type: integer
              Volumes:
                items:
                  $ref: '#/definitions/Volume'
                type: array
            title: SystemDataUsageResponse
            type: object
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get data usage information
      tags:
      - System
  /tasks:
    get:
      operationId: TaskList
      parameters:
      - description: 'A JSON encoded value of the filters (a `map[string][]string`)
          to

          process on the tasks list.


          Available filters:


          - `desired-state=(running | shutdown | accepted)`

          - `id=<task id>`

          - `label=key` or `label="key=value"`

          - `name=<task name>`

          - `node=<node id or name>`

          - `service=<service name>`

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            example:
            - CreatedAt: '2016-06-07T21:07:31.171892745Z'
              DesiredState: running
              ID: 0kzzo1i0y4jz6027t0k7aezc7
              NetworksAttachments:
              - Addresses:
                - 10.255.0.10/16
                Network:
                  CreatedAt: '2016-06-07T20:31:11.912919752Z'
                  DriverState:
                    Name: overlay
                    Options:
                      com.docker.network.driver.overlay.vxlanid_list: '256'
                  ID: 4qvuz4ko70xaltuqbt8956gd1
                  IPAMOptions:
                    Configs:
                    - Gateway: 10.255.0.1
                      Subnet: 10.255.0.0/16
                    Driver:
                      Name: default
                  Spec:
                    DriverConfiguration: {}
                    IPAMOptions:
                      Configs:
                      - Gateway: 10.255.0.1
                        Subnet: 10.255.0.0/16
                      Driver: {}
                    Labels:
                      com.docker.swarm.internal: 'true'
                    Name: ingress
                  UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                  Version:
                    Index: 18
              NodeID: 60gvrl6tm78dmak4yl7srz94v
              ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
              Slot: 1
              Spec:
                ContainerSpec:
                  Image: redis
                Placement: {}
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: any
                  MaxAttempts: 0
              Status:
                ContainerStatus:
                  ContainerID: e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035
                  PID: 677
                Message: started
                State: running
                Timestamp: '2016-06-07T21:07:31.290032978Z'
              UpdatedAt: '2016-06-07T21:07:31.376370513Z'
              Version:
                Index: 71
            - CreatedAt: '2016-06-07T21:07:30.019104782Z'
              DesiredState: shutdown
              ID: 1yljwbmlr8er2waf8orvqpwms
              Name: hopeful_cori
              NetworksAttachments:
              - Addresses:
                - 10.255.0.5/16
                Network:
                  CreatedAt: '2016-06-07T20:31:11.912919752Z'
                  DriverState:
                    Name: overlay
                    Options:
                      com.docker.network.driver.overlay.vxlanid_list: '256'
                  ID: 4qvuz4ko70xaltuqbt8956gd1
                  IPAMOptions:
                    Configs:
                    - Gateway: 10.255.0.1
                      Subnet: 10.255.0.0/16
                    Driver:
                      Name: default
                  Spec:
                    DriverConfiguration: {}
                    IPAMOptions:
                      Configs:
                      - Gateway: 10.255.0.1
                        Subnet: 10.255.0.0/16
                      Driver: {}
                    Labels:
                      com.docker.swarm.internal: 'true'
                    Name: ingress
                  UpdatedAt: '2016-06-07T21:07:29.955277358Z'
                  Version:
                    Index: 18
              NodeID: 60gvrl6tm78dmak4yl7srz94v
              ServiceID: 9mnpnzenvg8p8tdbtq4wvbkcz
              Slot: 1
              Spec:
                ContainerSpec:
                  Image: redis
                Placement: {}
                Resources:
                  Limits: {}
                  Reservations: {}
                RestartPolicy:
                  Condition: any
                  MaxAttempts: 0
              Status:
                ContainerStatus:
                  ContainerID: 1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213
                Message: shutdown
                State: shutdown
                Timestamp: '2016-06-07T21:07:30.202183143Z'
              UpdatedAt: '2016-06-07T21:07:30.231958098Z'
              Version:
                Index: 30
            items:
              $ref: '#/definitions/Task'
            type: array
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List tasks
      tags:
      - Task
  /tasks/{id}:
    get:
      operationId: TaskInspect
      parameters:
      - description: ID of the task
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/Task'
        404:
          description: no such task
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a task
      tags:
      - Task
  /tasks/{id}/logs:
    get:
      description: 'Get `stdout` and `stderr` logs from a task.

        See also [`/containers/{id}/logs`](#operation/ContainerLogs).


        **Note**: This endpoint works only for services with the `local`,

        `json-file` or `journald` logging drivers.

        '
      operationId: TaskLogs
      parameters:
      - description: ID of the task
        in: path
        name: id
        required: true
        type: string
      - default: false
        description: Show task context and extra details provided to logs.
        in: query
        name: details
        type: boolean
      - default: false
        description: Keep connection after returning logs.
        in: query
        name: follow
        type: boolean
      - default: false
        description: Return logs from `stdout`
        in: query
        name: stdout
        type: boolean
      - default: false
        description: Return logs from `stderr`
        in: query
        name: stderr
        type: boolean
      - default: 0
        description: Only return logs since this time, as a UNIX timestamp
        in: query
        name: since
        type: integer
      - default: false
        description: Add timestamps to every log line
        in: query
        name: timestamps
        type: boolean
      - default: all
        description: 'Only return this number of log lines from the end of the logs.

          Specify as an integer or `all` to output all log lines.

          '
        in: query
        name: tail
        type: string
      responses:
        200:
          description: logs returned as a stream in response body
          schema:
            format: binary
            type: string
        404:
          description: no such task
          examples:
            application/json:
              message: 'No such task: c2ada9df5af8'
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
        503:
          description: node is not part of a swarm
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get task logs
      tags:
      - Task
  /version:
    get:
      description: Returns the version of Docker that is running and various information
        about the system that Docker is running on.
      operationId: SystemVersion
      produces:
      - application/json
      responses:
        200:
          description: no error
          schema:
            $ref: '#/definitions/SystemVersion'
        500:
          description: server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get version
      tags:
      - System
  /volumes:
    get:
      operationId: VolumeList
      parameters:
      - description: "JSON encoded value of the filters (a `map[string][]string`)\
          \ to\nprocess on the volumes list. Available filters:\n\n- `dangling=<boolean>`\
          \ When set to `true` (or `1`), returns all\n   volumes that are not in use\
          \ by a container. When set to `false`\n   (or `0`), only volumes that are\
          \ in use by one or more\n   containers are returned.\n- `driver=<volume-driver-name>`\
          \ Matches volumes based on their driver.\n- `label=<key>` or `label=<key>:<value>`\
          \ Matches volumes based on\n   the presence of a `label` alone or a `label`\
          \ and a value.\n- `name=<volume-name>` Matches all or part of a volume name.\n"
        format: json
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Summary volume data that matches the query
          schema:
            description: Volume list response
            properties:
              Volumes:
                description: List of volumes
                items:
                  $ref: '#/definitions/Volume'
                type: array
                x-nullable: false
              Warnings:
                description: 'Warnings that occurred when fetching the list of volumes.

                  '
                items:
                  type: string
                type: array
                x-nullable: false
            required:
            - Volumes
            - Warnings
            title: VolumeListResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List volumes
      tags:
      - Volume
  /volumes/create:
    post:
      consumes:
      - application/json
      operationId: VolumeCreate
      parameters:
      - description: Volume configuration
        in: body
        name: volumeConfig
        required: true
        schema:
          $ref: '#/definitions/VolumeCreateOptions'
      produces:
      - application/json
      responses:
        201:
          description: The volume was created successfully
          schema:
            $ref: '#/definitions/Volume'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Create a volume
      tags:
      - Volume
  /volumes/prune:
    post:
      operationId: VolumePrune
      parameters:
      - description: 'Filters to process on the prune list, encoded as JSON (a `map[string][]string`).


          Available filters:

          - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`)
          Prune volumes with (or without, in case `label!=...` is used) the specified
          labels.

          '
        in: query
        name: filters
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            properties:
              SpaceReclaimed:
                description: Disk space reclaimed in bytes
                format: int64
                type: integer
              VolumesDeleted:
                description: Volumes that were deleted
                items:
                  type: string
                type: array
            title: VolumePruneResponse
            type: object
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete unused volumes
      tags:
      - Volume
  /volumes/{name}:
    delete:
      description: Instruct the driver to remove the volume.
      operationId: VolumeDelete
      parameters:
      - description: Volume name or ID
        in: path
        name: name
        required: true
        type: string
      - default: false
        description: Force the removal of the volume
        in: query
        name: force
        type: boolean
      responses:
        204:
          description: The volume was removed
        404:
          description: No such volume or volume driver
          schema:
            $ref: '#/definitions/ErrorResponse'
        409:
          description: Volume is in use and cannot be removed
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Remove a volume
      tags:
      - Volume
    get:
      operationId: VolumeInspect
      parameters:
      - description: Volume name or ID
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: No error
          schema:
            $ref: '#/definitions/Volume'
        404:
          description: No such volume
          schema:
            $ref: '#/definitions/ErrorResponse'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Inspect a volume
      tags:
      - Volume
produces:
- application/json
- text/plain
schemes:
- http
- https
swagger: '2.0'
tags:
- description: 'Create and manage containers.

    '
  name: Container
  x-displayName: Containers
- name: Image
  x-displayName: Images
- description: 'Networks are user-defined networks that containers can be attached
    to.

    See the [networking documentation](/network/)

    for more information.

    '
  name: Network
  x-displayName: Networks
- description: 'Create and manage persistent storage that can be attached to containers.

    '
  name: Volume
  x-displayName: Volumes
- description: 'Run new commands inside running containers. Refer to the

    [command-line reference](/engine/reference/commandline/exec/)

    for more information.


    To exec a command in a container, you first need to create an exec instance,

    then start it. These two API endpoints are wrapped up in a single command-line

    command, `docker exec`.

    '
  name: Exec
  x-displayName: Exec
- description: 'Engines can be clustered together in a swarm. Refer to the

    [swarm mode documentation](/engine/swarm/)

    for more information.

    '
  name: Swarm
  x-displayName: Swarm
- description: 'Nodes are instances of the Engine participating in a swarm. Swarm
    mode

    must be enabled for these endpoints to work.

    '
  name: Node
  x-displayName: Nodes
- description: 'Services are the definitions of tasks to run on a swarm. Swarm mode
    must

    be enabled for these endpoints to work.

    '
  name: Service
  x-displayName: Services
- description: 'A task is a container running on a swarm. It is the atomic scheduling
    unit

    of swarm. Swarm mode must be enabled for these endpoints to work.

    '
  name: Task
  x-displayName: Tasks
- description: 'Secrets are sensitive data that can be used by services. Swarm mode
    must

    be enabled for these endpoints to work.

    '
  name: Secret
  x-displayName: Secrets
- description: 'Configs are application configurations that can be used by services.
    Swarm

    mode must be enabled for these endpoints to work.

    '
  name: Config
  x-displayName: Configs
- name: Plugin
  x-displayName: Plugins
- name: System
  x-displayName: System
