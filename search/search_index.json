{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"prefect-docker","text":""},{"location":"#welcome","title":"Welcome!","text":"<p>Prefect integrations for working with Docker.</p> <p>Note! The <code>DockerRegistryCredentials</code> in <code>prefect-docker</code> is a unique block, separate from the <code>DockerRegistry</code> in <code>prefect</code> core. While <code>DockerRegistry</code> implements a few functionality from both <code>DockerHost</code> and <code>DockerRegistryCredentials</code> for convenience, it does not allow much configuration to interact with a Docker host.</p> <p>Do not use <code>DockerRegistry</code> with this collection. Instead, use <code>DockerHost</code> and <code>DockerRegistryCredentials</code>.</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#python-setup","title":"Python setup","text":"<p>Requires an installation of Python 3.7+.</p> <p>We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv.</p> <p>These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>prefect-docker</code> with <code>pip</code>:</p> <pre><code>pip install prefect-docker\n</code></pre> <p>Then, register to view the block on Prefect Cloud:</p> <pre><code>prefect block register -m prefect_docker\n</code></pre> <p>Note, to use the <code>load</code> method on Blocks, you must already have a block document saved through code or saved through the UI.</p>"},{"location":"#pull-image-and-create-start-log-stop-and-remove-docker-container","title":"Pull image, and create, start, log, stop, and remove Docker container","text":"<pre><code>from prefect import flow, get_run_logger\nfrom prefect_docker.images import pull_docker_image\nfrom prefect_docker.containers import (\n    create_docker_container,\n    start_docker_container,\n    get_docker_container_logs,\n    stop_docker_container,\n    remove_docker_container,\n)\n\n\n@flow\ndef docker_flow():\n    logger = get_run_logger()\n    pull_docker_image(\"prefecthq/prefect\", \"latest\")\n    container = create_docker_container(\n        image=\"prefecthq/prefect\", command=\"echo 'hello world!' &amp;&amp; sleep 60\"\n    )\n    start_docker_container(container_id=container.id)\n    logs = get_docker_container_logs(container_id=container.id)\n    logger.info(logs)\n    stop_docker_container(container_id=container.id)\n    remove_docker_container(container_id=container.id)\n    return container\n</code></pre>"},{"location":"#use-a-custom-docker-host-to-create-a-docker-container","title":"Use a custom Docker Host to create a Docker container","text":"<pre><code>from prefect import flow\nfrom prefect_docker import DockerHost\nfrom prefect_docker.containers import create_docker_container\n\n@flow\ndef create_docker_container_flow():\n    docker_host = DockerHost(\n        base_url=\"tcp://127.0.0.1:1234\",\n        max_pool_size=4\n    )\n    container = create_docker_container(\n        docker_host=docker_host,\n        image=\"prefecthq/prefect\",\n        command=\"echo 'hello world!'\"\n    )\n\ncreate_docker_container_flow()\n</code></pre>"},{"location":"#resources","title":"Resources","text":"<p>If you encounter any bugs while using <code>prefect-docker</code>, feel free to open an issue in the prefect-docker repository.</p> <p>If you have any questions or issues while using <code>prefect-docker</code>, you can find help in either the Prefect Discourse forum or the Prefect Slack community.</p> <p>Feel free to \u2b50\ufe0f or watch <code>prefect-docker</code> for updates too!</p>"},{"location":"#development","title":"Development","text":"<p>If you'd like to install a version of <code>prefect-docker</code> for development, clone the repository and perform an editable install with <code>pip</code>:</p> <pre><code>git clone https://github.com/PrefectHQ/prefect-docker.git\n\ncd prefect-docker/\n\npip install -e \".[dev]\"\n\n# Install linting pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"containers/","title":"Containers","text":""},{"location":"containers/#prefect_docker.containers","title":"<code>prefect_docker.containers</code>","text":"<p>Integrations with Docker Containers.</p>"},{"location":"containers/#prefect_docker.containers-classes","title":"Classes","text":""},{"location":"containers/#prefect_docker.containers-functions","title":"Functions","text":""},{"location":"containers/#prefect_docker.containers.create_docker_container","title":"<code>create_docker_container</code>  <code>async</code>","text":"<p>Create a container without starting it. Similar to docker create.</p> <p>Parameters:</p> Name Type Description Default <code>image</code> <code>str</code> <p>The image to run.</p> required <code>command</code> <code>Optional[Union[str, List[str]]]</code> <p>The command(s) to run in the container.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>The name for this container.</p> <code>None</code> <code>detach</code> <code>Optional[bool]</code> <p>Run container in the background.</p> <code>None</code> <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host.</p> <code>None</code> <code>entrypoint</code> <code>Optional[Union[str, List[str]]]</code> <p>The entrypoint for the container.</p> <code>None</code> <code>environment</code> <code>Optional[Union[Dict[str, str], List[str]]]</code> <p>Environment variables to set inside the container, as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"].</p> <code>None</code> <code>**create_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.containers.create</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Container</code> <p>A Docker Container object.</p> <p>Examples:</p> <p>Create a container with the Prefect image. <pre><code>from prefect import flow\nfrom prefect_docker.containers import create_docker_container\n\n@flow\ndef create_docker_container_flow():\n    container = create_docker_container(\n        image=\"prefecthq/prefect\",\n        command=\"echo 'hello world!'\"\n    )\n\ncreate_docker_container_flow()\n</code></pre></p> Source code in <code>prefect_docker/containers.py</code> <pre><code>@task\nasync def create_docker_container(\n    image: str,\n    command: Optional[Union[str, List[str]]] = None,\n    name: Optional[str] = None,\n    detach: Optional[bool] = None,\n    entrypoint: Optional[Union[str, List[str]]] = None,\n    environment: Optional[Union[Dict[str, str], List[str]]] = None,\n    docker_host: Optional[DockerHost] = None,\n    **create_kwargs: Dict[str, Any],\n) -&gt; Container:\n\"\"\"\n    Create a container without starting it. Similar to docker create.\n\n    Args:\n        image: The image to run.\n        command: The command(s) to run in the container.\n        name: The name for this container.\n        detach: Run container in the background.\n        docker_host: Settings for interacting with a Docker host.\n        entrypoint: The entrypoint for the container.\n        environment: Environment variables to set inside the container,\n            as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"].\n        **create_kwargs: Additional keyword arguments to pass to\n            [`client.containers.create`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.create).\n\n    Returns:\n        A Docker Container object.\n\n    Examples:\n        Create a container with the Prefect image.\n        ```python\n        from prefect import flow\n        from prefect_docker.containers import create_docker_container\n\n        @flow\n        def create_docker_container_flow():\n            container = create_docker_container(\n                image=\"prefecthq/prefect\",\n                command=\"echo 'hello world!'\"\n            )\n\n        create_docker_container_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    with (docker_host or DockerHost()).get_client() as client:\n        logger.info(f\"Creating container with {image!r} image.\")\n        container = await run_sync_in_worker_thread(\n            client.containers.create,\n            image=image,\n            command=command,\n            name=name,\n            detach=detach,\n            entrypoint=entrypoint,\n            environment=environment,\n            **create_kwargs,\n        )\n    return container\n</code></pre>"},{"location":"containers/#prefect_docker.containers.get_docker_container_logs","title":"<code>get_docker_container_logs</code>  <code>async</code>","text":"<p>Get logs from this container. Similar to the docker logs command.</p> <p>Parameters:</p> Name Type Description Default <code>container_id</code> <code>str</code> <p>The container ID to pull logs from.</p> required <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host.</p> <code>None</code> <code>**logs_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.containers.get(container_id).logs</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>str</code> <p>The Container's logs.</p> <p>Examples:</p> <p>Gets logs from a container with an ID that starts with \"c157\". <pre><code>from prefect import flow\nfrom prefect_docker.containers import get_docker_container_logs\n\n@flow\ndef get_docker_container_logs_flow():\n    logs = get_docker_container_logs(container_id=\"c157\")\n    return logs\n\nget_docker_container_logs_flow()\n</code></pre></p> Source code in <code>prefect_docker/containers.py</code> <pre><code>@task\nasync def get_docker_container_logs(\n    container_id: str,\n    docker_host: Optional[DockerHost] = None,\n    **logs_kwargs: Dict[str, Any],\n) -&gt; str:\n\"\"\"\n    Get logs from this container. Similar to the docker logs command.\n\n    Args:\n        container_id: The container ID to pull logs from.\n        docker_host: Settings for interacting with a Docker host.\n        **logs_kwargs: Additional keyword arguments to pass to\n            [`client.containers.get(container_id).logs`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.logs).\n\n    Returns:\n        The Container's logs.\n\n    Examples:\n        Gets logs from a container with an ID that starts with \"c157\".\n        ```python\n        from prefect import flow\n        from prefect_docker.containers import get_docker_container_logs\n\n        @flow\n        def get_docker_container_logs_flow():\n            logs = get_docker_container_logs(container_id=\"c157\")\n            return logs\n\n        get_docker_container_logs_flow()\n        ```\n\n    \"\"\"\n    logger = get_run_logger()\n\n    with (docker_host or DockerHost()).get_client() as client:\n        container = await run_sync_in_worker_thread(client.containers.get, container_id)\n        logger.info(f\"Retrieving logs from {container.id!r} container.\")\n        logs = await run_sync_in_worker_thread(container.logs, **logs_kwargs)\n\n    return logs.decode()\n</code></pre>"},{"location":"containers/#prefect_docker.containers.remove_docker_container","title":"<code>remove_docker_container</code>  <code>async</code>","text":"<p>Remove this container. Similar to the docker rm command.</p> <p>Parameters:</p> Name Type Description Default <code>container_id</code> <code>str</code> <p>The container ID to remove.</p> required <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host.</p> <code>None</code> <code>**remove_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.containers.get(container_id).remove</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Container</code> <p>The Docker Container object.</p> <p>Examples:</p> <p>Removes a container with an ID that starts wtih \"c157\". <pre><code>from prefect import flow\nfrom prefect_docker.containers import remove_docker_container\n\n@flow\ndef remove_docker_container_flow():\n    container = remove_docker_container(container_id=\"c157\")\n    return container\n\nremove_docker_container()\n</code></pre></p> Source code in <code>prefect_docker/containers.py</code> <pre><code>@task\nasync def remove_docker_container(\n    container_id: str,\n    docker_host: Optional[DockerHost] = None,\n    **remove_kwargs: Dict[str, Any],\n) -&gt; Container:\n\"\"\"\n    Remove this container. Similar to the docker rm command.\n\n    Args:\n        container_id: The container ID to remove.\n        docker_host: Settings for interacting with a Docker host.\n        **remove_kwargs: Additional keyword arguments to pass to\n            [`client.containers.get(container_id).remove`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.remove).\n\n    Returns:\n        The Docker Container object.\n\n    Examples:\n        Removes a container with an ID that starts wtih \"c157\".\n        ```python\n        from prefect import flow\n        from prefect_docker.containers import remove_docker_container\n\n        @flow\n        def remove_docker_container_flow():\n            container = remove_docker_container(container_id=\"c157\")\n            return container\n\n        remove_docker_container()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    with (docker_host or DockerHost()).get_client() as client:\n        container = await run_sync_in_worker_thread(client.containers.get, container_id)\n        logger.info(f\"Removing container {container.id!r}.\")\n        await run_sync_in_worker_thread(container.remove, **remove_kwargs)\n\n    return container\n</code></pre>"},{"location":"containers/#prefect_docker.containers.start_docker_container","title":"<code>start_docker_container</code>  <code>async</code>","text":"<p>Start this container. Similar to the docker start command.</p> <p>Parameters:</p> Name Type Description Default <code>container_id</code> <code>str</code> <p>The container ID to start.</p> required <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host.</p> <code>None</code> <code>**start_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.containers.get(container_id).start</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Container</code> <p>The Docker Container object.</p> <p>Examples:</p> <p>Start a container with an ID that starts wtih \"c157\". <pre><code>from prefect import flow\nfrom prefect_docker.containers import start_docker_container\n\n@flow\ndef start_docker_container_flow():\n    container = start_docker_container(container_id=\"c157\")\n    return container\n\nstart_docker_container_flow()\n</code></pre></p> Source code in <code>prefect_docker/containers.py</code> <pre><code>@task\nasync def start_docker_container(\n    container_id: str,\n    docker_host: Optional[DockerHost] = None,\n    **start_kwargs: Dict[str, Any],\n) -&gt; Container:\n\"\"\"\n    Start this container. Similar to the docker start command.\n\n    Args:\n        container_id: The container ID to start.\n        docker_host: Settings for interacting with a Docker host.\n        **start_kwargs: Additional keyword arguments to pass to\n            [`client.containers.get(container_id).start`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.start).\n\n    Returns:\n        The Docker Container object.\n\n    Examples:\n        Start a container with an ID that starts wtih \"c157\".\n        ```python\n        from prefect import flow\n        from prefect_docker.containers import start_docker_container\n\n        @flow\n        def start_docker_container_flow():\n            container = start_docker_container(container_id=\"c157\")\n            return container\n\n        start_docker_container_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    with (docker_host or DockerHost()).get_client() as client:\n        container = await run_sync_in_worker_thread(client.containers.get, container_id)\n        logger.info(f\"Starting container {container.id!r}.\")\n        await run_sync_in_worker_thread(container.start, **start_kwargs)\n\n    return container\n</code></pre>"},{"location":"containers/#prefect_docker.containers.stop_docker_container","title":"<code>stop_docker_container</code>  <code>async</code>","text":"<p>Stops a container. Similar to the docker stop command.</p> <p>Parameters:</p> Name Type Description Default <code>container_id</code> <code>str</code> <p>The container ID to stop.</p> required <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host.</p> <code>None</code> <code>**stop_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.containers.get(container_id).stop</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Container</code> <p>The Docker Container object.</p> <p>Examples:</p> <p>Stop a container with an ID that starts wtih \"c157\". <pre><code>from prefect import flow\nfrom prefect_docker.containers import stop_docker_container\n\n@flow\ndef stop_docker_container_flow():\n    container = stop_docker_container(container_id=\"c157\")\n    return container\n\nstop_docker_container_flow()\n</code></pre></p> Source code in <code>prefect_docker/containers.py</code> <pre><code>@task\nasync def stop_docker_container(\n    container_id: str,\n    docker_host: Optional[DockerHost] = None,\n    **stop_kwargs: Dict[str, Any],\n) -&gt; Container:\n\"\"\"\n    Stops a container. Similar to the docker stop command.\n\n    Args:\n        container_id: The container ID to stop.\n        docker_host: Settings for interacting with a Docker host.\n        **stop_kwargs: Additional keyword arguments to pass to\n            [`client.containers.get(container_id).stop`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.stop).\n\n    Returns:\n        The Docker Container object.\n\n    Examples:\n        Stop a container with an ID that starts wtih \"c157\".\n        ```python\n        from prefect import flow\n        from prefect_docker.containers import stop_docker_container\n\n        @flow\n        def stop_docker_container_flow():\n            container = stop_docker_container(container_id=\"c157\")\n            return container\n\n        stop_docker_container_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n\n    with (docker_host or DockerHost()).get_client() as client:\n        container = await run_sync_in_worker_thread(client.containers.get, container_id)\n        logger.info(f\"Stopping container {container.id!r}.\")\n        await run_sync_in_worker_thread(container.stop, **stop_kwargs)\n\n    return container\n</code></pre>"},{"location":"credentials/","title":"Credentials","text":""},{"location":"credentials/#prefect_docker.credentials","title":"<code>prefect_docker.credentials</code>","text":"<p>Module containing docker credentials.</p>"},{"location":"credentials/#prefect_docker.credentials-classes","title":"Classes","text":""},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials","title":"<code>DockerRegistryCredentials</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage credentials for interacting with a Docker Registry.</p> <p>Examples:</p> <p>Log into Docker Registry. <pre><code>from prefect_docker import DockerHost, DockerRegistryCredentials\n\ndocker_host = DockerHost()\ndocker_registry_credentials = DockerRegistryCredentials(\n    username=\"my_username\",\n    password=\"my_password\",\n    registry_url=\"registry.hub.docker.com\",\n)\nwith docker_host.get_client() as client:\n    docker_registry_credentials.login(client)\n</code></pre></p> Source code in <code>prefect_docker/credentials.py</code> <pre><code>class DockerRegistryCredentials(Block):\n\"\"\"\n    Block used to manage credentials for interacting with a Docker Registry.\n\n    Examples:\n        Log into Docker Registry.\n        ```python\n        from prefect_docker import DockerHost, DockerRegistryCredentials\n\n        docker_host = DockerHost()\n        docker_registry_credentials = DockerRegistryCredentials(\n            username=\"my_username\",\n            password=\"my_password\",\n            registry_url=\"registry.hub.docker.com\",\n        )\n        with docker_host.get_client() as client:\n            docker_registry_credentials.login(client)\n        ```\n    \"\"\"\n\n    _block_type_name = \"Docker Registry Credentials\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\"  # noqa\n    _description = \"Store credentials for interacting with a Docker Registry.\"\n\n    username: str = Field(\n        default=..., description=\"The username to log into the registry with.\"\n    )\n    password: SecretStr = Field(\n        default=..., description=\"The password to log into the registry with.\"\n    )\n    registry_url: str = Field(\n        default=...,\n        description=(\n            'The URL to the registry. Generally, \"http\" or \"https\" can be omitted.'\n        ),\n        example=\"registry.hub.docker.com\",\n    )\n    reauth: bool = Field(\n        default=True,\n        description=\"Whether or not to reauthenticate on each interaction.\",\n    )\n\n    async def login(self, client: docker.DockerClient):\n\"\"\"\n        Authenticates a given Docker client with the configured Docker registry.\n\n        Args:\n            client: A Docker Client.\n        \"\"\"\n        logger = get_run_logger()\n        logger.debug(f\"Logging into {self.registry_url}.\")\n        await run_sync_in_worker_thread(\n            client.login,\n            username=self.username,\n            password=self.password.get_secret_value(),\n            registry=self.registry_url,\n            # See https://github.com/docker/docker-py/issues/2256 for information on\n            # the default value for reauth.\n            reauth=self.reauth,\n        )\n</code></pre>"},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials-functions","title":"Functions","text":""},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials.login","title":"<code>login</code>  <code>async</code>","text":"<p>Authenticates a given Docker client with the configured Docker registry.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>docker.DockerClient</code> <p>A Docker Client.</p> required Source code in <code>prefect_docker/credentials.py</code> <pre><code>async def login(self, client: docker.DockerClient):\n\"\"\"\n    Authenticates a given Docker client with the configured Docker registry.\n\n    Args:\n        client: A Docker Client.\n    \"\"\"\n    logger = get_run_logger()\n    logger.debug(f\"Logging into {self.registry_url}.\")\n    await run_sync_in_worker_thread(\n        client.login,\n        username=self.username,\n        password=self.password.get_secret_value(),\n        registry=self.registry_url,\n        # See https://github.com/docker/docker-py/issues/2256 for information on\n        # the default value for reauth.\n        reauth=self.reauth,\n    )\n</code></pre>"},{"location":"host/","title":"Host","text":""},{"location":"host/#prefect_docker.host","title":"<code>prefect_docker.host</code>","text":"<p>Module containing Docker host settings.</p>"},{"location":"host/#prefect_docker.host-classes","title":"Classes","text":""},{"location":"host/#prefect_docker.host.DockerHost","title":"<code>DockerHost</code>","text":"<p>         Bases: <code>Block</code></p> <p>Block used to manage settings for interacting with a Docker host.</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>Optional[str]</code> <p>URL to the Docker server, e.g. <code>unix:///var/run/docker.sock</code> or <code>tcp://127.0.0.1:1234</code>. If this is not set, the client will be configured from environment variables.</p> <code>version</code> <code>str</code> <p>The version of the API to use. Set to auto to automatically detect the server's version.</p> <code>timeout</code> <code>Optional[int]</code> <p>Default timeout for API calls, in seconds.</p> <code>max_pool_size</code> <code>Optional[int]</code> <p>The maximum number of connections to save in the pool.</p> <code>client_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>docker.from_env()</code> or <code>DockerClient</code>.</p> <p>Examples:</p> <p>Get a Docker Host client. <pre><code>from prefect_docker import DockerHost\n\ndocker_host = DockerHost(\nbase_url=\"tcp://127.0.0.1:1234\",\n    max_pool_size=4\n)\nwith docker_host.get_client() as client:\n    ... # Use the client for Docker operations\n</code></pre></p> Source code in <code>prefect_docker/host.py</code> <pre><code>class DockerHost(Block):\n\"\"\"\n    Block used to manage settings for interacting with a Docker host.\n\n    Attributes:\n        base_url: URL to the Docker server, e.g. `unix:///var/run/docker.sock`\n            or `tcp://127.0.0.1:1234`. If this is not set, the client will\n            be configured from environment variables.\n        version: The version of the API to use. Set to auto to\n            automatically detect the server's version.\n        timeout: Default timeout for API calls, in seconds.\n        max_pool_size: The maximum number of connections to save in the pool.\n        client_kwargs: Additional keyword arguments to pass to\n            `docker.from_env()` or `DockerClient`.\n\n    Examples:\n        Get a Docker Host client.\n        ```python\n        from prefect_docker import DockerHost\n\n        docker_host = DockerHost(\n        base_url=\"tcp://127.0.0.1:1234\",\n            max_pool_size=4\n        )\n        with docker_host.get_client() as client:\n            ... # Use the client for Docker operations\n        ```\n    \"\"\"\n\n    _block_type_name = \"Docker Host\"\n    _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\"  # noqa\n    _description = \"Store settings for interacting with a Docker host.\"\n\n    base_url: Optional[str] = Field(\n        default=None,\n        description=\"URL to the Docker host.\",\n        title=\"Base URL\",\n        example=\"unix:///var/run/docker.sock\",\n    )\n    version: str = Field(default=\"auto\", description=\"The version of the API to use\")\n    timeout: Optional[int] = Field(\n        default=None, description=\"Default timeout for API calls, in seconds.\"\n    )\n    max_pool_size: Optional[int] = Field(\n        default=None,\n        description=\"The maximum number of connections to save in the pool.\",\n    )\n    client_kwargs: Dict[str, Any] = Field(\n        default_factory=dict,\n        title=\"Additional Configuration\",\n        description=(\n            \"Additional keyword arguments to pass to \"\n            \"`docker.from_env()` or `DockerClient`.\"\n        ),\n    )\n\n    def get_client(self) -&gt; docker.DockerClient:\n\"\"\"\n        Gets a Docker Client to communicate with a Docker host.\n\n        Returns:\n            A Docker Client.\n        \"\"\"\n        logger = get_run_logger()\n        client_kwargs = {\n            \"version\": self.version,\n            \"timeout\": self.timeout,\n            \"max_pool_size\": self.max_pool_size,\n            **self.client_kwargs,\n        }\n        client_kwargs = {\n            key: value for key, value in client_kwargs.items() if value is not None\n        }\n        if self.base_url is None:\n            logger.debug(\n                f\"Creating a Docker client from \"\n                f\"environment variables, using {self.version} version.\"\n            )\n            client = _ContextManageableDockerClient.from_env(**client_kwargs)\n        else:\n            logger.debug(\n                f\"Creating a Docker client to {self.base_url} \"\n                f\"using {self.version} version.\"\n            )\n            client = _ContextManageableDockerClient(\n                base_url=self.base_url, **client_kwargs\n            )\n        return client\n</code></pre>"},{"location":"host/#prefect_docker.host.DockerHost-functions","title":"Functions","text":""},{"location":"host/#prefect_docker.host.DockerHost.get_client","title":"<code>get_client</code>","text":"<p>Gets a Docker Client to communicate with a Docker host.</p> <p>Returns:</p> Type Description <code>docker.DockerClient</code> <p>A Docker Client.</p> Source code in <code>prefect_docker/host.py</code> <pre><code>def get_client(self) -&gt; docker.DockerClient:\n\"\"\"\n    Gets a Docker Client to communicate with a Docker host.\n\n    Returns:\n        A Docker Client.\n    \"\"\"\n    logger = get_run_logger()\n    client_kwargs = {\n        \"version\": self.version,\n        \"timeout\": self.timeout,\n        \"max_pool_size\": self.max_pool_size,\n        **self.client_kwargs,\n    }\n    client_kwargs = {\n        key: value for key, value in client_kwargs.items() if value is not None\n    }\n    if self.base_url is None:\n        logger.debug(\n            f\"Creating a Docker client from \"\n            f\"environment variables, using {self.version} version.\"\n        )\n        client = _ContextManageableDockerClient.from_env(**client_kwargs)\n    else:\n        logger.debug(\n            f\"Creating a Docker client to {self.base_url} \"\n            f\"using {self.version} version.\"\n        )\n        client = _ContextManageableDockerClient(\n            base_url=self.base_url, **client_kwargs\n        )\n    return client\n</code></pre>"},{"location":"images/","title":"Images","text":""},{"location":"images/#prefect_docker.images","title":"<code>prefect_docker.images</code>","text":"<p>Integrations with Docker Images.</p>"},{"location":"images/#prefect_docker.images-classes","title":"Classes","text":""},{"location":"images/#prefect_docker.images-functions","title":"Functions","text":""},{"location":"images/#prefect_docker.images.pull_docker_image","title":"<code>pull_docker_image</code>  <code>async</code>","text":"<p>Pull an image of the given name and return it. Similar to the docker pull command.</p> <p>If all_tags is set, the tag parameter is ignored and all image tags will be pulled.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>str</code> <p>The repository to pull.</p> required <code>tag</code> <code>Optional[str]</code> <p>The tag to pull; if not provided, it is set to latest.</p> <code>None</code> <code>platform</code> <code>Optional[str]</code> <p>Platform in the format os[/arch[/variant]].</p> <code>None</code> <code>all_tags</code> <code>bool</code> <p>Pull all image tags which will return a list of Images.</p> <code>False</code> <code>docker_host</code> <code>Optional[DockerHost]</code> <p>Settings for interacting with a Docker host; if not provided, will automatically instantiate a <code>DockerHost</code> from env.</p> <code>None</code> <code>docker_registry_credentials</code> <code>Optional[DockerRegistryCredentials]</code> <p>Docker credentials used to log in to a registry before pulling the image.</p> <code>None</code> <code>**pull_kwargs</code> <code>Dict[str, Any]</code> <p>Additional keyword arguments to pass to <code>client.images.pull</code>.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[Image, List[Image]]</code> <p>The image that has been pulled, or a list of images if <code>all_tags</code> is <code>True</code>.</p> <p>Examples:</p> <p>Pull prefecthq/prefect image with the tag latest-python3.10. <pre><code>from prefect import flow\nfrom prefect_docker.images import pull_docker_image\n\n@flow\ndef pull_docker_image_flow():\n    image = pull_docker_image(\n        repository=\"prefecthq/prefect\",\n        tag=\"latest-python3.10\"\n    )\n    return image\n\npull_docker_image_flow()\n</code></pre></p> Source code in <code>prefect_docker/images.py</code> <pre><code>@task\nasync def pull_docker_image(\n    repository: str,\n    tag: Optional[str] = None,\n    platform: Optional[str] = None,\n    all_tags: bool = False,\n    docker_host: Optional[DockerHost] = None,\n    docker_registry_credentials: Optional[DockerRegistryCredentials] = None,\n    **pull_kwargs: Dict[str, Any],\n) -&gt; Union[Image, List[Image]]:\n\"\"\"\n    Pull an image of the given name and return it. Similar to the docker pull command.\n\n    If all_tags is set, the tag parameter is ignored and all image tags will be pulled.\n\n    Args:\n        repository: The repository to pull.\n        tag: The tag to pull; if not provided, it is set to latest.\n        platform: Platform in the format os[/arch[/variant]].\n        all_tags: Pull all image tags which will return a list of Images.\n        docker_host: Settings for interacting with a Docker host; if not\n            provided, will automatically instantiate a `DockerHost` from env.\n        docker_registry_credentials: Docker credentials used to log in to\n            a registry before pulling the image.\n        **pull_kwargs: Additional keyword arguments to pass to `client.images.pull`.\n\n    Returns:\n        The image that has been pulled, or a list of images if `all_tags` is `True`.\n\n    Examples:\n        Pull prefecthq/prefect image with the tag latest-python3.10.\n        ```python\n        from prefect import flow\n        from prefect_docker.images import pull_docker_image\n\n        @flow\n        def pull_docker_image_flow():\n            image = pull_docker_image(\n                repository=\"prefecthq/prefect\",\n                tag=\"latest-python3.10\"\n            )\n            return image\n\n        pull_docker_image_flow()\n        ```\n    \"\"\"\n    logger = get_run_logger()\n    if tag and all_tags:\n        raise ValueError(\"Cannot pass `tags` and `all_tags` together\")\n\n    pull_kwargs = {\n        \"repository\": repository,\n        \"tag\": tag,\n        \"platform\": platform,\n        \"all_tags\": all_tags,\n        **pull_kwargs,\n    }\n    pull_kwargs = {\n        key: value for key, value in pull_kwargs.items() if value is not None\n    }\n\n    with (docker_host or DockerHost()).get_client() as client:\n        if docker_registry_credentials is not None:\n            await docker_registry_credentials.login(client=client)\n\n        if tag:\n            logger.info(f\"Pulling image: {repository}:{tag}.\")\n        elif all_tags:\n            logger.info(f\"Pulling all images from: {repository}\")\n\n        image = await run_sync_in_worker_thread(client.images.pull, **pull_kwargs)\n\n    return image\n</code></pre>"}]}