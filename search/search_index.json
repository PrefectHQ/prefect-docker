{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"prefect-docker Welcome! Prefect integrations for working with Docker. Note! The DockerRegistryCredentials in prefect-docker is a unique block, separate from the DockerRegistry in prefect core. While DockerRegistry implements a few functionality from both DockerHost and DockerRegistryCredentials for convenience, it does not allow much configuration to interact with a Docker host. Do not use DockerRegistry with this collection. Instead, use DockerHost and DockerRegistryCredentials . Getting Started Python setup Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation . Installation Install prefect-docker with pip : pip install prefect-docker Then, register to view the block on Prefect Cloud: prefect block register -m prefect_docker Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI . Pull image, and create, start, log, stop, and remove Docker container from prefect import flow , get_run_logger from prefect_docker.images import pull_docker_image from prefect_docker.containers import ( create_docker_container , start_docker_container , get_docker_container_logs , stop_docker_container , remove_docker_container , ) @flow def docker_flow (): logger = get_run_logger () pull_docker_image ( \"prefecthq/prefect\" , \"latest\" ) container = create_docker_container ( image = \"prefecthq/prefect\" , command = \"echo 'hello world!' && sleep 60\" ) start_docker_container ( container_id = container . id ) logs = get_docker_container_logs ( container_id = container . id ) logger . info ( logs ) stop_docker_container ( container_id = container . id ) remove_docker_container ( container_id = container . id ) return container Use a custom Docker Host to create a Docker container from prefect import flow from prefect_docker import DockerHost from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow (): docker_host = DockerHost ( base_url = \"tcp://127.0.0.1:1234\" , max_pool_size = 4 ) container = create_docker_container ( docker_host = docker_host , image = \"prefecthq/prefect\" , command = \"echo 'hello world!'\" ) create_docker_container_flow () Resources If you encounter any bugs while using prefect-docker , feel free to open an issue in the prefect-docker repository. If you have any questions or issues while using prefect-docker , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-docker for updates too! Development If you'd like to install a version of prefect-docker for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-docker.git cd prefect-docker/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Home"},{"location":"#prefect-docker","text":"","title":"prefect-docker"},{"location":"#welcome","text":"Prefect integrations for working with Docker. Note! The DockerRegistryCredentials in prefect-docker is a unique block, separate from the DockerRegistry in prefect core. While DockerRegistry implements a few functionality from both DockerHost and DockerRegistryCredentials for convenience, it does not allow much configuration to interact with a Docker host. Do not use DockerRegistry with this collection. Instead, use DockerHost and DockerRegistryCredentials .","title":"Welcome!"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#python-setup","text":"Requires an installation of Python 3.7+. We recommend using a Python virtual environment manager such as pipenv, conda or virtualenv. These tasks are designed to work with Prefect 2.0. For more information about how to use Prefect, please refer to the Prefect documentation .","title":"Python setup"},{"location":"#installation","text":"Install prefect-docker with pip : pip install prefect-docker Then, register to view the block on Prefect Cloud: prefect block register -m prefect_docker Note, to use the load method on Blocks, you must already have a block document saved through code or saved through the UI .","title":"Installation"},{"location":"#pull-image-and-create-start-log-stop-and-remove-docker-container","text":"from prefect import flow , get_run_logger from prefect_docker.images import pull_docker_image from prefect_docker.containers import ( create_docker_container , start_docker_container , get_docker_container_logs , stop_docker_container , remove_docker_container , ) @flow def docker_flow (): logger = get_run_logger () pull_docker_image ( \"prefecthq/prefect\" , \"latest\" ) container = create_docker_container ( image = \"prefecthq/prefect\" , command = \"echo 'hello world!' && sleep 60\" ) start_docker_container ( container_id = container . id ) logs = get_docker_container_logs ( container_id = container . id ) logger . info ( logs ) stop_docker_container ( container_id = container . id ) remove_docker_container ( container_id = container . id ) return container","title":"Pull image, and create, start, log, stop, and remove Docker container"},{"location":"#use-a-custom-docker-host-to-create-a-docker-container","text":"from prefect import flow from prefect_docker import DockerHost from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow (): docker_host = DockerHost ( base_url = \"tcp://127.0.0.1:1234\" , max_pool_size = 4 ) container = create_docker_container ( docker_host = docker_host , image = \"prefecthq/prefect\" , command = \"echo 'hello world!'\" ) create_docker_container_flow ()","title":"Use a custom Docker Host to create a Docker container"},{"location":"#resources","text":"If you encounter any bugs while using prefect-docker , feel free to open an issue in the prefect-docker repository. If you have any questions or issues while using prefect-docker , you can find help in either the Prefect Discourse forum or the Prefect Slack community . Feel free to \u2b50\ufe0f or watch prefect-docker for updates too!","title":"Resources"},{"location":"#development","text":"If you'd like to install a version of prefect-docker for development, clone the repository and perform an editable install with pip : git clone https://github.com/PrefectHQ/prefect-docker.git cd prefect-docker/ pip install -e \".[dev]\" # Install linting pre-commit hooks pre-commit install","title":"Development"},{"location":"containers/","text":"prefect_docker.containers Integrations with Docker Containers. Classes Functions create_docker_container async Create a container without starting it. Similar to docker create. Parameters: Name Type Description Default image str The image to run. required command Optional [ Union [ str , List [ str ]]] The command(s) to run in the container. None name Optional [ str ] The name for this container. None detach Optional [ bool ] Run container in the background. None docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None entrypoint Optional [ Union [ str , List [ str ]]] The entrypoint for the container. None environment Optional [ Union [ Dict [ str , str ], List [ str ]]] Environment variables to set inside the container, as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"]. None **create_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.create . {} Returns: Type Description Container A Docker Container object. Examples: Create a container with the Prefect image. from prefect import flow from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow (): container = create_docker_container ( image = \"prefecthq/prefect\" , command = \"echo 'hello world!'\" ) create_docker_container_flow () Source code in prefect_docker/containers.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @task async def create_docker_container ( image : str , command : Optional [ Union [ str , List [ str ]]] = None , name : Optional [ str ] = None , detach : Optional [ bool ] = None , entrypoint : Optional [ Union [ str , List [ str ]]] = None , environment : Optional [ Union [ Dict [ str , str ], List [ str ]]] = None , docker_host : Optional [ DockerHost ] = None , ** create_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Create a container without starting it. Similar to docker create. Args: image: The image to run. command: The command(s) to run in the container. name: The name for this container. detach: Run container in the background. docker_host: Settings for interacting with a Docker host. entrypoint: The entrypoint for the container. environment: Environment variables to set inside the container, as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"]. **create_kwargs: Additional keyword arguments to pass to [`client.containers.create`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.create). Returns: A Docker Container object. Examples: Create a container with the Prefect image. ```python from prefect import flow from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow(): container = create_docker_container( image=\"prefecthq/prefect\", command=\"echo 'hello world!'\" ) create_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : logger . info ( f \"Creating container with { image !r} image.\" ) container = await run_sync_in_worker_thread ( client . containers . create , image = image , command = command , name = name , detach = detach , entrypoint = entrypoint , environment = environment , ** create_kwargs , ) return container get_docker_container_logs async Get logs from this container. Similar to the docker logs command. Parameters: Name Type Description Default container_id str The container ID to pull logs from. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **logs_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).logs . {} Returns: Type Description str The Container's logs. Examples: Gets logs from a container with an ID that starts with \"c157\". from prefect import flow from prefect_docker.containers import get_docker_container_logs @flow def get_docker_container_logs_flow (): logs = get_docker_container_logs ( container_id = \"c157\" ) return logs get_docker_container_logs_flow () Source code in prefect_docker/containers.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @task async def get_docker_container_logs ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** logs_kwargs : Dict [ str , Any ], ) -> str : \"\"\" Get logs from this container. Similar to the docker logs command. Args: container_id: The container ID to pull logs from. docker_host: Settings for interacting with a Docker host. **logs_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).logs`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.logs). Returns: The Container's logs. Examples: Gets logs from a container with an ID that starts with \"c157\". ```python from prefect import flow from prefect_docker.containers import get_docker_container_logs @flow def get_docker_container_logs_flow(): logs = get_docker_container_logs(container_id=\"c157\") return logs get_docker_container_logs_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Retrieving logs from { container . id !r} container.\" ) logs = await run_sync_in_worker_thread ( container . logs , ** logs_kwargs ) return logs . decode () remove_docker_container async Remove this container. Similar to the docker rm command. Parameters: Name Type Description Default container_id str The container ID to remove. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **remove_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).remove . {} Returns: Type Description Container The Docker Container object. Examples: Removes a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import remove_docker_container @flow def remove_docker_container_flow (): container = remove_docker_container ( container_id = \"c157\" ) return container remove_docker_container () Source code in prefect_docker/containers.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @task async def remove_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** remove_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Remove this container. Similar to the docker rm command. Args: container_id: The container ID to remove. docker_host: Settings for interacting with a Docker host. **remove_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).remove`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.remove). Returns: The Docker Container object. Examples: Removes a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import remove_docker_container @flow def remove_docker_container_flow(): container = remove_docker_container(container_id=\"c157\") return container remove_docker_container() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Removing container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . remove , ** remove_kwargs ) return container start_docker_container async Start this container. Similar to the docker start command. Parameters: Name Type Description Default container_id str The container ID to start. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **start_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).start . {} Returns: Type Description Container The Docker Container object. Examples: Start a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import start_docker_container @flow def start_docker_container_flow (): container = start_docker_container ( container_id = \"c157\" ) return container start_docker_container_flow () Source code in prefect_docker/containers.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 @task async def start_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** start_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Start this container. Similar to the docker start command. Args: container_id: The container ID to start. docker_host: Settings for interacting with a Docker host. **start_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).start`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.start). Returns: The Docker Container object. Examples: Start a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import start_docker_container @flow def start_docker_container_flow(): container = start_docker_container(container_id=\"c157\") return container start_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Starting container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . start , ** start_kwargs ) return container stop_docker_container async Stops a container. Similar to the docker stop command. Parameters: Name Type Description Default container_id str The container ID to stop. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **stop_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).stop . {} Returns: Type Description Container The Docker Container object. Examples: Stop a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import stop_docker_container @flow def stop_docker_container_flow (): container = stop_docker_container ( container_id = \"c157\" ) return container stop_docker_container_flow () Source code in prefect_docker/containers.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 @task async def stop_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** stop_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Stops a container. Similar to the docker stop command. Args: container_id: The container ID to stop. docker_host: Settings for interacting with a Docker host. **stop_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).stop`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.stop). Returns: The Docker Container object. Examples: Stop a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import stop_docker_container @flow def stop_docker_container_flow(): container = stop_docker_container(container_id=\"c157\") return container stop_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Stopping container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . stop , ** stop_kwargs ) return container","title":"Containers"},{"location":"containers/#prefect_docker.containers","text":"Integrations with Docker Containers.","title":"containers"},{"location":"containers/#prefect_docker.containers-classes","text":"","title":"Classes"},{"location":"containers/#prefect_docker.containers-functions","text":"","title":"Functions"},{"location":"containers/#prefect_docker.containers.create_docker_container","text":"Create a container without starting it. Similar to docker create. Parameters: Name Type Description Default image str The image to run. required command Optional [ Union [ str , List [ str ]]] The command(s) to run in the container. None name Optional [ str ] The name for this container. None detach Optional [ bool ] Run container in the background. None docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None entrypoint Optional [ Union [ str , List [ str ]]] The entrypoint for the container. None environment Optional [ Union [ Dict [ str , str ], List [ str ]]] Environment variables to set inside the container, as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"]. None **create_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.create . {} Returns: Type Description Container A Docker Container object. Examples: Create a container with the Prefect image. from prefect import flow from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow (): container = create_docker_container ( image = \"prefecthq/prefect\" , command = \"echo 'hello world!'\" ) create_docker_container_flow () Source code in prefect_docker/containers.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @task async def create_docker_container ( image : str , command : Optional [ Union [ str , List [ str ]]] = None , name : Optional [ str ] = None , detach : Optional [ bool ] = None , entrypoint : Optional [ Union [ str , List [ str ]]] = None , environment : Optional [ Union [ Dict [ str , str ], List [ str ]]] = None , docker_host : Optional [ DockerHost ] = None , ** create_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Create a container without starting it. Similar to docker create. Args: image: The image to run. command: The command(s) to run in the container. name: The name for this container. detach: Run container in the background. docker_host: Settings for interacting with a Docker host. entrypoint: The entrypoint for the container. environment: Environment variables to set inside the container, as a dictionary or a list of strings in the format [\"SOMEVARIABLE=xxx\"]. **create_kwargs: Additional keyword arguments to pass to [`client.containers.create`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.ContainerCollection.create). Returns: A Docker Container object. Examples: Create a container with the Prefect image. ```python from prefect import flow from prefect_docker.containers import create_docker_container @flow def create_docker_container_flow(): container = create_docker_container( image=\"prefecthq/prefect\", command=\"echo 'hello world!'\" ) create_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : logger . info ( f \"Creating container with { image !r} image.\" ) container = await run_sync_in_worker_thread ( client . containers . create , image = image , command = command , name = name , detach = detach , entrypoint = entrypoint , environment = environment , ** create_kwargs , ) return container","title":"create_docker_container()"},{"location":"containers/#prefect_docker.containers.get_docker_container_logs","text":"Get logs from this container. Similar to the docker logs command. Parameters: Name Type Description Default container_id str The container ID to pull logs from. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **logs_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).logs . {} Returns: Type Description str The Container's logs. Examples: Gets logs from a container with an ID that starts with \"c157\". from prefect import flow from prefect_docker.containers import get_docker_container_logs @flow def get_docker_container_logs_flow (): logs = get_docker_container_logs ( container_id = \"c157\" ) return logs get_docker_container_logs_flow () Source code in prefect_docker/containers.py 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 @task async def get_docker_container_logs ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** logs_kwargs : Dict [ str , Any ], ) -> str : \"\"\" Get logs from this container. Similar to the docker logs command. Args: container_id: The container ID to pull logs from. docker_host: Settings for interacting with a Docker host. **logs_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).logs`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.logs). Returns: The Container's logs. Examples: Gets logs from a container with an ID that starts with \"c157\". ```python from prefect import flow from prefect_docker.containers import get_docker_container_logs @flow def get_docker_container_logs_flow(): logs = get_docker_container_logs(container_id=\"c157\") return logs get_docker_container_logs_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Retrieving logs from { container . id !r} container.\" ) logs = await run_sync_in_worker_thread ( container . logs , ** logs_kwargs ) return logs . decode ()","title":"get_docker_container_logs()"},{"location":"containers/#prefect_docker.containers.remove_docker_container","text":"Remove this container. Similar to the docker rm command. Parameters: Name Type Description Default container_id str The container ID to remove. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **remove_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).remove . {} Returns: Type Description Container The Docker Container object. Examples: Removes a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import remove_docker_container @flow def remove_docker_container_flow (): container = remove_docker_container ( container_id = \"c157\" ) return container remove_docker_container () Source code in prefect_docker/containers.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 @task async def remove_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** remove_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Remove this container. Similar to the docker rm command. Args: container_id: The container ID to remove. docker_host: Settings for interacting with a Docker host. **remove_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).remove`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.remove). Returns: The Docker Container object. Examples: Removes a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import remove_docker_container @flow def remove_docker_container_flow(): container = remove_docker_container(container_id=\"c157\") return container remove_docker_container() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Removing container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . remove , ** remove_kwargs ) return container","title":"remove_docker_container()"},{"location":"containers/#prefect_docker.containers.start_docker_container","text":"Start this container. Similar to the docker start command. Parameters: Name Type Description Default container_id str The container ID to start. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **start_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).start . {} Returns: Type Description Container The Docker Container object. Examples: Start a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import start_docker_container @flow def start_docker_container_flow (): container = start_docker_container ( container_id = \"c157\" ) return container start_docker_container_flow () Source code in prefect_docker/containers.py 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 @task async def start_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** start_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Start this container. Similar to the docker start command. Args: container_id: The container ID to start. docker_host: Settings for interacting with a Docker host. **start_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).start`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.start). Returns: The Docker Container object. Examples: Start a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import start_docker_container @flow def start_docker_container_flow(): container = start_docker_container(container_id=\"c157\") return container start_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Starting container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . start , ** start_kwargs ) return container","title":"start_docker_container()"},{"location":"containers/#prefect_docker.containers.stop_docker_container","text":"Stops a container. Similar to the docker stop command. Parameters: Name Type Description Default container_id str The container ID to stop. required docker_host Optional [ DockerHost ] Settings for interacting with a Docker host. None **stop_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.containers.get(container_id).stop . {} Returns: Type Description Container The Docker Container object. Examples: Stop a container with an ID that starts wtih \"c157\". from prefect import flow from prefect_docker.containers import stop_docker_container @flow def stop_docker_container_flow (): container = stop_docker_container ( container_id = \"c157\" ) return container stop_docker_container_flow () Source code in prefect_docker/containers.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 @task async def stop_docker_container ( container_id : str , docker_host : Optional [ DockerHost ] = None , ** stop_kwargs : Dict [ str , Any ], ) -> Container : \"\"\" Stops a container. Similar to the docker stop command. Args: container_id: The container ID to stop. docker_host: Settings for interacting with a Docker host. **stop_kwargs: Additional keyword arguments to pass to [`client.containers.get(container_id).stop`](https://docker-py.readthedocs.io/en/stable/containers.html#docker.models.containers.Container.stop). Returns: The Docker Container object. Examples: Stop a container with an ID that starts wtih \"c157\". ```python from prefect import flow from prefect_docker.containers import stop_docker_container @flow def stop_docker_container_flow(): container = stop_docker_container(container_id=\"c157\") return container stop_docker_container_flow() ``` \"\"\" logger = get_run_logger () with ( docker_host or DockerHost ()) . get_client () as client : container = await run_sync_in_worker_thread ( client . containers . get , container_id ) logger . info ( f \"Stopping container { container . id !r} .\" ) await run_sync_in_worker_thread ( container . stop , ** stop_kwargs ) return container","title":"stop_docker_container()"},{"location":"credentials/","text":"prefect_docker.credentials Module containing docker credentials. Classes DockerRegistryCredentials Bases: Block Block used to manage credentials for interacting with a Docker Registry. Examples: Log into Docker Registry. from prefect_docker import DockerHost , DockerRegistryCredentials docker_host = DockerHost () docker_registry_credentials = DockerRegistryCredentials ( username = \"my_username\" , password = \"my_password\" , registry_url = \"registry.hub.docker.com\" , ) with docker_host . get_client () as client : docker_registry_credentials . login ( client ) Source code in prefect_docker/credentials.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class DockerRegistryCredentials ( Block ): \"\"\" Block used to manage credentials for interacting with a Docker Registry. Examples: Log into Docker Registry. ```python from prefect_docker import DockerHost, DockerRegistryCredentials docker_host = DockerHost() docker_registry_credentials = DockerRegistryCredentials( username=\"my_username\", password=\"my_password\", registry_url=\"registry.hub.docker.com\", ) with docker_host.get_client() as client: docker_registry_credentials.login(client) ``` \"\"\" _block_type_name = \"Docker Registry Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\" # noqa _description = \"Store credentials for interacting with a Docker Registry.\" username : str = Field ( default =... , description = \"The username to log into the registry with.\" ) password : SecretStr = Field ( default =... , description = \"The password to log into the registry with.\" ) registry_url : str = Field ( default =... , description = ( 'The URL to the registry. Generally, \"http\" or \"https\" can be omitted.' ), example = \"registry.hub.docker.com\" , ) reauth : bool = Field ( default = True , description = \"Whether or not to reauthenticate on each interaction.\" , ) async def login ( self , client : docker . DockerClient ): \"\"\" Authenticates a given Docker client with the configured Docker registry. Args: client: A Docker Client. \"\"\" logger = get_run_logger () logger . debug ( f \"Logging into { self . registry_url } .\" ) await run_sync_in_worker_thread ( client . login , username = self . username , password = self . password . get_secret_value (), registry = self . registry_url , # See https://github.com/docker/docker-py/issues/2256 for information on # the default value for reauth. reauth = self . reauth , ) Functions login async Authenticates a given Docker client with the configured Docker registry. Parameters: Name Type Description Default client docker . DockerClient A Docker Client. required Source code in prefect_docker/credentials.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def login ( self , client : docker . DockerClient ): \"\"\" Authenticates a given Docker client with the configured Docker registry. Args: client: A Docker Client. \"\"\" logger = get_run_logger () logger . debug ( f \"Logging into { self . registry_url } .\" ) await run_sync_in_worker_thread ( client . login , username = self . username , password = self . password . get_secret_value (), registry = self . registry_url , # See https://github.com/docker/docker-py/issues/2256 for information on # the default value for reauth. reauth = self . reauth , )","title":"Credentials"},{"location":"credentials/#prefect_docker.credentials","text":"Module containing docker credentials.","title":"credentials"},{"location":"credentials/#prefect_docker.credentials-classes","text":"","title":"Classes"},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials","text":"Bases: Block Block used to manage credentials for interacting with a Docker Registry. Examples: Log into Docker Registry. from prefect_docker import DockerHost , DockerRegistryCredentials docker_host = DockerHost () docker_registry_credentials = DockerRegistryCredentials ( username = \"my_username\" , password = \"my_password\" , registry_url = \"registry.hub.docker.com\" , ) with docker_host . get_client () as client : docker_registry_credentials . login ( client ) Source code in prefect_docker/credentials.py 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 class DockerRegistryCredentials ( Block ): \"\"\" Block used to manage credentials for interacting with a Docker Registry. Examples: Log into Docker Registry. ```python from prefect_docker import DockerHost, DockerRegistryCredentials docker_host = DockerHost() docker_registry_credentials = DockerRegistryCredentials( username=\"my_username\", password=\"my_password\", registry_url=\"registry.hub.docker.com\", ) with docker_host.get_client() as client: docker_registry_credentials.login(client) ``` \"\"\" _block_type_name = \"Docker Registry Credentials\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\" # noqa _description = \"Store credentials for interacting with a Docker Registry.\" username : str = Field ( default =... , description = \"The username to log into the registry with.\" ) password : SecretStr = Field ( default =... , description = \"The password to log into the registry with.\" ) registry_url : str = Field ( default =... , description = ( 'The URL to the registry. Generally, \"http\" or \"https\" can be omitted.' ), example = \"registry.hub.docker.com\" , ) reauth : bool = Field ( default = True , description = \"Whether or not to reauthenticate on each interaction.\" , ) async def login ( self , client : docker . DockerClient ): \"\"\" Authenticates a given Docker client with the configured Docker registry. Args: client: A Docker Client. \"\"\" logger = get_run_logger () logger . debug ( f \"Logging into { self . registry_url } .\" ) await run_sync_in_worker_thread ( client . login , username = self . username , password = self . password . get_secret_value (), registry = self . registry_url , # See https://github.com/docker/docker-py/issues/2256 for information on # the default value for reauth. reauth = self . reauth , )","title":"DockerRegistryCredentials"},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials-functions","text":"","title":"Functions"},{"location":"credentials/#prefect_docker.credentials.DockerRegistryCredentials.login","text":"Authenticates a given Docker client with the configured Docker registry. Parameters: Name Type Description Default client docker . DockerClient A Docker Client. required Source code in prefect_docker/credentials.py 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 async def login ( self , client : docker . DockerClient ): \"\"\" Authenticates a given Docker client with the configured Docker registry. Args: client: A Docker Client. \"\"\" logger = get_run_logger () logger . debug ( f \"Logging into { self . registry_url } .\" ) await run_sync_in_worker_thread ( client . login , username = self . username , password = self . password . get_secret_value (), registry = self . registry_url , # See https://github.com/docker/docker-py/issues/2256 for information on # the default value for reauth. reauth = self . reauth , )","title":"login()"},{"location":"host/","text":"prefect_docker.host Module containing Docker host settings. Classes DockerHost Bases: Block Block used to manage settings for interacting with a Docker host. Attributes: Name Type Description base_url Optional [ str ] URL to the Docker server, e.g. unix:///var/run/docker.sock or tcp://127.0.0.1:1234 . If this is not set, the client will be configured from environment variables. version str The version of the API to use. Set to auto to automatically detect the server's version. timeout Optional [ int ] Default timeout for API calls, in seconds. max_pool_size Optional [ int ] The maximum number of connections to save in the pool. client_kwargs Dict [ str , Any ] Additional keyword arguments to pass to docker.from_env() or DockerClient . Examples: Get a Docker Host client. from prefect_docker import DockerHost docker_host = DockerHost ( base_url = \"tcp://127.0.0.1:1234\" , max_pool_size = 4 ) with docker_host . get_client () as client : ... # Use the client for Docker operations Source code in prefect_docker/host.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 class DockerHost ( Block ): \"\"\" Block used to manage settings for interacting with a Docker host. Attributes: base_url: URL to the Docker server, e.g. `unix:///var/run/docker.sock` or `tcp://127.0.0.1:1234`. If this is not set, the client will be configured from environment variables. version: The version of the API to use. Set to auto to automatically detect the server's version. timeout: Default timeout for API calls, in seconds. max_pool_size: The maximum number of connections to save in the pool. client_kwargs: Additional keyword arguments to pass to `docker.from_env()` or `DockerClient`. Examples: Get a Docker Host client. ```python from prefect_docker import DockerHost docker_host = DockerHost( base_url=\"tcp://127.0.0.1:1234\", max_pool_size=4 ) with docker_host.get_client() as client: ... # Use the client for Docker operations ``` \"\"\" _block_type_name = \"Docker Host\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\" # noqa _description = \"Store settings for interacting with a Docker host.\" base_url : Optional [ str ] = Field ( default = None , description = \"URL to the Docker host.\" , title = \"Base URL\" , example = \"unix:///var/run/docker.sock\" , ) version : str = Field ( default = \"auto\" , description = \"The version of the API to use\" ) timeout : Optional [ int ] = Field ( default = None , description = \"Default timeout for API calls, in seconds.\" ) max_pool_size : Optional [ int ] = Field ( default = None , description = \"The maximum number of connections to save in the pool.\" , ) client_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional Configuration\" , description = ( \"Additional keyword arguments to pass to \" \"`docker.from_env()` or `DockerClient`.\" ), ) def get_client ( self ) -> docker . DockerClient : \"\"\" Gets a Docker Client to communicate with a Docker host. Returns: A Docker Client. \"\"\" logger = get_run_logger () client_kwargs = { \"version\" : self . version , \"timeout\" : self . timeout , \"max_pool_size\" : self . max_pool_size , ** self . client_kwargs , } client_kwargs = { key : value for key , value in client_kwargs . items () if value is not None } if self . base_url is None : logger . debug ( f \"Creating a Docker client from \" f \"environment variables, using { self . version } version.\" ) client = _ContextManageableDockerClient . from_env ( ** client_kwargs ) else : logger . debug ( f \"Creating a Docker client to { self . base_url } \" f \"using { self . version } version.\" ) client = _ContextManageableDockerClient ( base_url = self . base_url , ** client_kwargs ) return client Functions get_client Gets a Docker Client to communicate with a Docker host. Returns: Type Description docker . DockerClient A Docker Client. Source code in prefect_docker/host.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def get_client ( self ) -> docker . DockerClient : \"\"\" Gets a Docker Client to communicate with a Docker host. Returns: A Docker Client. \"\"\" logger = get_run_logger () client_kwargs = { \"version\" : self . version , \"timeout\" : self . timeout , \"max_pool_size\" : self . max_pool_size , ** self . client_kwargs , } client_kwargs = { key : value for key , value in client_kwargs . items () if value is not None } if self . base_url is None : logger . debug ( f \"Creating a Docker client from \" f \"environment variables, using { self . version } version.\" ) client = _ContextManageableDockerClient . from_env ( ** client_kwargs ) else : logger . debug ( f \"Creating a Docker client to { self . base_url } \" f \"using { self . version } version.\" ) client = _ContextManageableDockerClient ( base_url = self . base_url , ** client_kwargs ) return client","title":"Host"},{"location":"host/#prefect_docker.host","text":"Module containing Docker host settings.","title":"host"},{"location":"host/#prefect_docker.host-classes","text":"","title":"Classes"},{"location":"host/#prefect_docker.host.DockerHost","text":"Bases: Block Block used to manage settings for interacting with a Docker host. Attributes: Name Type Description base_url Optional [ str ] URL to the Docker server, e.g. unix:///var/run/docker.sock or tcp://127.0.0.1:1234 . If this is not set, the client will be configured from environment variables. version str The version of the API to use. Set to auto to automatically detect the server's version. timeout Optional [ int ] Default timeout for API calls, in seconds. max_pool_size Optional [ int ] The maximum number of connections to save in the pool. client_kwargs Dict [ str , Any ] Additional keyword arguments to pass to docker.from_env() or DockerClient . Examples: Get a Docker Host client. from prefect_docker import DockerHost docker_host = DockerHost ( base_url = \"tcp://127.0.0.1:1234\" , max_pool_size = 4 ) with docker_host . get_client () as client : ... # Use the client for Docker operations Source code in prefect_docker/host.py 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 class DockerHost ( Block ): \"\"\" Block used to manage settings for interacting with a Docker host. Attributes: base_url: URL to the Docker server, e.g. `unix:///var/run/docker.sock` or `tcp://127.0.0.1:1234`. If this is not set, the client will be configured from environment variables. version: The version of the API to use. Set to auto to automatically detect the server's version. timeout: Default timeout for API calls, in seconds. max_pool_size: The maximum number of connections to save in the pool. client_kwargs: Additional keyword arguments to pass to `docker.from_env()` or `DockerClient`. Examples: Get a Docker Host client. ```python from prefect_docker import DockerHost docker_host = DockerHost( base_url=\"tcp://127.0.0.1:1234\", max_pool_size=4 ) with docker_host.get_client() as client: ... # Use the client for Docker operations ``` \"\"\" _block_type_name = \"Docker Host\" _logo_url = \"https://images.ctfassets.net/gm98wzqotmnx/2IfXXfMq66mrzJBDFFCHTp/6d8f320d9e4fc4393f045673d61ab612/Moby-logo.png?h=250\" # noqa _description = \"Store settings for interacting with a Docker host.\" base_url : Optional [ str ] = Field ( default = None , description = \"URL to the Docker host.\" , title = \"Base URL\" , example = \"unix:///var/run/docker.sock\" , ) version : str = Field ( default = \"auto\" , description = \"The version of the API to use\" ) timeout : Optional [ int ] = Field ( default = None , description = \"Default timeout for API calls, in seconds.\" ) max_pool_size : Optional [ int ] = Field ( default = None , description = \"The maximum number of connections to save in the pool.\" , ) client_kwargs : Dict [ str , Any ] = Field ( default_factory = dict , title = \"Additional Configuration\" , description = ( \"Additional keyword arguments to pass to \" \"`docker.from_env()` or `DockerClient`.\" ), ) def get_client ( self ) -> docker . DockerClient : \"\"\" Gets a Docker Client to communicate with a Docker host. Returns: A Docker Client. \"\"\" logger = get_run_logger () client_kwargs = { \"version\" : self . version , \"timeout\" : self . timeout , \"max_pool_size\" : self . max_pool_size , ** self . client_kwargs , } client_kwargs = { key : value for key , value in client_kwargs . items () if value is not None } if self . base_url is None : logger . debug ( f \"Creating a Docker client from \" f \"environment variables, using { self . version } version.\" ) client = _ContextManageableDockerClient . from_env ( ** client_kwargs ) else : logger . debug ( f \"Creating a Docker client to { self . base_url } \" f \"using { self . version } version.\" ) client = _ContextManageableDockerClient ( base_url = self . base_url , ** client_kwargs ) return client","title":"DockerHost"},{"location":"host/#prefect_docker.host.DockerHost-functions","text":"","title":"Functions"},{"location":"host/#prefect_docker.host.DockerHost.get_client","text":"Gets a Docker Client to communicate with a Docker host. Returns: Type Description docker . DockerClient A Docker Client. Source code in prefect_docker/host.py 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 def get_client ( self ) -> docker . DockerClient : \"\"\" Gets a Docker Client to communicate with a Docker host. Returns: A Docker Client. \"\"\" logger = get_run_logger () client_kwargs = { \"version\" : self . version , \"timeout\" : self . timeout , \"max_pool_size\" : self . max_pool_size , ** self . client_kwargs , } client_kwargs = { key : value for key , value in client_kwargs . items () if value is not None } if self . base_url is None : logger . debug ( f \"Creating a Docker client from \" f \"environment variables, using { self . version } version.\" ) client = _ContextManageableDockerClient . from_env ( ** client_kwargs ) else : logger . debug ( f \"Creating a Docker client to { self . base_url } \" f \"using { self . version } version.\" ) client = _ContextManageableDockerClient ( base_url = self . base_url , ** client_kwargs ) return client","title":"get_client()"},{"location":"images/","text":"prefect_docker.images Integrations with Docker Images. Classes Functions pull_docker_image async Pull an image of the given name and return it. Similar to the docker pull command. If all_tags is set, the tag parameter is ignored and all image tags will be pulled. Parameters: Name Type Description Default repository str The repository to pull. required tag Optional [ str ] The tag to pull; if not provided, it is set to latest. None platform Optional [ str ] Platform in the format os[/arch[/variant]]. None all_tags bool Pull all image tags which will return a list of Images. False docker_host Optional [ DockerHost ] Settings for interacting with a Docker host; if not provided, will automatically instantiate a DockerHost from env. None docker_registry_credentials Optional [ DockerRegistryCredentials ] Docker credentials used to log in to a registry before pulling the image. None **pull_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.images.pull . {} Returns: Type Description Union [ Image , List [ Image ]] The image that has been pulled, or a list of images if all_tags is True . Examples: Pull prefecthq/prefect image with the tag latest-python3.10. from prefect import flow from prefect_docker.images import pull_docker_image @flow def pull_docker_image_flow (): image = pull_docker_image ( repository = \"prefecthq/prefect\" , tag = \"latest-python3.10\" ) return image pull_docker_image_flow () Source code in prefect_docker/images.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 @task async def pull_docker_image ( repository : str , tag : Optional [ str ] = None , platform : Optional [ str ] = None , all_tags : bool = False , docker_host : Optional [ DockerHost ] = None , docker_registry_credentials : Optional [ DockerRegistryCredentials ] = None , ** pull_kwargs : Dict [ str , Any ], ) -> Union [ Image , List [ Image ]]: \"\"\" Pull an image of the given name and return it. Similar to the docker pull command. If all_tags is set, the tag parameter is ignored and all image tags will be pulled. Args: repository: The repository to pull. tag: The tag to pull; if not provided, it is set to latest. platform: Platform in the format os[/arch[/variant]]. all_tags: Pull all image tags which will return a list of Images. docker_host: Settings for interacting with a Docker host; if not provided, will automatically instantiate a `DockerHost` from env. docker_registry_credentials: Docker credentials used to log in to a registry before pulling the image. **pull_kwargs: Additional keyword arguments to pass to `client.images.pull`. Returns: The image that has been pulled, or a list of images if `all_tags` is `True`. Examples: Pull prefecthq/prefect image with the tag latest-python3.10. ```python from prefect import flow from prefect_docker.images import pull_docker_image @flow def pull_docker_image_flow(): image = pull_docker_image( repository=\"prefecthq/prefect\", tag=\"latest-python3.10\" ) return image pull_docker_image_flow() ``` \"\"\" logger = get_run_logger () if tag and all_tags : raise ValueError ( \"Cannot pass `tags` and `all_tags` together\" ) pull_kwargs = { \"repository\" : repository , \"tag\" : tag , \"platform\" : platform , \"all_tags\" : all_tags , ** pull_kwargs , } pull_kwargs = { key : value for key , value in pull_kwargs . items () if value is not None } with ( docker_host or DockerHost ()) . get_client () as client : if docker_registry_credentials is not None : await docker_registry_credentials . login ( client = client ) if tag : logger . info ( f \"Pulling image: { repository } : { tag } .\" ) elif all_tags : logger . info ( f \"Pulling all images from: { repository } \" ) image = await run_sync_in_worker_thread ( client . images . pull , ** pull_kwargs ) return image","title":"Images"},{"location":"images/#prefect_docker.images","text":"Integrations with Docker Images.","title":"images"},{"location":"images/#prefect_docker.images-classes","text":"","title":"Classes"},{"location":"images/#prefect_docker.images-functions","text":"","title":"Functions"},{"location":"images/#prefect_docker.images.pull_docker_image","text":"Pull an image of the given name and return it. Similar to the docker pull command. If all_tags is set, the tag parameter is ignored and all image tags will be pulled. Parameters: Name Type Description Default repository str The repository to pull. required tag Optional [ str ] The tag to pull; if not provided, it is set to latest. None platform Optional [ str ] Platform in the format os[/arch[/variant]]. None all_tags bool Pull all image tags which will return a list of Images. False docker_host Optional [ DockerHost ] Settings for interacting with a Docker host; if not provided, will automatically instantiate a DockerHost from env. None docker_registry_credentials Optional [ DockerRegistryCredentials ] Docker credentials used to log in to a registry before pulling the image. None **pull_kwargs Dict [ str , Any ] Additional keyword arguments to pass to client.images.pull . {} Returns: Type Description Union [ Image , List [ Image ]] The image that has been pulled, or a list of images if all_tags is True . Examples: Pull prefecthq/prefect image with the tag latest-python3.10. from prefect import flow from prefect_docker.images import pull_docker_image @flow def pull_docker_image_flow (): image = pull_docker_image ( repository = \"prefecthq/prefect\" , tag = \"latest-python3.10\" ) return image pull_docker_image_flow () Source code in prefect_docker/images.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 @task async def pull_docker_image ( repository : str , tag : Optional [ str ] = None , platform : Optional [ str ] = None , all_tags : bool = False , docker_host : Optional [ DockerHost ] = None , docker_registry_credentials : Optional [ DockerRegistryCredentials ] = None , ** pull_kwargs : Dict [ str , Any ], ) -> Union [ Image , List [ Image ]]: \"\"\" Pull an image of the given name and return it. Similar to the docker pull command. If all_tags is set, the tag parameter is ignored and all image tags will be pulled. Args: repository: The repository to pull. tag: The tag to pull; if not provided, it is set to latest. platform: Platform in the format os[/arch[/variant]]. all_tags: Pull all image tags which will return a list of Images. docker_host: Settings for interacting with a Docker host; if not provided, will automatically instantiate a `DockerHost` from env. docker_registry_credentials: Docker credentials used to log in to a registry before pulling the image. **pull_kwargs: Additional keyword arguments to pass to `client.images.pull`. Returns: The image that has been pulled, or a list of images if `all_tags` is `True`. Examples: Pull prefecthq/prefect image with the tag latest-python3.10. ```python from prefect import flow from prefect_docker.images import pull_docker_image @flow def pull_docker_image_flow(): image = pull_docker_image( repository=\"prefecthq/prefect\", tag=\"latest-python3.10\" ) return image pull_docker_image_flow() ``` \"\"\" logger = get_run_logger () if tag and all_tags : raise ValueError ( \"Cannot pass `tags` and `all_tags` together\" ) pull_kwargs = { \"repository\" : repository , \"tag\" : tag , \"platform\" : platform , \"all_tags\" : all_tags , ** pull_kwargs , } pull_kwargs = { key : value for key , value in pull_kwargs . items () if value is not None } with ( docker_host or DockerHost ()) . get_client () as client : if docker_registry_credentials is not None : await docker_registry_credentials . login ( client = client ) if tag : logger . info ( f \"Pulling image: { repository } : { tag } .\" ) elif all_tags : logger . info ( f \"Pulling all images from: { repository } \" ) image = await run_sync_in_worker_thread ( client . images . pull , ** pull_kwargs ) return image","title":"pull_docker_image()"}]}